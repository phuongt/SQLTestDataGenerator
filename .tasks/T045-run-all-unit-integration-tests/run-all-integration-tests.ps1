# PowerShell Script ƒë·ªÉ ch·∫°y t·∫•t c·∫£ Integration Tests
# File: run-all-integration-tests.ps1

param(
    [string]$OutputDir = "TestResults/IT_$(Get-Date -Format 'yyyyMMddTHHmmss')",
    [switch]$Verbose = $false,
    [switch]$SkipDatabaseCheck = $false
)

Write-Host "=== CH·∫†Y TO√ÄN B·ªò INTEGRATION TESTS ===" -ForegroundColor Green
Write-Host "Th·ªùi gian b·∫Øt ƒë·∫ßu: $(Get-Date)" -ForegroundColor Yellow

# T·∫°o th∆∞ m·ª•c output
$fullOutputPath = "SqlTestDataGenerator.Tests/$OutputDir"
if (!(Test-Path $fullOutputPath)) {
    New-Item -ItemType Directory -Path $fullOutputPath -Force | Out-Null
}

# Ki·ªÉm tra database connection (n·∫øu kh√¥ng skip)
if (-not $SkipDatabaseCheck) {
    Write-Host "`nüîç Ki·ªÉm tra k·∫øt n·ªëi database..." -ForegroundColor Cyan
    try {
        Push-Location "SqlTestDataGenerator.Tests"
        $dbTestResult = dotnet test --filter "FullyQualifiedName~DatabaseConnectionTest" --verbosity quiet 2>&1
        if ($LASTEXITCODE -ne 0) {
            Write-Host "‚ö†Ô∏è  C·∫¢NH B√ÅO: Database connection test failed. Integration tests c√≥ th·ªÉ b·ªã fail." -ForegroundColor Red
            Write-Host "B·∫°n c√≥ th·ªÉ d√πng -SkipDatabaseCheck ƒë·ªÉ b·ªè qua ki·ªÉm tra n√†y." -ForegroundColor Yellow
        } else {
            Write-Host "‚úÖ Database connection OK" -ForegroundColor Green
        }
    } catch {
        Write-Host "‚ö†Ô∏è  C·∫¢NH B√ÅO: Kh√¥ng th·ªÉ ki·ªÉm tra database connection" -ForegroundColor Red
    } finally {
        Pop-Location
    }
}

# Danh s√°ch Integration Test files
$integrationTestFiles = @(
    "RealMySQLIntegrationTests.cs",
    "MySQLIntegrationDuplicateKeyTests.cs", 
    "ExecuteQueryWithTestDataAsyncDemoTests.cs",
    "CreateMySQLTablesTest.cs",
    "DatabaseConnectionTest.cs",
    "RecordCountStrictVerificationTests.cs",
    "SqlDateAddUTF8Tests.cs",
    "MySQLDateFunctionConverterTests.cs",
    "DuplicateKeyBugFixTests.cs",
    "AIIntegrationBasicTest.cs"
)

$totalTests = $integrationTestFiles.Count
$passedTests = 0
$failedTests = 0
$results = @()

Write-Host "S·ªë l∆∞·ª£ng Integration Test files: $totalTests" -ForegroundColor Cyan

# Ch·∫°y t·ª´ng test file
foreach ($testFile in $integrationTestFiles) {
    $testName = [System.IO.Path]::GetFileNameWithoutExtension($testFile)
    Write-Host "`n--- ƒêang ch·∫°y: $testFile ---" -ForegroundColor Yellow
    
    try {
        # Chuy·ªÉn ƒë·∫øn th∆∞ m·ª•c test project
        Push-Location "SqlTestDataGenerator.Tests"
        
        # Ch·∫°y test v·ªõi output chi ti·∫øt
        $outputFile = "$OutputDir/IT_${testName}_Result.txt"
        $command = "dotnet test --filter `"FullyQualifiedName~$testName`" --verbosity normal --logger `"console;verbosity=detailed`""
        
        if ($Verbose) {
            Write-Host "Executing: $command" -ForegroundColor Gray
        }
        
        # Ch·∫°y v·ªõi timeout ƒë·ªÉ tr√°nh hang
        $job = Start-Job -ScriptBlock {
            param($cmd, $output)
            Invoke-Expression "$cmd > `"$output`" 2>&1; `$LASTEXITCODE"
        } -ArgumentList $command, $outputFile
        
        # ƒê·ª£i t·ªëi ƒëa 300 gi√¢y (5 ph√∫t) cho m·ªói test
        $testResult = Wait-Job $job -Timeout 300
        
        if ($testResult) {
            $exitCode = Receive-Job $job
            Remove-Job $job
            
            if ($exitCode -eq 0) {
                Write-Host "‚úÖ PASSED: $testFile" -ForegroundColor Green
                $passedTests++
                $status = "PASSED"
            } else {
                Write-Host "‚ùå FAILED: $testFile (Exit Code: $exitCode)" -ForegroundColor Red
                $failedTests++
                $status = "FAILED"
            }
        } else {
            # Timeout
            Stop-Job $job
            Remove-Job $job
            Write-Host "‚è∞ TIMEOUT: $testFile (>5 ph√∫t)" -ForegroundColor Red
            $failedTests++
            $status = "TIMEOUT"
            $exitCode = -999
        }
        
        $results += [PSCustomObject]@{
            TestFile = $testFile
            Status = $status
            OutputFile = $outputFile
            ExitCode = $exitCode
        }
        
    } catch {
        Write-Host "‚ùå ERROR: $testFile - $($_.Exception.Message)" -ForegroundColor Red
        $failedTests++
        $results += [PSCustomObject]@{
            TestFile = $testFile
            Status = "ERROR"
            OutputFile = ""
            ExitCode = -1
            Error = $_.Exception.Message
        }
    } finally {
        Pop-Location
    }
}

# T·∫°o b√°o c√°o t·ªïng h·ª£p
$reportFile = "SqlTestDataGenerator.Tests/$OutputDir/IT_Summary_Report.txt"
$summaryContent = @"
=== INTEGRATION TESTS EXECUTION SUMMARY ===
Th·ªùi gian th·ª±c hi·ªán: $(Get-Date)
T·ªïng s·ªë test files: $totalTests
Tests ƒë√£ pass: $passedTests
Tests b·ªã fail: $failedTests
T·ª∑ l·ªá th√†nh c√¥ng: $([math]::Round(($passedTests / $totalTests) * 100, 2))%

=== CHI TI·∫æT K·∫æT QU·∫¢ ===
"@

foreach ($result in $results) {
    $summaryContent += "`n$($result.Status.PadRight(8)) - $($result.TestFile)"
    if ($result.Error) {
        $summaryContent += " (Error: $($result.Error))"
    }
    if ($result.ExitCode -and $result.ExitCode -ne 0) {
        $summaryContent += " (Exit Code: $($result.ExitCode))"
    }
}

$summaryContent += @"

=== GHI CH√ö ===
- Integration tests c·∫ßn database connection h·ª£p l·ªá
- M·ªôt s·ªë tests c√≥ th·ªÉ fail n·∫øu database ch∆∞a setup ƒë√∫ng
- Check app.config cho database connection string
- Timeout ƒë∆∞·ª£c set l√† 5 ph√∫t cho m·ªói test file
"@

$summaryContent | Out-File -FilePath $reportFile -Encoding UTF8

# Hi·ªÉn th·ªã k·∫øt qu·∫£ cu·ªëi c√πng
Write-Host "`n=== K·∫æT QU·∫¢ CU·ªêI C√ôNG ===" -ForegroundColor Cyan
Write-Host "‚úÖ Tests th√†nh c√¥ng: $passedTests/$totalTests" -ForegroundColor Green
Write-Host "‚ùå Tests th·∫•t b·∫°i: $failedTests/$totalTests" -ForegroundColor Red
Write-Host "üìÅ K·∫øt qu·∫£ l∆∞u t·∫°i: $fullOutputPath" -ForegroundColor Yellow
Write-Host "üìÑ B√°o c√°o t·ªïng h·ª£p: $reportFile" -ForegroundColor Yellow

if ($failedTests -gt 0) {
    Write-Host "`n‚ö†Ô∏è  C√ì $failedTests INTEGRATION TESTS B·ªä TH·∫§T B·∫†I!" -ForegroundColor Red
    Write-Host "üí° Ki·ªÉm tra database connection v√† configuration" -ForegroundColor Yellow
    exit 1
} else {
    Write-Host "`nüéâ T·∫§T C·∫¢ INTEGRATION TESTS ƒê√É PASS!" -ForegroundColor Green
    exit 0
} 