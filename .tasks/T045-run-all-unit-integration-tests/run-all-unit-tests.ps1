# PowerShell Script ƒë·ªÉ ch·∫°y t·∫•t c·∫£ Unit Tests
# File: run-all-unit-tests.ps1

param(
    [string]$OutputDir = "TestResults/UT_$(Get-Date -Format 'yyyyMMddTHHmmss')",
    [switch]$Verbose = $false
)

Write-Host "=== CH·∫†Y TO√ÄN B·ªò UNIT TESTS ===" -ForegroundColor Green
Write-Host "Th·ªùi gian b·∫Øt ƒë·∫ßu: $(Get-Date)" -ForegroundColor Yellow

# T·∫°o th∆∞ m·ª•c output
$fullOutputPath = "SqlTestDataGenerator.Tests/$OutputDir"
if (!(Test-Path $fullOutputPath)) {
    New-Item -ItemType Directory -Path $fullOutputPath -Force | Out-Null
}

# Danh s√°ch Unit Test files
$unitTestFiles = @(
    "SqlQueryParserTests.cs",
    "SqlQueryParserV2Tests.cs", 
    "SqlQueryParserV3Tests.cs",
    "SqlQueryParserDebugTests.cs",
    "ConfigurationServiceTests.cs",
    "LoggerServiceTests.cs",
    "ConstraintAwareGenerationTests.cs",
    "ComplexDataGenerationTests.cs",
    "ComplexSqlGenerationTests.cs",
    "ComprehensiveConstraintExtractorTests.cs",
    "EnhancedConstraintExtractionTests.cs",
    "ExistsConstraintExtractionTests.cs",
    "MissingSqlPatternsTests.cs",
    "RecordCountVerificationTests.cs",
    "AssertFailBehaviorDemo.cs",
    "UnitTest1.cs"
)

$totalTests = $unitTestFiles.Count
$passedTests = 0
$failedTests = 0
$results = @()

Write-Host "S·ªë l∆∞·ª£ng Unit Test files: $totalTests" -ForegroundColor Cyan

# Ch·∫°y t·ª´ng test file
foreach ($testFile in $unitTestFiles) {
    $testName = [System.IO.Path]::GetFileNameWithoutExtension($testFile)
    Write-Host "`n--- ƒêang ch·∫°y: $testFile ---" -ForegroundColor Yellow
    
    try {
        # Chuy·ªÉn ƒë·∫øn th∆∞ m·ª•c test project
        Push-Location "SqlTestDataGenerator.Tests"
        
        # Ch·∫°y test v·ªõi output chi ti·∫øt
        $outputFile = "$OutputDir/UT_${testName}_Result.txt"
        $command = "dotnet test --filter `"FullyQualifiedName~$testName`" --verbosity normal --logger `"console;verbosity=detailed`""
        
        if ($Verbose) {
            Write-Host "Executing: $command" -ForegroundColor Gray
        }
        
        $testResult = Invoke-Expression "$command > `"$outputFile`" 2>&1; `$LASTEXITCODE"
        
        if ($testResult -eq 0) {
            Write-Host "‚úÖ PASSED: $testFile" -ForegroundColor Green
            $passedTests++
            $status = "PASSED"
        } else {
            Write-Host "‚ùå FAILED: $testFile" -ForegroundColor Red
            $failedTests++
            $status = "FAILED"
        }
        
        $results += [PSCustomObject]@{
            TestFile = $testFile
            Status = $status
            OutputFile = $outputFile
            ExitCode = $testResult
        }
        
    } catch {
        Write-Host "‚ùå ERROR: $testFile - $($_.Exception.Message)" -ForegroundColor Red
        $failedTests++
        $results += [PSCustomObject]@{
            TestFile = $testFile
            Status = "ERROR"
            OutputFile = ""
            ExitCode = -1
            Error = $_.Exception.Message
        }
    } finally {
        Pop-Location
    }
}

# T·∫°o b√°o c√°o t·ªïng h·ª£p
$reportFile = "SqlTestDataGenerator.Tests/$OutputDir/UT_Summary_Report.txt"
$summaryContent = @"
=== UNIT TESTS EXECUTION SUMMARY ===
Th·ªùi gian th·ª±c hi·ªán: $(Get-Date)
T·ªïng s·ªë test files: $totalTests
Tests ƒë√£ pass: $passedTests
Tests b·ªã fail: $failedTests
T·ª∑ l·ªá th√†nh c√¥ng: $([math]::Round(($passedTests / $totalTests) * 100, 2))%

=== CHI TI·∫æT K·∫æT QU·∫¢ ===
"@

foreach ($result in $results) {
    $summaryContent += "`n$($result.Status.PadRight(8)) - $($result.TestFile)"
    if ($result.Error) {
        $summaryContent += " (Error: $($result.Error))"
    }
}

$summaryContent | Out-File -FilePath $reportFile -Encoding UTF8

# Hi·ªÉn th·ªã k·∫øt qu·∫£ cu·ªëi c√πng
Write-Host "`n=== K·∫æT QU·∫¢ CU·ªêI C√ôNG ===" -ForegroundColor Cyan
Write-Host "‚úÖ Tests th√†nh c√¥ng: $passedTests/$totalTests" -ForegroundColor Green
Write-Host "‚ùå Tests th·∫•t b·∫°i: $failedTests/$totalTests" -ForegroundColor Red
Write-Host "üìÅ K·∫øt qu·∫£ l∆∞u t·∫°i: $fullOutputPath" -ForegroundColor Yellow
Write-Host "üìÑ B√°o c√°o t·ªïng h·ª£p: $reportFile" -ForegroundColor Yellow

if ($failedTests -gt 0) {
    Write-Host "`n‚ö†Ô∏è  C√ì $failedTests TESTS B·ªä TH·∫§T B·∫†I!" -ForegroundColor Red
    exit 1
} else {
    Write-Host "`nüéâ T·∫§T C·∫¢ UNIT TESTS ƒê√É PASS!" -ForegroundColor Green
    exit 0
} 