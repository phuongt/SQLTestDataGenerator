<?xml version="1.0" encoding="utf-8"?>
<TestRun id="64c61844-ed1e-4086-8634-cbdcccc114f6" name="@cursor 2025-07-06 10:57:02" xmlns="http://microsoft.com/schemas/VisualStudio/TeamTest/2010">
  <Times creation="2025-07-06T10:57:02.1607750+00:00" queuing="2025-07-06T10:57:02.1607751+00:00" start="2025-07-06T10:56:59.2706185+00:00" finish="2025-07-06T11:03:07.1704281+00:00" />
  <TestSettings name="default" id="055900fd-8741-447a-9730-da8acc8a0d21">
    <Deployment runDeploymentRoot="_cursor_2025-07-06_10_57_02" />
  </TestSettings>
  <Results>
    <UnitTestResult executionId="5b7fc267-9874-4d59-9dec-dd20ad1a4d8d" testId="a7f106a6-971d-51f4-63e6-c4daba67e711" testName="TC004_10_ExecuteQueryWithTestDataAsync_PerformanceBenchmark_MySQL" computerName="cursor" duration="00:00:00.0054852" startTime="2025-07-06T10:57:03.7403057+00:00" endTime="2025-07-06T10:57:03.7459182+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="5b7fc267-9874-4d59-9dec-dd20ad1a4d8d">
      <Output>
        <StdOut>[CentralizedLoggingManager] Initialized. Logs directory: /workspace/logs
[CentralizedLoggingManager] Config source: default
[EngineService] Centralized logs directory: /workspace/logs
Gemini API Key Available: False
=== PERFORMANCE BENCHMARK: ExecuteQueryWithTestDataAsync ===
Target: Generate 10 records
Performance Threshold: &lt; 30 seconds
[EngineService] Starting execution for MySQL
[EngineService] Analyzing query: 844 chars
[SqlMetadataService] Extracting tables from query: 844 chars
[SqlMetadataService] Clean SQL: 
            SELECT u.id, u.username, u.first_name, u.last_name, u.email, u.salary,
                   c.name, c.code, c.address,
                   r.name as role_name, r.code as role_code, r.level,
...
[SqlMetadataService] Pattern '\bFROM\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)(?:\s+(?:AS\s+)?(\w+))?' found 1 matches
[SqlMetadataService] Match: 'FROM users u'
[SqlMetadataService] Found table: users
[SqlMetadataService] Pattern '\b(?:INNER\s+|LEFT\s+|RIGHT\s+|FULL\s+|OUTER\s+)?JOIN\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)(?:\s+(?:AS\s+)?(\w+))?' found 3 matches
[SqlMetadataService] Match: 'INNER JOIN companies c'
[SqlMetadataService] Found table: companies
[SqlMetadataService] Match: 'INNER JOIN user_roles ur'
[SqlMetadataService] Found table: user_roles
[SqlMetadataService] Match: 'INNER JOIN roles r'
[SqlMetadataService] Found table: roles
[SqlMetadataService] Pattern '\bINTO\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)' found 0 matches
[SqlMetadataService] Pattern '\bUPDATE\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)' found 0 matches
[SqlMetadataService] Pattern '\bINSERT\s+INTO\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)' found 0 matches
[SqlMetadataService] Total tables extracted: 4 - users, companies, user_roles, roles
[EngineService] Metadata extraction failed: Unable to connect to any of the specified MySQL hosts.
[EngineService] Execution failed: Không thể phân tích database schema: Unable to connect to any of the specified MySQL hosts.
[EngineService] Exception type: InvalidOperationException
[EngineService] Inner exception: Unable to connect to any of the specified MySQL hosts.

=== PERFORMANCE RESULTS ===
Total Time: 0.00 seconds
Success: False
Generated Records: 0
Engine Execution Time: 1ms
Benchmark failed (expected without real MySQL): Không thể phân tích database schema: Unable to connect to any of the specified MySQL hosts.
❌ Performance test FAILED due to connection - failure time is acceptable</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="22dc2c15-f3ef-4ee7-a7e3-b42f224716ca" testId="f78d7304-2501-8055-abba-3ae1d4828eb2" testName="TestApiUsageStatistics" computerName="cursor" duration="00:00:00.0009791" startTime="2025-07-06T10:57:03.6130340+00:00" endTime="2025-07-06T10:57:03.6142467+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="22dc2c15-f3ef-4ee7-a7e3-b42f224716ca">
      <Output>
        <ErrorInfo>
          <Message>Assert.AreEqual failed. Expected:&lt;0&gt;. Actual:&lt;1&gt;. </Message>
          <StackTrace>   at SqlTestDataGenerator.Tests.DailyApiLimitTests.TestApiUsageStatistics() in /workspace/SqlTestDataGenerator.Tests/DailyApiLimitTests.cs:line 46
   at System.RuntimeMethodHandle.InvokeMethod(Object target, Void** arguments, Signature sig, Boolean isConstructor)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="6e9fa53d-6685-40a6-960d-00e37580f819" testId="19d4536f-6566-dad7-6064-df8ecbe782f7" testName="ParseQuery_YearFunction_ShouldExtractDateCondition" computerName="cursor" duration="00:00:00.0004903" startTime="2025-07-06T11:03:06.5217373+00:00" endTime="2025-07-06T11:03:06.5222611+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="6e9fa53d-6685-40a6-960d-00e37580f819">
      <Output>
        <StdOut>[SqlMetadataService] Extracting tables from query: 52 chars
[SqlMetadataService] Clean SQL: SELECT * FROM users WHERE YEAR(date_of_birth) = 1989...
[SqlMetadataService] Pattern '\bFROM\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)(?:\s+(?:AS\s+)?(\w+))?' found 1 matches
[SqlMetadataService] Match: 'FROM users WHERE'
[SqlMetadataService] Found table: users
[SqlMetadataService] Pattern '\b(?:INNER\s+|LEFT\s+|RIGHT\s+|FULL\s+|OUTER\s+)?JOIN\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)(?:\s+(?:AS\s+)?(\w+))?' found 0 matches
[SqlMetadataService] Pattern '\bINTO\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)' found 0 matches
[SqlMetadataService] Pattern '\bUPDATE\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)' found 0 matches
[SqlMetadataService] Pattern '\bINSERT\s+INTO\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)' found 0 matches
[SqlMetadataService] Total tables extracted: 1 - users
JOIN Debug: Clean query = 'SELECT * FROM users WHERE YEAR(date_of_birth) = 1989'
JOIN Debug: Pattern = '(?:INNER\s+|LEFT\s+|RIGHT\s+|FULL\s+|OUTER\s+)?JOIN\s+(\w+)\s+(\w+)\s+ON\s+([^()]+?)(?=\s+(?:INNER|LEFT|RIGHT|FULL|OUTER|WHERE|ORDER|GROUP|LIMIT|$)|$)'
JOIN Debug: Found 0 JOIN matches</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="28ee0563-d9ea-4950-852b-266aa602d328" testId="9a6daf30-33f8-a7b2-ec97-a643f5b8ceae" testName="GenerateBogusData_ComplexSchema_ShouldCreateValidInserts" computerName="cursor" duration="00:00:00.0051183" startTime="2025-07-06T10:57:02.0945394+00:00" endTime="2025-07-06T10:57:02.0997628+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="28ee0563-d9ea-4950-852b-266aa602d328">
      <Output>
        <StdOut>[DEBUG] Table companies has 6 columns:
[DEBUG] Column: id, IsIdentity: True, IsGenerated: False, DefaultValue: ''
[DEBUG] Column: name, IsIdentity: False, IsGenerated: False, DefaultValue: ''
[DEBUG] Column: code, IsIdentity: False, IsGenerated: False, DefaultValue: ''
[DEBUG] Column: address, IsIdentity: False, IsGenerated: False, DefaultValue: ''
[DEBUG] Column: status, IsIdentity: False, IsGenerated: False, DefaultValue: ''
[DEBUG] Column: created_at, IsIdentity: False, IsGenerated: False, DefaultValue: ''
[DEBUG-T021] Filtered columns for companies: 5 columns (from 6 total)
[DEBUG-T021] Excluded columns: id(Identity:True,Generated:False)
[DEBUG-T021] Included columns: name, code, address, status, created_at
[DEBUG-T021] Generated SQL for companies: INSERT INTO `companies` (`name`, `code`, `address`, `status`, `created_at`) VALUES ('Raphaelle Blick', 'CODE_84901_001', '8500 Karlee Inlet', 'Inactive', '2024-08-10 20:18:13');
[DEBUG-T021] Generated SQL for companies: INSERT INTO `companies` (`name`, `code`, `address`, `status`, `created_at`) VALUES ('Daniela Wolff', 'CODE_86894_002', '25379 Kadin Village', 'Completed', '2025-01-06 00:20:57');
[DEBUG] Table roles has 6 columns:
[DEBUG] Column: id, IsIdentity: True, IsGenerated: False, DefaultValue: ''
[DEBUG] Column: name, IsIdentity: False, IsGenerated: False, DefaultValue: ''
[DEBUG] Column: code, IsIdentity: False, IsGenerated: False, DefaultValue: ''
[DEBUG] Column: level, IsIdentity: False, IsGenerated: False, DefaultValue: ''
[DEBUG] Column: description, IsIdentity: False, IsGenerated: False, DefaultValue: ''
[DEBUG] Column: created_at, IsIdentity: False, IsGenerated: False, DefaultValue: ''
[DEBUG-T021] Filtered columns for roles: 5 columns (from 6 total)
[DEBUG-T021] Excluded columns: id(Identity:True,Generated:False)
[DEBUG-T021] Included columns: name, code, level, description, created_at
[DEBUG-T021] Generated SQL for roles: INSERT INTO `roles` (`name`, `code`, `level`, `description`, `created_at`) VALUES ('Gideon Frami', 'CODE_88268_001', 10, 'Quia voluptates quis.', '2024-09-01 09:42:25');
[DEBUG-T021] Generated SQL for roles: INSERT INTO `roles` (`name`, `code`, `level`, `description`, `created_at`) VALUES ('Major Feeney', 'CODE_89007_002', 10, 'Aut earum sint.', '2024-08-17 08:07:12');
[DEBUG] Table users has 12 columns:
[DEBUG] Column: id, IsIdentity: True, IsGenerated: False, DefaultValue: ''
[DEBUG] Column: username, IsIdentity: False, IsGenerated: False, DefaultValue: ''
[DEBUG] Column: first_name, IsIdentity: False, IsGenerated: False, DefaultValue: ''
[DEBUG] Column: last_name, IsIdentity: False, IsGenerated: False, DefaultValue: ''
[DEBUG] Column: email, IsIdentity: False, IsGenerated: False, DefaultValue: ''
[DEBUG] Column: date_of_birth, IsIdentity: False, IsGenerated: False, DefaultValue: ''
[DEBUG] Column: salary, IsIdentity: False, IsGenerated: False, DefaultValue: ''
[DEBUG] Column: department, IsIdentity: False, IsGenerated: False, DefaultValue: ''
[DEBUG] Column: hire_date, IsIdentity: False, IsGenerated: False, DefaultValue: ''
[DEBUG] Column: company_id, IsIdentity: False, IsGenerated: False, DefaultValue: ''
[DEBUG] Column: is_active, IsIdentity: False, IsGenerated: False, DefaultValue: ''
[DEBUG] Column: created_at, IsIdentity: False, IsGenerated: False, DefaultValue: ''
[DEBUG-T021] Filtered columns for users: 11 columns (from 12 total)
[DEBUG-T021] Excluded columns: id(Identity:True,Generated:False)
[DEBUG-T021] Included columns: username, first_name, last_name, email, date_of_birth, salary, department, hire_date, company_id, is_active, created_at
[DEBUG] Boolean column detected: is_active (bit) -&gt; generating boolean
[DEBUG-T021] Generated SQL for users: INSERT INTO `users` (`username`, `first_name`, `last_name`, `email`, `date_of_birth`, `salary`, `department`, `hire_date`, `company_id`, `is_active`, `created_at`) VALUES ('Idella_Wiegand25', 'Unique', 'Crooks', 'Madisyn_Medhurst@hotmail.com', '1962-04-18', 198891.22, 'Jewelery, Garden &amp; Tools', '2022-12-07 19:03:57', 2, 1, '2025-04-12 02:24:57');
[DEBUG] Boolean column detected: is_active (bit) -&gt; generating boolean
[DEBUG-T021] Generated SQL for users: INSERT INTO `users` (`username`, `first_name`, `last_name`, `email`, `date_of_birth`, `salary`, `department`, `hire_date`, `company_id`, `is_active`, `created_at`) VALUES ('Valerie12', 'Leif', 'Gutkowski', 'Waino95@yahoo.com', '2002-10-26', 161935.29, 'Jewelery', '2025-05-30 01:02:39', 1, 1, '2024-12-03 17:23:27');
[DEBUG] Table user_roles has 6 columns:
[DEBUG] Column: user_id, IsIdentity: False, IsGenerated: False, DefaultValue: ''
[DEBUG] Column: role_id, IsIdentity: False, IsGenerated: False, DefaultValue: ''
[DEBUG] Column: assigned_by, IsIdentity: False, IsGenerated: False, DefaultValue: ''
[DEBUG] Column: assigned_at, IsIdentity: False, IsGenerated: False, DefaultValue: ''
[DEBUG] Column: expires_at, IsIdentity: False, IsGenerated: False, DefaultValue: ''
[DEBUG] Column: is_active, IsIdentity: False, IsGenerated: False, DefaultValue: ''
[DEBUG-T021] Filtered columns for user_roles: 6 columns (from 6 total)
[DEBUG-T021] Excluded columns: 
[DEBUG-T021] Included columns: user_id, role_id, assigned_by, assigned_at, expires_at, is_active
[DATE-FALLBACK] user_roles.expires_at: Generated 2025-08-03 07:33:26 (within 60 days default)
[DEBUG] Boolean column detected: is_active (bit) -&gt; generating boolean
[DEBUG] Generated SQL for user_roles: INSERT INTO `user_roles` (`user_id`, `role_id`, `assigned_by`, `assigned_at`, `expires_at`, `is_active`) VALUES (2, 2, 1, '2025-04-20 05:33:20', '2025-08-03 07:33:26', 0);
[DATE-FALLBACK] user_roles.expires_at: Generated 2025-07-09 22:52:47 (within 60 days default)
[DEBUG] Boolean column detected: is_active (bit) -&gt; generating boolean
[DEBUG] Generated SQL for user_roles: INSERT INTO `user_roles` (`user_id`, `role_id`, `assigned_by`, `assigned_at`, `expires_at`, `is_active`) VALUES (1, 1, 2, '2024-07-26 21:45:18', '2025-07-09 22:52:47', 1);
Generated statements for tables: companies, roles, users, user_roles

=== COMPANIES (2 statements) ===
Sample: INSERT INTO `companies` (`name`, `code`, `address`, `status`, `created_at`) VALUES ('Raphaelle Blick', 'CODE_84901_001', '8500 Karlee Inlet', 'Inactive', '2024-08-10 20:18:13');

=== ROLES (2 statements) ===
Sample: INSERT INTO `roles` (`name`, `code`, `level`, `description`, `created_at`) VALUES ('Gideon Frami', 'CODE_88268_001', 10, 'Quia voluptates quis.', '2024-09-01 09:42:25');

=== USERS (2 statements) ===
Sample: INSERT INTO `users` (`username`, `first_name`, `last_name`, `email`, `date_of_birth`, `salary`, `department`, `hire_date`, `company_id`, `is_active`, `created_at`) VALUES ('Idella_Wiegand25', 'Unique', 'Crooks', 'Madisyn_Medhurst@hotmail.com', '1962-04-18', 198891.22, 'Jewelery, Garden &amp; Tools', '2022-12-07 19:03:57', 2, 1, '2025-04-12 02:24:57');

=== USER_ROLES (2 statements) ===
Sample: INSERT INTO `user_roles` (`user_id`, `role_id`, `assigned_by`, `assigned_at`, `expires_at`, `is_active`) VALUES (2, 2, 1, '2025-04-20 05:33:20', '2025-08-03 07:33:26', 0);</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="8a9ee7b3-15ab-474d-8d23-8b7e366801ba" testId="fe2ba93f-5cee-b7ee-2351-438a93efe0da" testName="ExecuteQueryWithTestDataAsync_ComplexSQL_ShouldAnalyzeTablesCorrectly" computerName="cursor" duration="00:00:00.0077028" startTime="2025-07-06T10:57:02.1743898+00:00" endTime="2025-07-06T10:57:02.1822235+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="8a9ee7b3-15ab-474d-8d23-8b7e366801ba">
      <Output>
        <StdOut>[CentralizedLoggingManager] Initialized. Logs directory: /workspace/logs
[CentralizedLoggingManager] Config source: default
[EngineService] Centralized logs directory: /workspace/logs
[EngineService] Starting execution for MySQL
[EngineService] Analyzing query: 864 chars
[SqlMetadataService] Extracting tables from query: 864 chars
[SqlMetadataService] Clean SQL: 
            SELECT u.id, u.first_name, u.last_name, u.email,
                   c.name as company_name, c.code as company_code,
                   r.name as role_name, r.code as role_code,
          ...
[SqlMetadataService] Pattern '\bFROM\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)(?:\s+(?:AS\s+)?(\w+))?' found 1 matches
[SqlMetadataService] Match: 'FROM users u'
[SqlMetadataService] Found table: users
[SqlMetadataService] Pattern '\b(?:INNER\s+|LEFT\s+|RIGHT\s+|FULL\s+|OUTER\s+)?JOIN\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)(?:\s+(?:AS\s+)?(\w+))?' found 3 matches
[SqlMetadataService] Match: 'INNER JOIN companies c'
[SqlMetadataService] Found table: companies
[SqlMetadataService] Match: 'INNER JOIN user_roles ur'
[SqlMetadataService] Found table: user_roles
[SqlMetadataService] Match: 'INNER JOIN roles r'
[SqlMetadataService] Found table: roles
[SqlMetadataService] Pattern '\bINTO\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)' found 0 matches
[SqlMetadataService] Pattern '\bUPDATE\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)' found 0 matches
[SqlMetadataService] Pattern '\bINSERT\s+INTO\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)' found 0 matches
[SqlMetadataService] Total tables extracted: 4 - users, companies, user_roles, roles
[EngineService] Metadata extraction failed: Unable to connect to any of the specified MySQL hosts.
[EngineService] Execution failed: Không thể phân tích database schema: Unable to connect to any of the specified MySQL hosts.
[EngineService] Exception type: InvalidOperationException
[EngineService] Inner exception: Unable to connect to any of the specified MySQL hosts.
Expected failure due to connection: Không thể phân tích database schema: Unable to connect to any of the specified MySQL hosts.
✅ Complex SQL table analysis validation completed</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="a7e67a03-107c-451a-b3af-10d226996bc9" testId="b5bfaf3f-f554-a3c7-5b59-e536fcbe0296" testName="TestConstraintExtractorInitialization" computerName="cursor" duration="00:00:00.0007047" startTime="2025-07-06T10:57:01.8343363+00:00" endTime="2025-07-06T10:57:01.8352732+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="a7e67a03-107c-451a-b3af-10d226996bc9">
      <Output>
        <StdOut>Testing ConstraintExtractorService initialization
✅ ConstraintExtractorService initialized successfully</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="7500fbfb-9140-41a1-97fc-85f37ea8b50c" testId="ad7885a9-7dd6-4c0c-215c-14429f005ad5" testName="Debug_ConfigReading" computerName="cursor" duration="00:00:00.0017753" startTime="2025-07-06T10:57:03.5958361+00:00" endTime="2025-07-06T10:57:03.5977390+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="7500fbfb-9140-41a1-97fc-85f37ea8b50c">
      <Output>
        <StdOut>[DEBUG] GetApiKey() method called
[DEBUG] ConfigurationManager result: '' (length: 0)
[DEBUG] Environment variable result: '' (length: 0)
[DEBUG] Using HARDCODED API key for testing
[DEBUG] Gemini API Key configured: True
[DEBUG] API Key length: 39
[DEBUG] API Key preview: AIzaSyCsOz...
[DEBUG] ConfigurationManager.AppSettings: '' (Length: 0)
[DEBUG] Environment Variable: '' (Length: 0)
[DEBUG] Config file exists at '/workspace/SqlTestDataGenerator.Tests/bin/Debug/net8.0/app.config': True
[DEBUG] Config content preview: &lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;configuration&gt;
  &lt;appSettings&gt;
    &lt;!-- Gemini AI API Configuration --&gt;
    &lt;!-- Get your API key from: https://makersuite.google.com/app/apikey --&gt;
    &lt;add ke...
[DEBUG] Alt config file exists at '/workspace/SqlTestDataGenerator.Tests/bin/Debug/net8.0/SqlTestDataGenerator.Tests.dll.config': True
[DEBUG] Alt config content preview: &lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;configuration&gt;
  &lt;appSettings&gt;
    &lt;!-- Gemini AI API Configuration --&gt;
    &lt;!-- Get your API key from: https://makersuite.google.com/app/apikey --&gt;
    &lt;add ke...</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="8071cf55-dc20-40be-9369-3a6546baf0f5" testId="d59fb9e6-9639-6c3f-f09c-7e47437eb8dd" testName="ExtractAllConstraints_WithEmptyQuery_ShouldReturnEmptyConstraints" computerName="cursor" duration="00:00:00.0008024" startTime="2025-07-06T10:57:02.2931688+00:00" endTime="2025-07-06T10:57:02.2940671+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="8071cf55-dc20-40be-9369-3a6546baf0f5">
      <Output>
        <StdOut>[10:57:02 INF] Extracting comprehensive constraints from SQL query
[10:57:02 INF] Starting EXISTS constraints extraction with two-phase approach
[10:57:02 INF] Completed EXISTS constraints extraction: 0 NOT EXISTS, 0 EXISTS
[10:57:02 INF] Extracted 0 total constraints: 0 WHERE, 0 JOIN, 0 LIKE, 0 IN, 0 BETWEEN, 0 NULL, 0 EXISTS</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="f9d57624-de19-438d-8a2c-ed0786013063" testId="aad2f952-d9f7-c03e-94f4-c9ad3d450082" testName="ExecuteQueryWithTestDataAsync_PerformanceWithStrictCount_MustMatch" computerName="cursor" duration="00:00:00.0050917" startTime="2025-07-06T11:03:06.4477635+00:00" endTime="2025-07-06T11:03:06.4529224+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="f9d57624-de19-438d-8a2c-ed0786013063">
      <Output>
        <StdOut>[CentralizedLoggingManager] Initialized. Logs directory: /workspace/logs
[CentralizedLoggingManager] Config source: default
[EngineService] Centralized logs directory: /workspace/logs
=== STRICT PERFORMANCE TEST: Expected Records = 50 ===
[EngineService] Starting execution for MySQL
[EngineService] Analyzing query: 420 chars
[SqlMetadataService] Extracting tables from query: 420 chars
[SqlMetadataService] Clean SQL: 
            SELECT u.id, u.username, u.first_name, u.last_name, u.email,
                   c.name as company_name, c.code as company_code,
                   r.name as role_name, r.level
           ...
[SqlMetadataService] Pattern '\bFROM\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)(?:\s+(?:AS\s+)?(\w+))?' found 1 matches
[SqlMetadataService] Match: 'FROM users u'
[SqlMetadataService] Found table: users
[SqlMetadataService] Pattern '\b(?:INNER\s+|LEFT\s+|RIGHT\s+|FULL\s+|OUTER\s+)?JOIN\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)(?:\s+(?:AS\s+)?(\w+))?' found 3 matches
[SqlMetadataService] Match: 'INNER JOIN companies c'
[SqlMetadataService] Found table: companies
[SqlMetadataService] Match: 'INNER JOIN user_roles ur'
[SqlMetadataService] Found table: user_roles
[SqlMetadataService] Match: 'INNER JOIN roles r'
[SqlMetadataService] Found table: roles
[SqlMetadataService] Pattern '\bINTO\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)' found 0 matches
[SqlMetadataService] Pattern '\bUPDATE\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)' found 0 matches
[SqlMetadataService] Pattern '\bINSERT\s+INTO\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)' found 0 matches
[SqlMetadataService] Total tables extracted: 4 - users, companies, user_roles, roles
[EngineService] Metadata extraction failed: Unable to connect to any of the specified MySQL hosts.
[EngineService] Execution failed: Không thể phân tích database schema: Unable to connect to any of the specified MySQL hosts.
[EngineService] Exception type: InvalidOperationException
[EngineService] Inner exception: Unable to connect to any of the specified MySQL hosts.
Success: False
Generated Records: 0
Expected Records: 50
Execution Time: 0.00 seconds
Rate: 0.0 records/sec</StdOut>
        <ErrorInfo>
          <Message>Assert.Fail failed. Performance test FAILED: Không thể phân tích database schema: Unable to connect to any of the specified MySQL hosts.</Message>
          <StackTrace>   at SqlTestDataGenerator.Tests.RecordCountStrictVerificationTests.ExecuteQueryWithTestDataAsync_PerformanceWithStrictCount_MustMatch() in /workspace/SqlTestDataGenerator.Tests/RecordCountStrictVerificationTests.cs:line 204
</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="30d4a325-3655-413c-a686-255908b82f89" testId="40ff5d80-f68a-7ba8-c0f1-893d478cb72e" testName="Test_RegenerationPerformance_AcceptableTimeFrame" computerName="cursor" duration="00:00:00.0009866" startTime="2025-07-06T10:57:03.5864794+00:00" endTime="2025-07-06T10:57:03.5875877+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="30d4a325-3655-413c-a686-255908b82f89">
      <Output>
        <StdOut>[DEBUG] GetApiKey() method called
[DEBUG] ConfigurationManager result: '' (length: 0)
[DEBUG] Environment variable result: '' (length: 0)
[DEBUG] Using HARDCODED API key for testing
[DEBUG] Gemini API Key configured: True
[DEBUG] API Key length: 39
[DEBUG] API Key preview: AIzaSyCsOz...
Generation Time: 0.00 seconds
Generated Records: 3
Time per Record: 0.00 seconds
Generated Email: Test_@vnext.com
Generated Email: Test_@vnext.com
Generated Email: Test_@vnext.com</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="b92c90f9-96e0-4461-8411-1dae10c6ef81" testId="703fd9c0-da25-fce0-1fc5-49f590616917" testName="AddRecentConnection_WithEmptyString_ShouldNotAdd" computerName="cursor" duration="00:00:00.0003544" startTime="2025-07-06T10:57:02.3625938+00:00" endTime="2025-07-06T10:57:02.3630267+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="b92c90f9-96e0-4461-8411-1dae10c6ef81" />
    <UnitTestResult executionId="e86b05aa-a508-45c0-9d9f-5b2f0621482b" testId="2d8e95fd-0ee0-3a36-d2f6-a6936de5aea0" testName="ExtractTablesFromQuery_EmptySQL_ShouldReturnEmptyList" computerName="cursor" duration="00:00:00.0000936" startTime="2025-07-06T10:57:02.1988462+00:00" endTime="2025-07-06T10:57:02.1990218+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="e86b05aa-a508-45c0-9d9f-5b2f0621482b">
      <Output>
        <StdOut>[SqlMetadataService] Extracting tables from query: 0 chars
[SqlMetadataService] SQL query is null or empty</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="317f4df7-f8ce-499d-8fa4-c1d2ae6d4b33" testId="b2d44d35-af78-e80c-973a-cc11463c0ff3" testName="ExtractLikePatterns_WithVariousPatterns_ShouldExtractCorrectly" computerName="cursor" duration="00:00:00.0016336" startTime="2025-07-06T10:57:02.2421412+00:00" endTime="2025-07-06T10:57:02.2438652+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="317f4df7-f8ce-499d-8fa4-c1d2ae6d4b33">
      <Output>
        <StdOut>[10:57:02 INF] Extracting comprehensive constraints from SQL query
[10:57:02 INF] Found WHERE clause: u.email LIKE '%@company.com' AND u.name LIKE 'John%' AND u.username LIKE '%admin%'
[10:57:02 INF] Found LIKE pattern with alias: u.email LIKE '%@company.com' (requires: '@company.com')
[10:57:02 INF] Found LIKE pattern with alias: u.name LIKE 'John%' (requires: 'John')
[10:57:02 INF] Found LIKE pattern with alias: u.username LIKE '%admin%' (requires: 'admin')
[10:57:02 INF] Starting EXISTS constraints extraction with two-phase approach
[10:57:02 INF] Completed EXISTS constraints extraction: 0 NOT EXISTS, 0 EXISTS
[10:57:02 INF] Extracted 3 total constraints: 0 WHERE, 0 JOIN, 3 LIKE, 0 IN, 0 BETWEEN, 0 NULL, 0 EXISTS</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="7f00df27-c627-4e9c-980c-f8b400bb0c7f" testId="4a6ad4dd-b680-702f-6923-b349b5729e8a" testName="LogWithNullParameters_ShouldNotThrow" computerName="cursor" duration="00:00:00.0004173" startTime="2025-07-06T11:01:03.9281634+00:00" endTime="2025-07-06T11:01:03.9286568+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="7f00df27-c627-4e9c-980c-f8b400bb0c7f">
      <Output>
        <StdOut>[CentralizedLoggingManager] Initialized. Logs directory: /workspace/logs
[CentralizedLoggingManager] Config source: default
[LoggerServiceTests] Using centralized log path: /workspace/logs/test-20250706.log</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="4fb77598-d154-4386-ad16-bcbf5ec8604a" testId="18cfefd9-6f9c-255b-7060-9d4d9eaa8f24" testName="LoadAppSettings_WithValidFile_ShouldReturnSettings" computerName="cursor" duration="00:00:00.0355742" startTime="2025-07-06T10:57:02.3022489+00:00" endTime="2025-07-06T10:57:02.3380457+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="4fb77598-d154-4386-ad16-bcbf5ec8604a" />
    <UnitTestResult executionId="0750b540-e011-4979-9fbd-4d10dfc95ddb" testId="74ad718a-680d-06c3-7660-2d0d9a9fc9f2" testName="ExtractTablesFromQuery_CaseInsensitive_ShouldWork" computerName="cursor" duration="00:00:00.0006830" startTime="2025-07-06T10:57:02.2018886+00:00" endTime="2025-07-06T10:57:02.2026672+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="0750b540-e011-4979-9fbd-4d10dfc95ddb">
      <Output>
        <StdOut>[SqlMetadataService] Extracting tables from query: 152 chars
[SqlMetadataService] Clean SQL: 
            select u.id from USERS u
            inner join Companies c on u.company_id = c.id
            LEFT JOIN user_ROLES ur on u.id = ur.user_id...
[SqlMetadataService] Pattern '\bFROM\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)(?:\s+(?:AS\s+)?(\w+))?' found 1 matches
[SqlMetadataService] Match: 'from USERS u'
[SqlMetadataService] Found table: USERS
[SqlMetadataService] Pattern '\b(?:INNER\s+|LEFT\s+|RIGHT\s+|FULL\s+|OUTER\s+)?JOIN\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)(?:\s+(?:AS\s+)?(\w+))?' found 2 matches
[SqlMetadataService] Match: 'inner join Companies c'
[SqlMetadataService] Found table: Companies
[SqlMetadataService] Match: 'LEFT JOIN user_ROLES ur'
[SqlMetadataService] Found table: user_ROLES
[SqlMetadataService] Pattern '\bINTO\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)' found 0 matches
[SqlMetadataService] Pattern '\bUPDATE\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)' found 0 matches
[SqlMetadataService] Pattern '\bINSERT\s+INTO\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)' found 0 matches
[SqlMetadataService] Total tables extracted: 3 - USERS, Companies, user_ROLES</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="74f2f84d-9231-4b37-b3d3-2d723d1e9820" testId="8ff78ea0-9547-b89c-150e-ad1ff9a9e72a" testName="ParseQuery_SimpleSelect_ExtractsBasicInfo" computerName="cursor" duration="00:00:00.0769272" startTime="2025-07-06T11:03:06.5233518+00:00" endTime="2025-07-06T11:03:06.6004638+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="74f2f84d-9231-4b37-b3d3-2d723d1e9820">
      <Output>
        <StdOut>[11:03:06 INF] SqlQueryParserV2: Parsing SQL query with ScriptDom engine
[11:03:06 DBG] Visiting SelectStatement
[11:03:06 DBG] Found table: users with alias: users
[11:03:06 DBG] Extracting WHERE conditions from clause
[11:03:06 DBG] Found comparison condition: .age &gt; 25
[11:03:06 INF] ScriptDom extracted 1 WHERE conditions and 0 JOIN requirements</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="22842b51-5228-4070-8fff-3f429533da15" testId="bbeef4d7-958f-2851-0543-d9f6c6ae356f" testName="ParseQuery_ComplexVowisQuery_ExtractsAllConstraints" computerName="cursor" duration="00:00:00.0064305" startTime="2025-07-06T11:03:06.6144927+00:00" endTime="2025-07-06T11:03:06.6209713+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="22842b51-5228-4070-8fff-3f429533da15">
      <Output>
        <StdOut>[11:03:06 INF] SqlQueryParserV2: Parsing SQL query with ScriptDom engine
[11:03:06 WRN] ScriptDom parse errors found: 1
[11:03:06 WRN] Parse error at line 6, column 92: Incorrect syntax near 'INTERVAL'.
[11:03:06 INF] Falling back to regex parser due to MySQL syntax incompatibility
[11:03:06 INF] Parsing SQL query to extract data requirements
[SqlMetadataService] Extracting tables from query: 1030 chars
[SqlMetadataService] Clean SQL: SELECT u.id, u.username, u.first_name, u.last_name, u.email, u.date_of_birth, u.salary, u.department, u.hire_date, c.NAME AS company_name, c.code AS company_code, r.NAME AS role_name, r.code AS role_c...
[SqlMetadataService] Pattern '\bFROM\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)(?:\s+(?:AS\s+)?(\w+))?' found 1 matches
[SqlMetadataService] Match: 'FROM users u'
[SqlMetadataService] Found table: users
[SqlMetadataService] Pattern '\b(?:INNER\s+|LEFT\s+|RIGHT\s+|FULL\s+|OUTER\s+)?JOIN\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)(?:\s+(?:AS\s+)?(\w+))?' found 3 matches
[SqlMetadataService] Match: 'INNER JOIN user_roles ur'
[SqlMetadataService] Found table: user_roles
[SqlMetadataService] Match: 'INNER JOIN roles r'
[SqlMetadataService] Found table: roles
[SqlMetadataService] Match: 'INNER JOIN companies c'
[SqlMetadataService] Found table: companies
[SqlMetadataService] Pattern '\bINTO\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)' found 0 matches
[SqlMetadataService] Pattern '\bUPDATE\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)' found 0 matches
[SqlMetadataService] Pattern '\bINSERT\s+INTO\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)' found 0 matches
[SqlMetadataService] Total tables extracted: 4 - users, user_roles, roles, companies
[11:03:06 INF] Found WHERE clause: (u.first_name LIKE '%Phương%' OR u.last_name LIKE '%Phương%') AND YEAR(u.date_of_birth) = 1989 AND u.department IN ('HR', 'IT', 'Finance') AND u.salary &gt;= 5000000 AND ur.expires_at IS NOT NULL AND ur.expires_at &lt;= DATE_ADD(NOW(), INTERVAL 30 DAY) AND u.is_active = 1
[11:03:06 INF] Found LIKE condition: first_name LIKE 'Phương'
[11:03:06 INF] Found LIKE condition: last_name LIKE 'Phương'
[11:03:06 INF] Found equality condition: is_active = '1'
[11:03:06 INF] Found year condition: YEAR(date_of_birth) = 1989
[11:03:06 INF] Found MySQL date condition: expires_at &lt;= DATE_ADD(NOW(), INTERVAL 30 DAY)
[11:03:06 INF] Found null check: expires_at IS NOT NULL
[11:03:06 INF] Found IN condition: department IN (HR, IT, Finance)
[11:03:06 INF] Found comparison condition: salary &gt;= '5000000'
JOIN Debug: Clean query = 'SELECT u.id, u.username, u.first_name, u.last_name, u.email, u.date_of_birth, u.salary, u.department, u.hire_date, c.NAME AS company_name, c.code AS company_code, r.NAME AS role_name, r.code AS role_code, ur.expires_at AS role_expires, CASE WHEN u.is_active = 0 THEN 'Đã nghỉ việc' WHEN ur.expires_at IS NOT NULL AND ur.expires_at &lt;= DATE_ADD(NOW(), INTERVAL 30 DAY) THEN 'Sắp hết hạn quyền' WHEN u.hire_date &gt;= DATE_SUB(NOW(), INTERVAL 90 DAY) THEN 'Nhân viên mới' ELSE 'Đang làm việc' END AS employment_status, YEAR(u.date_of_birth) AS birth_year FROM users u INNER JOIN user_roles ur ON u.id = ur.user_id AND ur.is_active = TRUE INNER JOIN roles r ON ur.role_id = r.id INNER JOIN companies c ON u.company_id = c.id WHERE (u.first_name LIKE '%Phương%' OR u.last_name LIKE '%Phương%') AND YEAR(u.date_of_birth) = 1989 AND u.department IN ('HR', 'IT', 'Finance') AND u.salary &gt;= 5000000 AND ur.expires_at IS NOT NULL AND ur.expires_at &lt;= DATE_ADD(NOW(), INTERVAL 30 DAY) AND u.is_active = 1 ORDER BY u.salary DESC, u.hire_date ASC'
JOIN Debug: Pattern = '(?:INNER\s+|LEFT\s+|RIGHT\s+|FULL\s+|OUTER\s+)?JOIN\s+(\w+)\s+(\w+)\s+ON\s+([^()]+?)(?=\s+(?:INNER|LEFT|RIGHT|FULL|OUTER|WHERE|ORDER|GROUP|LIMIT|$)|$)'
[11:03:06 INF] JOIN Debug: Clean query = 'SELECT u.id, u.username, u.first_name, u.last_name, u.email, u.date_of_birth, u.salary, u.department, u.hire_date, c.NAME AS company_name, c.code AS company_code, r.NAME AS role_name, r.code AS role_code, ur.expires_at AS role_expires, CASE WHEN u.is_active = 0 THEN 'Đã nghỉ việc' WHEN ur.expires_at IS NOT NULL AND ur.expires_at &lt;= DATE_ADD(NOW(), INTERVAL 30 DAY) THEN 'Sắp hết hạn quyền' WHEN u.hire_date &gt;= DATE_SUB(NOW(), INTERVAL 90 DAY) THEN 'Nhân viên mới' ELSE 'Đang làm việc' END AS employment_status, YEAR(u.date_of_birth) AS birth_year FROM users u INNER JOIN user_roles ur ON u.id = ur.user_id AND ur.is_active = TRUE INNER JOIN roles r ON ur.role_id = r.id INNER JOIN companies c ON u.company_id = c.id WHERE (u.first_name LIKE '%Phương%' OR u.last_name LIKE '%Phương%') AND YEAR(u.date_of_birth) = 1989 AND u.department IN ('HR', 'IT', 'Finance') AND u.salary &gt;= 5000000 AND ur.expires_at IS NOT NULL AND ur.expires_at &lt;= DATE_ADD(NOW(), INTERVAL 30 DAY) AND u.is_active = 1 ORDER BY u.salary DESC, u.hire_date ASC'
[11:03:06 INF] JOIN Debug: Pattern = '(?:INNER\s+|LEFT\s+|RIGHT\s+|FULL\s+|OUTER\s+)?JOIN\s+(\w+)\s+(\w+)\s+ON\s+([^()]+?)(?=\s+(?:INNER|LEFT|RIGHT|FULL|OUTER|WHERE|ORDER|GROUP|LIMIT|$)|$)'
JOIN Debug: Found 3 JOIN matches
[11:03:06 INF] JOIN Debug: Found 3 JOIN matches
JOIN Debug: Match found - Table: 'user_roles', Alias: 'ur', OnClause: 'u.id = ur.user_id AND ur.is_active = TRUE'
[11:03:06 INF] JOIN Debug: Match found - Table: 'user_roles', Alias: 'ur', OnClause: 'u.id = ur.user_id AND ur.is_active = TRUE'
JOIN Debug: Condition pattern match success: True
[11:03:06 INF] JOIN Debug: Condition pattern match success: True
Found JOIN: u.id = ur.user_id
[11:03:06 INF] Found JOIN: u.id = ur.user_id
[11:03:06 INF] Found equality condition: is_active = 'TRUE'
JOIN Debug: Match found - Table: 'roles', Alias: 'r', OnClause: 'ur.role_id = r.id'
[11:03:06 INF] JOIN Debug: Match found - Table: 'roles', Alias: 'r', OnClause: 'ur.role_id = r.id'
JOIN Debug: Condition pattern match success: True
[11:03:06 INF] JOIN Debug: Condition pattern match success: True
Found JOIN: ur.role_id = r.id
[11:03:06 INF] Found JOIN: ur.role_id = r.id
JOIN Debug: Match found - Table: 'companies', Alias: 'c', OnClause: 'u.company_id = c.id'
[11:03:06 INF] JOIN Debug: Match found - Table: 'companies', Alias: 'c', OnClause: 'u.company_id = c.id'
JOIN Debug: Condition pattern match success: True
[11:03:06 INF] JOIN Debug: Condition pattern match success: True
Found JOIN: u.company_id = c.id
[11:03:06 INF] Found JOIN: u.company_id = c.id
[11:03:06 INF] Extracted 9 WHERE conditions and 3 JOIN requirements</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="525ebd8d-6a71-4553-96f2-17f0b67e4d74" testId="aac4c716-72b2-9a1e-0fe2-6659f7df6753" testName="ValidateMySQLSyntax_SubstrFunction_ShouldReturnFalse" computerName="cursor" duration="00:00:00.0000740" startTime="2025-07-06T11:01:03.9538656+00:00" endTime="2025-07-06T11:01:03.9540034+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="525ebd8d-6a71-4553-96f2-17f0b67e4d74">
      <Output>
        <StdOut>✅ substr function detected and rejected</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="95bfadc3-c88f-425f-96bb-c46690383c7b" testId="0b8c0b93-a94c-5756-79af-a4f6167eeb3d" testName="TestExtractConstraints_TC001_ComplexVowisSQL_ShouldExtractVNEXTAndIsActive" computerName="cursor" duration="00:00:00.0154818" startTime="2025-07-06T10:57:02.2065490+00:00" endTime="2025-07-06T10:57:02.2222485+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="95bfadc3-c88f-425f-96bb-c46690383c7b">
      <Output>
        <StdOut>=== CONSTRAINT EXTRACTION TEST RESULTS ===
Total Constraints: 17
LIKE Patterns: 4
Boolean Constraints: 3
Date Constraints: 3
JOIN Constraints: 4
WHERE Constraints: 2
✅ VNEXT Pattern: c.NAME LIKE '%VNEXT%' -&gt; 'VNEXT'
✅ JOIN Boolean: ur.is_active = TRUE
✅ Phương Pattern: u.first_name LIKE '%Phương%' -&gt; 'Phương'
✅ DD Pattern: r.code LIKE '%DD%' -&gt; 'DD'
✅ Year Constraint: YEAR(u.date_of_birth) = 1989
\ud83c\udf89 ALL CONSTRAINT EXTRACTION TESTS PASSED!</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="e1d8a6b1-7eea-45d6-a540-f843f0b48c0c" testId="0a1468aa-72ea-7a6a-8d19-43a4651e3cc0" testName="ExtractTablesFromQuery_WithSubqueries_ShouldExtractAllTables" computerName="cursor" duration="00:00:00.0001833" startTime="2025-07-06T10:57:02.2033762+00:00" endTime="2025-07-06T10:57:02.2036532+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="e1d8a6b1-7eea-45d6-a540-f843f0b48c0c">
      <Output>
        <StdOut>[SqlMetadataService] Extracting tables from query: 270 chars
[SqlMetadataService] Clean SQL: 
            SELECT u.id, u.name,
                   (SELECT COUNT(*) FROM orders o WHERE o.user_id = u.id) as order_count
            FROM users u
            WHERE u.company_id IN (
                ...
[SqlMetadataService] Pattern '\bFROM\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)(?:\s+(?:AS\s+)?(\w+))?' found 3 matches
[SqlMetadataService] Match: 'FROM orders o'
[SqlMetadataService] Found table: orders
[SqlMetadataService] Match: 'FROM users u'
[SqlMetadataService] Found table: users
[SqlMetadataService] Match: 'FROM companies c'
[SqlMetadataService] Found table: companies
[SqlMetadataService] Pattern '\b(?:INNER\s+|LEFT\s+|RIGHT\s+|FULL\s+|OUTER\s+)?JOIN\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)(?:\s+(?:AS\s+)?(\w+))?' found 0 matches
[SqlMetadataService] Pattern '\bINTO\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)' found 0 matches
[SqlMetadataService] Pattern '\bUPDATE\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)' found 0 matches
[SqlMetadataService] Pattern '\bINSERT\s+INTO\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)' found 0 matches
[SqlMetadataService] Total tables extracted: 3 - orders, users, companies</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="206ae813-3783-4262-96e2-b4c5e01c1db8" testId="565c593c-a1ec-efd6-3780-c53986c553c0" testName="ParseQuery_InCondition_ExtractsValueList" computerName="cursor" duration="00:00:00.0016502" startTime="2025-07-06T11:03:06.6066593+00:00" endTime="2025-07-06T11:03:06.6083601+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="206ae813-3783-4262-96e2-b4c5e01c1db8">
      <Output>
        <StdOut>[11:03:06 INF] SqlQueryParserV2: Parsing SQL query with ScriptDom engine
[11:03:06 DBG] Visiting SelectStatement
[11:03:06 DBG] Found table: users with alias: users
[11:03:06 DBG] Extracting WHERE conditions from clause
[11:03:06 DBG] Found IN condition: .department IN (IT, HR, Finance)
[11:03:06 INF] ScriptDom extracted 1 WHERE conditions and 0 JOIN requirements</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="80f5e726-b4b6-483a-ab2c-05685ec0bdda" testId="c2d4e3da-39f1-e45c-38d4-6c5a31def722" testName="Test_ProveTC001Fix_FallbackOnly" computerName="cursor" duration="00:00:00.0015945" startTime="2025-07-06T10:57:03.6034137+00:00" endTime="2025-07-06T10:57:03.6051432+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="80f5e726-b4b6-483a-ab2c-05685ec0bdda">
      <Output>
        <StdOut>[DEBUG] GetApiKey() method called
[DEBUG] ConfigurationManager result: '' (length: 0)
[DEBUG] Environment variable result: '' (length: 0)
[DEBUG] Using HARDCODED API key for testing
[DEBUG] Gemini API Key configured: True
[DEBUG] API Key length: 39
[DEBUG] API Key preview: AIzaSyCsOz...
=== PROVING TC001 VNEXT FIX (FALLBACK ONLY) ===
Constraint: c.NAME LIKE '%VNEXT%'
Expected: Generated company names should contain 'VNEXT'

Generated 0 valid companies using fallback:</StdOut>
        <ErrorInfo>
          <Message>Assert.IsTrue failed. Should generate at least some records using fallback</Message>
          <StackTrace>   at SqlTestDataGenerator.Tests.ConstraintAwareGenerationTests.Test_ProveTC001Fix_FallbackOnly() in /workspace/SqlTestDataGenerator.Tests/ConstraintAwareGenerationTests.cs:line 926
</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="2abc9b42-b0b5-423d-8f64-149f42a9c788" testId="46564af2-7fd2-2128-da44-3a733601d023" testName="TestApiLimitBoundaryConditions" computerName="cursor" duration="00:00:00.0002884" startTime="2025-07-06T10:57:03.6234502+00:00" endTime="2025-07-06T10:57:03.6238567+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="2abc9b42-b0b5-423d-8f64-149f42a9c788">
      <Output>
        <StdOut>✅ Boundary Conditions Test Passed
\ud83d\udd04 Can Call: False
⏰ Next Call: 2025-07-06 10:57:08 UTC
⌛ Time Diff: 4.95 seconds</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="cb163f3a-5c52-4558-bf5f-f49b1fcef36c" testId="278e084f-9a34-6925-0e6c-7057c40b7f0a" testName="ExtractConstraints_VietnameseCompanyNames_ShouldHandleUTF8" computerName="cursor" duration="00:00:00.0013297" startTime="2025-07-06T11:03:06.5006887+00:00" endTime="2025-07-06T11:03:06.5020565+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="cb163f3a-5c52-4558-bf5f-f49b1fcef36c" />
    <UnitTestResult executionId="79543184-4c55-48ad-a52b-942c6749f0b9" testId="1e940aca-f548-be92-5f19-806853dafddb" testName="ExtractNullConstraints_WithIsNotNull_ShouldExtractCorrectly" computerName="cursor" duration="00:00:00.0017259" startTime="2025-07-06T10:57:02.2746196+00:00" endTime="2025-07-06T10:57:02.2764320+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="79543184-4c55-48ad-a52b-942c6749f0b9">
      <Output>
        <StdOut>[10:57:02 INF] Extracting comprehensive constraints from SQL query
[10:57:02 INF] Found WHERE clause: p.description IS NOT NULL AND p.category_id &gt; 0
[10:57:02 INF] Found WHERE comparison with alias: p.category_id &gt; '0'
[10:57:02 INF] Found NOT NULL constraint: p.description IS NOT NULL
[10:57:02 INF] Starting EXISTS constraints extraction with two-phase approach
[10:57:02 INF] Completed EXISTS constraints extraction: 0 NOT EXISTS, 0 EXISTS
[10:57:02 INF] Extracted 2 total constraints: 1 WHERE, 0 JOIN, 0 LIKE, 0 IN, 0 BETWEEN, 1 NULL, 0 EXISTS</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="09440be5-7548-42d5-ad9d-2abe8fd474f5" testId="2e0cc1d0-8e48-730a-36ce-d87cb24022a8" testName="ConvertToMySQLSyntax_EmptyOrNullQuery_ShouldReturnUnchanged" computerName="cursor" duration="00:00:00.0000995" startTime="2025-07-06T11:01:03.9526513+00:00" endTime="2025-07-06T11:01:03.9528129+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="09440be5-7548-42d5-ad9d-2abe8fd474f5">
      <Output>
        <StdOut>✅ Empty/null queries handled correctly</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="ccb70f84-e636-401e-9da0-f391aeb6bdde" testId="5f5dc02f-2f9c-49e2-7876-e8cabf1f6fd1" testName="ExtractExistsConstraints_SimpleExists_ShouldExtractCorrectly" computerName="cursor" duration="00:00:00.0155531" startTime="2025-07-06T11:01:03.8486637+00:00" endTime="2025-07-06T11:01:03.8645277+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="ccb70f84-e636-401e-9da0-f391aeb6bdde">
      <Output>
        <StdOut>Warning:&#xD;
     The component "Fluent Assertions" is governed by the rules defined in the Xceed License Agreement and&#xD;
     the Xceed Fluent Assertions Community License. You may use Fluent Assertions free of charge for&#xD;
     non-commercial use only. An active subscription is required to use Fluent Assertions for commercial use.&#xD;
&#xD;
     Please contact Xceed Sales mailto:sales@xceed.com to acquire a subscription at a very low cost.&#xD;
&#xD;
     A paid commercial license supports the development and continued increasing support of&#xD;
     Fluent Assertions users under both commercial and community licenses. Help us&#xD;
     keep Fluent Assertions at the forefront of unit testing.&#xD;
&#xD;
     For more information, visit https://xceed.com/products/unit-testing/fluent-assertions/



Debug Trace:
     Warning:&#xD;
     The component "Fluent Assertions" is governed by the rules defined in the Xceed License Agreement and&#xD;
     the Xceed Fluent Assertions Community License. You may use Fluent Assertions free of charge for&#xD;
     non-commercial use only. An active subscription is required to use Fluent Assertions for commercial use.&#xD;
&#xD;
     Please contact Xceed Sales mailto:sales@xceed.com to acquire a subscription at a very low cost.&#xD;
&#xD;
     A paid commercial license supports the development and continued increasing support of&#xD;
     Fluent Assertions users under both commercial and community licenses. Help us&#xD;
     keep Fluent Assertions at the forefront of unit testing.&#xD;
&#xD;
     For more information, visit https://xceed.com/products/unit-testing/fluent-assertions/</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="d4c4e55e-194d-4df2-a7b0-481cfe36c8b0" testId="e0fbe67e-bf5e-0a04-e1b9-1f890e4b8443" testName="ValidateMySQLSyntax_InvalidQuery_ShouldReturnFalse" computerName="cursor" duration="00:00:00.0001325" startTime="2025-07-06T11:01:03.9534576+00:00" endTime="2025-07-06T11:01:03.9536741+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="d4c4e55e-194d-4df2-a7b0-481cfe36c8b0">
      <Output>
        <StdOut>✅ Invalid syntax detected and rejected</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="2766048f-fe75-49f9-aeb5-9b1a2cba08cb" testId="f6459aea-f0c1-f81e-519d-6d38d4140c43" testName="ExecuteQueryWithTestDataAsync_MultipleRuns_ShouldAlwaysBeUnique" computerName="cursor" duration="00:00:00.0153862" startTime="2025-07-06T11:01:03.9672857+00:00" endTime="2025-07-06T11:01:03.9827803+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="2766048f-fe75-49f9-aeb5-9b1a2cba08cb">
      <Output>
        <StdOut>[CentralizedLoggingManager] Initialized. Logs directory: /workspace/logs
[CentralizedLoggingManager] Config source: default
[EngineService] Centralized logs directory: /workspace/logs
\ud83d\udd04 Testing multiple runs for consistency...

=== RUN 1 ===
\ud83e\uddf9 Cleaning up before run 1...
⚠️ Cleanup warning for run 1: Unable to connect to any of the specified MySQL hosts.
[EngineService] Starting execution for MySQL
[EngineService] Analyzing query: 1074 chars
[SqlMetadataService] Extracting tables from query: 1074 chars
[SqlMetadataService] Clean SQL: 
        SELECT u.id, u.username, u.first_name, u.last_name, u.email, u.date_of_birth, u.salary, u.department, u.hire_date, 
               c.NAME AS company_name, c.code AS company_code, r.NAME AS ro...
[SqlMetadataService] Pattern '\bFROM\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)(?:\s+(?:AS\s+)?(\w+))?' found 1 matches
[SqlMetadataService] Match: 'FROM users u'
[SqlMetadataService] Found table: users
[SqlMetadataService] Pattern '\b(?:INNER\s+|LEFT\s+|RIGHT\s+|FULL\s+|OUTER\s+)?JOIN\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)(?:\s+(?:AS\s+)?(\w+))?' found 3 matches
[SqlMetadataService] Match: 'INNER JOIN companies c'
[SqlMetadataService] Found table: companies
[SqlMetadataService] Match: 'INNER JOIN user_roles ur'
[SqlMetadataService] Found table: user_roles
[SqlMetadataService] Match: 'INNER JOIN roles r'
[SqlMetadataService] Found table: roles
[SqlMetadataService] Pattern '\bINTO\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)' found 0 matches
[SqlMetadataService] Pattern '\bUPDATE\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)' found 0 matches
[SqlMetadataService] Pattern '\bINSERT\s+INTO\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)' found 0 matches
[SqlMetadataService] Total tables extracted: 4 - users, companies, user_roles, roles
[EngineService] Metadata extraction failed: Unable to connect to any of the specified MySQL hosts.
[EngineService] Execution failed: Không thể phân tích database schema: Unable to connect to any of the specified MySQL hosts.
[EngineService] Exception type: InvalidOperationException
[EngineService] Inner exception: Unable to connect to any of the specified MySQL hosts.
  ❌ Failed: Không thể phân tích database schema: Unable to connect to any of the specified MySQL hosts.

=== RUN 2 ===
\ud83e\uddf9 Cleaning up before run 2...
⚠️ Cleanup warning for run 2: Unable to connect to any of the specified MySQL hosts.
[EngineService] Starting execution for MySQL
[EngineService] Analyzing query: 1074 chars
[SqlMetadataService] Extracting tables from query: 1074 chars
[SqlMetadataService] Clean SQL: 
        SELECT u.id, u.username, u.first_name, u.last_name, u.email, u.date_of_birth, u.salary, u.department, u.hire_date, 
               c.NAME AS company_name, c.code AS company_code, r.NAME AS ro...
[SqlMetadataService] Pattern '\bFROM\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)(?:\s+(?:AS\s+)?(\w+))?' found 1 matches
[SqlMetadataService] Match: 'FROM users u'
[SqlMetadataService] Found table: users
[SqlMetadataService] Pattern '\b(?:INNER\s+|LEFT\s+|RIGHT\s+|FULL\s+|OUTER\s+)?JOIN\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)(?:\s+(?:AS\s+)?(\w+))?' found 3 matches
[SqlMetadataService] Match: 'INNER JOIN companies c'
[SqlMetadataService] Found table: companies
[SqlMetadataService] Match: 'INNER JOIN user_roles ur'
[SqlMetadataService] Found table: user_roles
[SqlMetadataService] Match: 'INNER JOIN roles r'
[SqlMetadataService] Found table: roles
[SqlMetadataService] Pattern '\bINTO\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)' found 0 matches
[SqlMetadataService] Pattern '\bUPDATE\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)' found 0 matches
[SqlMetadataService] Pattern '\bINSERT\s+INTO\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)' found 0 matches
[SqlMetadataService] Total tables extracted: 4 - users, companies, user_roles, roles
[EngineService] Metadata extraction failed: Unable to connect to any of the specified MySQL hosts.
[EngineService] Execution failed: Không thể phân tích database schema: Unable to connect to any of the specified MySQL hosts.
[EngineService] Exception type: InvalidOperationException
[EngineService] Inner exception: Unable to connect to any of the specified MySQL hosts.
  ❌ Failed: Không thể phân tích database schema: Unable to connect to any of the specified MySQL hosts.

=== RUN 3 ===
\ud83e\uddf9 Cleaning up before run 3...
⚠️ Cleanup warning for run 3: Unable to connect to any of the specified MySQL hosts.
[EngineService] Starting execution for MySQL
[EngineService] Analyzing query: 1074 chars
[SqlMetadataService] Extracting tables from query: 1074 chars
[SqlMetadataService] Clean SQL: 
        SELECT u.id, u.username, u.first_name, u.last_name, u.email, u.date_of_birth, u.salary, u.department, u.hire_date, 
               c.NAME AS company_name, c.code AS company_code, r.NAME AS ro...
[SqlMetadataService] Pattern '\bFROM\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)(?:\s+(?:AS\s+)?(\w+))?' found 1 matches
[SqlMetadataService] Match: 'FROM users u'
[SqlMetadataService] Found table: users
[SqlMetadataService] Pattern '\b(?:INNER\s+|LEFT\s+|RIGHT\s+|FULL\s+|OUTER\s+)?JOIN\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)(?:\s+(?:AS\s+)?(\w+))?' found 3 matches
[SqlMetadataService] Match: 'INNER JOIN companies c'
[SqlMetadataService] Found table: companies
[SqlMetadataService] Match: 'INNER JOIN user_roles ur'
[SqlMetadataService] Found table: user_roles
[SqlMetadataService] Match: 'INNER JOIN roles r'
[SqlMetadataService] Found table: roles
[SqlMetadataService] Pattern '\bINTO\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)' found 0 matches
[SqlMetadataService] Pattern '\bUPDATE\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)' found 0 matches
[SqlMetadataService] Pattern '\bINSERT\s+INTO\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)' found 0 matches
[SqlMetadataService] Total tables extracted: 4 - users, companies, user_roles, roles
[EngineService] Metadata extraction failed: Unable to connect to any of the specified MySQL hosts.
[EngineService] Execution failed: Không thể phân tích database schema: Unable to connect to any of the specified MySQL hosts.
[EngineService] Exception type: InvalidOperationException
[EngineService] Inner exception: Unable to connect to any of the specified MySQL hosts.
  ❌ Failed: Không thể phân tích database schema: Unable to connect to any of the specified MySQL hosts.

\ud83d\udcca SUMMARY: 0/3 successful, 0 duplicates</StdOut>
        <ErrorInfo>
          <Message>Assert.AreEqual failed. Expected:&lt;3&gt;. Actual:&lt;0&gt;. All runs should succeed without duplicate key errors</Message>
          <StackTrace>   at SqlTestDataGenerator.Tests.MySQLIntegrationDuplicateKeyTests.ExecuteQueryWithTestDataAsync_MultipleRuns_ShouldAlwaysBeUnique() in /workspace/SqlTestDataGenerator.Tests/MySQLIntegrationDuplicateKeyTests.cs:line 266
</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="edc6fbdc-76b4-43c0-9fe9-dc848ab2c39e" testId="52c82675-ffa4-23b2-c280-44843f3a7e41" testName="TestExtractConstraints_NullChecks_ShouldExtractNullConstraints" computerName="cursor" duration="00:00:00.0014927" startTime="2025-07-06T10:57:03.7107638+00:00" endTime="2025-07-06T10:57:03.7123766+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="edc6fbdc-76b4-43c0-9fe9-dc848ab2c39e">
      <Output>
        <StdOut>=== NULL CHECK TEST RESULTS ===
NULL Constraints: 4
NULL: u.deleted_at IS_NULL - IsNull: True
NULL: u.middle_name IS_NULL - IsNull: True
NULL: u.phone IS_NOT_NULL - IsNull: False
NULL: u.email IS_NOT_NULL - IsNull: False
✅ NULL checks extraction test passed</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="28673b73-4ec7-4972-b8d7-f40bafaf1114" testId="c6f2c04c-f677-456c-51ca-b43e9a462015" testName="TestGeminiServiceInitialization" computerName="cursor" duration="00:00:00.0919577" startTime="2025-07-06T10:57:01.7142823+00:00" endTime="2025-07-06T10:57:01.8222634+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="28673b73-4ec7-4972-b8d7-f40bafaf1114">
      <Output>
        <StdOut>Testing Gemini AI service initialization
API Key available: False
AI Service available: True</StdOut>
        <ErrorInfo>
          <Message>Assert.IsFalse failed. Service should not be available without API key</Message>
          <StackTrace>   at SqlTestDataGenerator.Tests.AIIntegrationBasicTest.TestGeminiServiceInitialization() in /workspace/SqlTestDataGenerator.Tests/AIIntegrationBasicTest.cs:line 33
</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="5f8d9fac-28ff-4430-b768-4235184bdb25" testId="9ddb3c70-4652-b32c-72ff-06adb9dbe978" testName="DisposedLogger_ShouldNotLog" computerName="cursor" duration="00:00:00.0002746" startTime="2025-07-06T11:01:03.9276009+00:00" endTime="2025-07-06T11:01:03.9279604+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="5f8d9fac-28ff-4430-b768-4235184bdb25">
      <Output>
        <StdOut>[CentralizedLoggingManager] Initialized. Logs directory: /workspace/logs
[CentralizedLoggingManager] Config source: default
[LoggerServiceTests] Using centralized log path: /workspace/logs/test-20250706.log</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="66f1189a-8c99-4714-8137-59050ab846b5" testId="8dbddd12-1e3d-0936-552e-7e6f9e2aaf7f" testName="ExecuteQueryWithTestDataAsync_MySQLConnection_ShouldValidateConnectionString" computerName="cursor" duration="00:00:00.0074636" startTime="2025-07-06T10:57:02.1645748+00:00" endTime="2025-07-06T10:57:02.1721442+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="66f1189a-8c99-4714-8137-59050ab846b5">
      <Output>
        <StdOut>[CentralizedLoggingManager] Initialized. Logs directory: /workspace/logs
[CentralizedLoggingManager] Config source: default
[EngineService] Centralized logs directory: /workspace/logs
[EngineService] Starting execution for MySQL
[EngineService] Analyzing query: 19 chars
[SqlMetadataService] Extracting tables from query: 19 chars
[SqlMetadataService] Clean SQL: SELECT * FROM users...
[SqlMetadataService] Pattern '\bFROM\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)(?:\s+(?:AS\s+)?(\w+))?' found 1 matches
[SqlMetadataService] Match: 'FROM users'
[SqlMetadataService] Found table: users
[SqlMetadataService] Pattern '\b(?:INNER\s+|LEFT\s+|RIGHT\s+|FULL\s+|OUTER\s+)?JOIN\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)(?:\s+(?:AS\s+)?(\w+))?' found 0 matches
[SqlMetadataService] Pattern '\bINTO\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)' found 0 matches
[SqlMetadataService] Pattern '\bUPDATE\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)' found 0 matches
[SqlMetadataService] Pattern '\bINSERT\s+INTO\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)' found 0 matches
[SqlMetadataService] Total tables extracted: 1 - users
[EngineService] Metadata extraction failed: Unable to connect to any of the specified MySQL hosts.
[EngineService] Execution failed: Không thể phân tích database schema: Unable to connect to any of the specified MySQL hosts.
[EngineService] Exception type: InvalidOperationException
[EngineService] Inner exception: Unable to connect to any of the specified MySQL hosts.
[EngineService] Starting execution for MySQL
[EngineService] Analyzing query: 19 chars
[SqlMetadataService] Extracting tables from query: 19 chars
[SqlMetadataService] Clean SQL: SELECT * FROM users...
[SqlMetadataService] Pattern '\bFROM\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)(?:\s+(?:AS\s+)?(\w+))?' found 1 matches
[SqlMetadataService] Match: 'FROM users'
[SqlMetadataService] Found table: users
[SqlMetadataService] Pattern '\b(?:INNER\s+|LEFT\s+|RIGHT\s+|FULL\s+|OUTER\s+)?JOIN\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)(?:\s+(?:AS\s+)?(\w+))?' found 0 matches
[SqlMetadataService] Pattern '\bINTO\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)' found 0 matches
[SqlMetadataService] Pattern '\bUPDATE\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)' found 0 matches
[SqlMetadataService] Pattern '\bINSERT\s+INTO\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)' found 0 matches
[SqlMetadataService] Total tables extracted: 1 - users
[EngineService] Metadata extraction failed: Option 'invalid connection string;connection timeout' not supported.
[EngineService] Execution failed: Không thể phân tích database schema: Option 'invalid connection string;connection timeout' not supported.
[EngineService] Exception type: InvalidOperationException
[EngineService] Inner exception: Option 'invalid connection string;connection timeout' not supported.
✅ MySQL connection string validation tests completed</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="927bc3d9-f3ba-4bb5-88ec-f9cea7332037" testId="2ba22d0d-6589-7197-68b1-8359f9ab44f9" testName="ExtractTablesFromQuery_ComplexSQL_ShouldHandleMultipleJoins" computerName="cursor" duration="00:00:00.0001760" startTime="2025-07-06T10:57:02.1969517+00:00" endTime="2025-07-06T10:57:02.1971956+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="927bc3d9-f3ba-4bb5-88ec-f9cea7332037">
      <Output>
        <StdOut>[SqlMetadataService] Extracting tables from query: 273 chars
[SqlMetadataService] Clean SQL: 
            SELECT * FROM users u
            INNER JOIN companies c ON u.company_id = c.id
            LEFT JOIN departments d ON u.department_id = d.id
            RIGHT JOIN locations l ON d.locat...
[SqlMetadataService] Pattern '\bFROM\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)(?:\s+(?:AS\s+)?(\w+))?' found 1 matches
[SqlMetadataService] Match: 'FROM users u'
[SqlMetadataService] Found table: users
[SqlMetadataService] Pattern '\b(?:INNER\s+|LEFT\s+|RIGHT\s+|FULL\s+|OUTER\s+)?JOIN\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)(?:\s+(?:AS\s+)?(\w+))?' found 4 matches
[SqlMetadataService] Match: 'INNER JOIN companies c'
[SqlMetadataService] Found table: companies
[SqlMetadataService] Match: 'LEFT JOIN departments d'
[SqlMetadataService] Found table: departments
[SqlMetadataService] Match: 'RIGHT JOIN locations l'
[SqlMetadataService] Found table: locations
[SqlMetadataService] Match: 'OUTER JOIN regions r'
[SqlMetadataService] Found table: regions
[SqlMetadataService] Pattern '\bINTO\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)' found 0 matches
[SqlMetadataService] Pattern '\bUPDATE\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)' found 0 matches
[SqlMetadataService] Pattern '\bINSERT\s+INTO\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)' found 0 matches
[SqlMetadataService] Total tables extracted: 5 - users, companies, departments, locations, regions</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="9a0fce8d-553d-40b6-9374-fca2ce51b17c" testId="0b31b055-dd09-9ece-b730-b2afc725f7ea" testName="StringEncoding_VietnameseText_ShouldPreserveCharacters" computerName="cursor" duration="00:00:00.0002021" startTime="2025-07-06T11:03:06.5073242+00:00" endTime="2025-07-06T11:03:06.5075609+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="9a0fce8d-553d-40b6-9374-fca2ce51b17c">
      <Output>
        <StdOut>✅ All Vietnamese texts preserved correctly in UTF-8 encoding</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="3a2e4064-be45-449f-9762-b4d090c045d2" testId="5a366c63-f307-9fef-f255-5d7561c90c4a" testName="Debug_ConstraintValidation_WithoutAI" computerName="cursor" duration="00:00:00.0007967" startTime="2025-07-06T10:57:03.5905671+00:00" endTime="2025-07-06T10:57:03.5914601+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="3a2e4064-be45-449f-9762-b4d090c045d2">
      <Output>
        <StdOut>[DEBUG] GetApiKey() method called
[DEBUG] ConfigurationManager result: '' (length: 0)
[DEBUG] Environment variable result: '' (length: 0)
[DEBUG] Using HARDCODED API key for testing
[DEBUG] Gemini API Key configured: True
[DEBUG] API Key length: 39
[DEBUG] API Key preview: AIzaSyCsOz...
[DEBUG] Valid record validation: True
[DEBUG] Valid record violations: 0
[DEBUG] Invalid record validation: False
[DEBUG] Invalid record violations: 2
[DEBUG] Invalid record violation: first_name LIKE %Phương%
[DEBUG] Invalid record violation: date_of_birth YEAR 1989</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="eb8b1e2f-b228-4d59-88cb-d0aad2597dfa" testId="02ff96e2-ba85-766f-e79a-a17a7bbfe07b" testName="TestWhereClauseRegex" computerName="cursor" duration="00:00:00.0001581" startTime="2025-07-06T11:03:06.5103039+00:00" endTime="2025-07-06T11:03:06.5105889+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="eb8b1e2f-b228-4d59-88cb-d0aad2597dfa" />
    <UnitTestResult executionId="9fda3c8b-0cef-4851-91cb-ec001695ca43" testId="812afea8-78cc-8b31-7c2f-4fcf17bd6c5c" testName="ParseQuery_LikeCondition_ShouldExtractCondition" computerName="cursor" duration="00:00:00.0005123" startTime="2025-07-06T11:03:06.5170782+00:00" endTime="2025-07-06T11:03:06.5176621+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="9fda3c8b-0cef-4851-91cb-ec001695ca43">
      <Output>
        <StdOut>[SqlMetadataService] Extracting tables from query: 44 chars
[SqlMetadataService] Clean SQL: SELECT * FROM users WHERE name LIKE '%John%'...
[SqlMetadataService] Pattern '\bFROM\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)(?:\s+(?:AS\s+)?(\w+))?' found 1 matches
[SqlMetadataService] Match: 'FROM users WHERE'
[SqlMetadataService] Found table: users
[SqlMetadataService] Pattern '\b(?:INNER\s+|LEFT\s+|RIGHT\s+|FULL\s+|OUTER\s+)?JOIN\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)(?:\s+(?:AS\s+)?(\w+))?' found 0 matches
[SqlMetadataService] Pattern '\bINTO\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)' found 0 matches
[SqlMetadataService] Pattern '\bUPDATE\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)' found 0 matches
[SqlMetadataService] Pattern '\bINSERT\s+INTO\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)' found 0 matches
[SqlMetadataService] Total tables extracted: 1 - users
JOIN Debug: Clean query = 'SELECT * FROM users WHERE name LIKE '%John%''
JOIN Debug: Pattern = '(?:INNER\s+|LEFT\s+|RIGHT\s+|FULL\s+|OUTER\s+)?JOIN\s+(\w+)\s+(\w+)\s+ON\s+([^()]+?)(?=\s+(?:INNER|LEFT|RIGHT|FULL|OUTER|WHERE|ORDER|GROUP|LIMIT|$)|$)'
JOIN Debug: Found 0 JOIN matches</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="7701793f-70f5-4657-ae90-49a56def1c98" testId="bdc6218b-2cc3-93bb-38e0-86e20726e46d" testName="Debug_GeminiAPICall_WithRateLimiting" computerName="cursor" duration="00:00:00.0011983" startTime="2025-07-06T10:57:03.5986858+00:00" endTime="2025-07-06T10:57:03.6000226+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="7701793f-70f5-4657-ae90-49a56def1c98">
      <Output>
        <StdOut>[DEBUG] GetApiKey() method called
[DEBUG] ConfigurationManager result: '' (length: 0)
[DEBUG] Environment variable result: '' (length: 0)
[DEBUG] Using HARDCODED API key for testing
[DEBUG] Gemini API Key configured: True
[DEBUG] API Key length: 39
[DEBUG] API Key preview: AIzaSyCsOz...
[DEBUG] Testing Gemini API call with rate limiting...
[DEBUG] GetApiKey() method called
[DEBUG] ConfigurationManager result: '' (length: 0)
[DEBUG] Environment variable result: '' (length: 0)
[DEBUG] Using HARDCODED API key for testing
[DEBUG] Using API key: AIzaSyCsOz...
[DEBUG] Testing AI service with rate limiting...
[DEBUG] Generation completed in 0.00 seconds
[DEBUG] Generated 1 records
[DEBUG] Record: name='TestVNEXTData_1'
[DEBUG] Rate limiting test completed successfully</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="d7634ace-f1b4-49d1-a1cc-8daf280b3117" testId="ac41b066-7e5e-ccde-36c5-33f94001f207" testName="ParseQuery_WhereEqualityWithNumbers_ShouldExtractCondition" computerName="cursor" duration="00:00:00.0005639" startTime="2025-07-06T11:03:06.5136696+00:00" endTime="2025-07-06T11:03:06.5142790+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="d7634ace-f1b4-49d1-a1cc-8daf280b3117">
      <Output>
        <StdOut>[SqlMetadataService] Extracting tables from query: 34 chars
[SqlMetadataService] Clean SQL: SELECT * FROM users WHERE age = 25...
[SqlMetadataService] Pattern '\bFROM\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)(?:\s+(?:AS\s+)?(\w+))?' found 1 matches
[SqlMetadataService] Match: 'FROM users WHERE'
[SqlMetadataService] Found table: users
[SqlMetadataService] Pattern '\b(?:INNER\s+|LEFT\s+|RIGHT\s+|FULL\s+|OUTER\s+)?JOIN\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)(?:\s+(?:AS\s+)?(\w+))?' found 0 matches
[SqlMetadataService] Pattern '\bINTO\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)' found 0 matches
[SqlMetadataService] Pattern '\bUPDATE\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)' found 0 matches
[SqlMetadataService] Pattern '\bINSERT\s+INTO\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)' found 0 matches
[SqlMetadataService] Total tables extracted: 1 - users
JOIN Debug: Clean query = 'SELECT * FROM users WHERE age = 25'
JOIN Debug: Pattern = '(?:INNER\s+|LEFT\s+|RIGHT\s+|FULL\s+|OUTER\s+)?JOIN\s+(\w+)\s+(\w+)\s+ON\s+([^()]+?)(?=\s+(?:INNER|LEFT|RIGHT|FULL|OUTER|WHERE|ORDER|GROUP|LIMIT|$)|$)'
JOIN Debug: Found 0 JOIN matches</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="fd55de70-5cf0-4f6d-a879-da901ae4b020" testId="d94c37bd-9528-f060-511c-4dfe1f44244d" testName="ExtractAllConstraints_WithComplexQuery_ShouldExtractAllTypes" computerName="cursor" duration="00:00:00.0016808" startTime="2025-07-06T10:57:02.2845288+00:00" endTime="2025-07-06T10:57:02.2862879+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="fd55de70-5cf0-4f6d-a879-da901ae4b020">
      <Output>
        <StdOut>[10:57:02 INF] Extracting comprehensive constraints from SQL query
[10:57:02 INF] Found WHERE clause: u.status = 'ACTIVE' AND u.age BETWEEN 25 AND 65 AND u.department IN ('HR', 'IT', 'Finance') AND u.email LIKE '%@company.com' AND u.salary &gt;= 50000 AND u.manager_id IS NOT NULL AND YEAR(u.hire_date) = 2023
[10:57:02 INF] Found WHERE equality with alias: u.status = 'ACTIVE'
[10:57:02 INF] Found WHERE comparison with alias: u.salary &gt;= '50000'
[10:57:02 INF] Processing JOIN: companies c ON u.company_id = c.id AND c.is_active = TRUE
[10:57:02 INF] Found JOIN additional constraint: c.is_active = 'TRUE'
[10:57:02 INF] Processing JOIN: user_roles ur ON u.id = ur.user_id AND ur.is_primary = 1
[10:57:02 INF] Found JOIN additional constraint: ur.is_primary = '1'
[10:57:02 INF] Processing JOIN: roles r ON ur.role_id = r.id
[10:57:02 INF] Found LIKE pattern with alias: u.email LIKE '%@company.com' (requires: '@company.com')
[10:57:02 INF] Found YEAR constraint: YEAR(u.hire_date) = 2023
[10:57:02 INF] Found BOOLEAN constraint with alias: c.is_active = TRUE
[10:57:02 INF] Found BOOLEAN constraint with alias: ur.is_primary = 1
[10:57:02 INF] Found IN clause: u.department IN (HR, IT, Finance) - Type: STRING_LIST
[10:57:02 INF] Found BETWEEN constraint: u.age BETWEEN '25' AND '65' - Type: NUMERIC
[10:57:02 INF] Found NOT NULL constraint: u.manager_id IS NOT NULL
[10:57:02 INF] Starting EXISTS constraints extraction with two-phase approach
[10:57:02 INF] Completed EXISTS constraints extraction: 0 NOT EXISTS, 0 EXISTS
[10:57:02 INF] Extracted 14 total constraints: 2 WHERE, 5 JOIN, 1 LIKE, 1 IN, 1 BETWEEN, 1 NULL, 0 EXISTS</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="8b33fddd-f50e-4abf-aa29-82025f04a768" testId="d58b23b9-e1a6-68ae-1268-135ff59cc20d" testName="GenerateBogusData_UserRoles_ShouldCreateUserRoleData" computerName="cursor" duration="00:00:00.0028070" startTime="2025-07-06T10:57:02.0475536+00:00" endTime="2025-07-06T10:57:02.0504648+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="8b33fddd-f50e-4abf-aa29-82025f04a768">
      <Output>
        <StdOut>[DEBUG] Table user_roles has 6 columns:
[DEBUG] Column: user_id, IsIdentity: False, IsGenerated: False, DefaultValue: ''
[DEBUG] Column: role_id, IsIdentity: False, IsGenerated: False, DefaultValue: ''
[DEBUG] Column: assigned_by, IsIdentity: False, IsGenerated: False, DefaultValue: ''
[DEBUG] Column: assigned_at, IsIdentity: False, IsGenerated: False, DefaultValue: ''
[DEBUG] Column: expires_at, IsIdentity: False, IsGenerated: False, DefaultValue: ''
[DEBUG] Column: is_active, IsIdentity: False, IsGenerated: False, DefaultValue: ''
[DEBUG-T021] Filtered columns for user_roles: 6 columns (from 6 total)
[DEBUG-T021] Excluded columns: 
[DEBUG-T021] Included columns: user_id, role_id, assigned_by, assigned_at, expires_at, is_active
[DATE-FALLBACK] user_roles.expires_at: Generated 2025-08-08 02:31:46 (within 60 days default)
[DEBUG] Boolean column detected: is_active (bit) -&gt; generating boolean
[DEBUG] Generated SQL for user_roles: INSERT INTO `user_roles` (`user_id`, `role_id`, `assigned_by`, `assigned_at`, `expires_at`, `is_active`) VALUES (2, 3, 5, '2024-11-11 22:21:35', '2025-08-08 02:31:46', 1);
[DATE-FALLBACK] user_roles.expires_at: Generated 2025-08-24 11:09:21 (within 60 days default)
[DEBUG] Boolean column detected: is_active (bit) -&gt; generating boolean
[DEBUG] Generated SQL for user_roles: INSERT INTO `user_roles` (`user_id`, `role_id`, `assigned_by`, `assigned_at`, `expires_at`, `is_active`) VALUES (3, 4, 1, '2025-01-11 08:55:03', '2025-08-24 11:09:21', 1);
[DATE-FALLBACK] user_roles.expires_at: Generated 2025-08-20 21:58:21 (within 60 days default)
[DEBUG] Boolean column detected: is_active (bit) -&gt; generating boolean
[DEBUG] Generated SQL for user_roles: INSERT INTO `user_roles` (`user_id`, `role_id`, `assigned_by`, `assigned_at`, `expires_at`, `is_active`) VALUES (4, 5, 2, '2025-06-28 16:03:12', '2025-08-20 21:58:21', 1);
[DATE-FALLBACK] user_roles.expires_at: Generated 2025-08-11 21:46:15 (within 60 days default)
[DEBUG] Boolean column detected: is_active (bit) -&gt; generating boolean
[DEBUG] Generated SQL for user_roles: INSERT INTO `user_roles` (`user_id`, `role_id`, `assigned_by`, `assigned_at`, `expires_at`, `is_active`) VALUES (5, 1, 3, '2025-03-08 02:05:35', '2025-08-11 21:46:15', 1);
[DATE-FALLBACK] user_roles.expires_at: Generated 2025-07-15 16:01:36 (within 60 days default)
[DEBUG] Boolean column detected: is_active (bit) -&gt; generating boolean
[DEBUG] Generated SQL for user_roles: INSERT INTO `user_roles` (`user_id`, `role_id`, `assigned_by`, `assigned_at`, `expires_at`, `is_active`) VALUES (1, 2, 4, '2025-06-21 23:58:30', '2025-07-15 16:01:36', 0);
Generated 5 user_role statements
UserRole: INSERT INTO `user_roles` (`user_id`, `role_id`, `assigned_by`, `assigned_at`, `expires_at`, `is_active`) VALUES (2, 3, 5, '2024-11-11 22:21:35', '2025...
UserRole: INSERT INTO `user_roles` (`user_id`, `role_id`, `assigned_by`, `assigned_at`, `expires_at`, `is_active`) VALUES (3, 4, 1, '2025-01-11 08:55:03', '2025...
UserRole: INSERT INTO `user_roles` (`user_id`, `role_id`, `assigned_by`, `assigned_at`, `expires_at`, `is_active`) VALUES (4, 5, 2, '2025-06-28 16:03:12', '2025...
UserRole: INSERT INTO `user_roles` (`user_id`, `role_id`, `assigned_by`, `assigned_at`, `expires_at`, `is_active`) VALUES (5, 1, 3, '2025-03-08 02:05:35', '2025...
UserRole: INSERT INTO `user_roles` (`user_id`, `role_id`, `assigned_by`, `assigned_at`, `expires_at`, `is_active`) VALUES (1, 2, 4, '2025-06-21 23:58:30', '2025...</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="a85e0401-8e3d-4d02-ba5d-87cf36275cd3" testId="91935916-0cd6-2247-f98b-684553fbf0fb" testName="ExtractExistsConstraints_MultipleWhitespaces_ShouldExtractCorrectly" computerName="cursor" duration="00:00:00.0012653" startTime="2025-07-06T11:01:03.8694023+00:00" endTime="2025-07-06T11:01:03.8707397+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="a85e0401-8e3d-4d02-ba5d-87cf36275cd3" />
    <UnitTestResult executionId="4837163d-ce79-4a86-9f62-c1b81c5aab58" testId="20ee9d7c-8101-2eda-002f-53ca537517d6" testName="GetConstraintsForColumn_WithSpecificColumn_ShouldReturnOnlyColumnConstraints" computerName="cursor" duration="00:00:00.0018227" startTime="2025-07-06T10:57:02.2998355+00:00" endTime="2025-07-06T10:57:02.3017563+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="4837163d-ce79-4a86-9f62-c1b81c5aab58">
      <Output>
        <StdOut>[10:57:02 INF] Extracting comprehensive constraints from SQL query
[10:57:02 INF] Found WHERE clause: e.department IN ('HR', 'IT') AND e.salary BETWEEN 50000 AND 100000
[10:57:02 INF] Found IN clause: e.department IN (HR, IT) - Type: STRING_LIST
[10:57:02 INF] Found BETWEEN constraint: e.salary BETWEEN '50000' AND '100000' - Type: NUMERIC
[10:57:02 INF] Starting EXISTS constraints extraction with two-phase approach
[10:57:02 INF] Completed EXISTS constraints extraction: 0 NOT EXISTS, 0 EXISTS
[10:57:02 INF] Extracted 2 total constraints: 0 WHERE, 0 JOIN, 0 LIKE, 1 IN, 1 BETWEEN, 0 NULL, 0 EXISTS</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="109f85a5-abd5-4c42-8ea7-64ec281a15dd" testId="2cb2f523-d773-3e66-7075-be5cb7772187" testName="TestCloudMySQL_AlternativeProviders" computerName="cursor" duration="00:00:00.0039508" startTime="2025-07-06T10:57:03.6439406+00:00" endTime="2025-07-06T10:57:03.6480629+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="109f85a5-abd5-4c42-8ea7-64ec281a15dd">
      <Output>
        <StdOut>[CentralizedLoggingManager] Initialized. Logs directory: /workspace/logs
[CentralizedLoggingManager] Config source: default
[EngineService] Centralized logs directory: /workspace/logs
=== TESTING CLOUD MYSQL PROVIDERS ===
(These are example formats - real credentials needed)

Connection format: Server=aws.connect.psdb.cloud...
❓ Need real credentials to test

Connection format: Server=containers-us-west-1.railway.app...
❓ Need real credentials to test

Connection format: Server=bmvz4eqz1wprlm2o.cbetxkdyhwsb.us-east-1.rds.amazonaws.com...
❓ Need real credentials to test

Connection format: Server=mysql-test.aivencloud.com...
❓ Need real credentials to test

\ud83d\udcdd If you have cloud MySQL, please provide connection string!</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="eb8f0fa5-6f40-4d12-82ca-0bc6224c974b" testId="277f3b52-0570-c0b0-06bd-5c0e065db537" testName="TestJoinRegexPattern" computerName="cursor" duration="00:00:00.0005160" startTime="2025-07-06T11:03:06.5107111+00:00" endTime="2025-07-06T11:03:06.5112584+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="eb8f0fa5-6f40-4d12-82ca-0bc6224c974b">
      <Output>
        <StdOut>SQL: SELECT u.name, c.name FROM users u INNER JOIN companies c ON u.company_id = c.id
Complex pattern match: False
Simple pattern match: True
Basic pattern match: True
Table: companies
Alias: c
ON condition: u.company_id = c.id</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="6c728ae2-7894-4d93-b2db-908527e5542a" testId="0fdb9169-0da5-ba99-1388-117a5fa1e5c6" testName="TC018_MathematicalOperations_WithCalculations_ShouldHandleMath" computerName="cursor" duration="00:00:00.0048030" startTime="2025-07-06T11:01:03.8374171+00:00" endTime="2025-07-06T11:01:03.8423240+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="6c728ae2-7894-4d93-b2db-908527e5542a">
      <Output>
        <StdOut>[CentralizedLoggingManager] Initialized. Logs directory: /workspace/logs
[CentralizedLoggingManager] Config source: default
[EngineService] Centralized logs directory: /workspace/logs
=== TC018: Mathematical Operations Test ===
Keywords: +, -, *, /, %, ROUND, CEIL, FLOOR, ABS, SQRT, POWER, MOD, GREATEST, LEAST, SIGN, TRUNCATE
[EngineService] Starting execution for MySQL
[EngineService] Analyzing query: 1077 chars
[SqlMetadataService] Extracting tables from query: 1077 chars
[SqlMetadataService] Clean SQL: 
            SELECT u.id, u.username, u.salary,
                   u.salary * 1.1 as salary_with_raise,
                   u.salary / 12 as monthly_salary,
                   u.salary % 1000 as salary...
[SqlMetadataService] Pattern '\bFROM\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)(?:\s+(?:AS\s+)?(\w+))?' found 1 matches
[SqlMetadataService] Match: 'FROM users u'
[SqlMetadataService] Found table: users
[SqlMetadataService] Pattern '\b(?:INNER\s+|LEFT\s+|RIGHT\s+|FULL\s+|OUTER\s+)?JOIN\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)(?:\s+(?:AS\s+)?(\w+))?' found 0 matches
[SqlMetadataService] Pattern '\bINTO\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)' found 0 matches
[SqlMetadataService] Pattern '\bUPDATE\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)' found 0 matches
[SqlMetadataService] Pattern '\bINSERT\s+INTO\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)' found 0 matches
[SqlMetadataService] Total tables extracted: 1 - users
[EngineService] Metadata extraction failed: Unable to connect to any of the specified MySQL hosts.
[EngineService] Execution failed: Không thể phân tích database schema: Unable to connect to any of the specified MySQL hosts.
[EngineService] Exception type: InvalidOperationException
[EngineService] Inner exception: Unable to connect to any of the specified MySQL hosts.
Result Success: False
Generated Records: 0
Expected error for mathematical operations: Không thể phân tích database schema: Unable to connect to any of the specified MySQL hosts.</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="c9b4cc4f-1c0b-4919-aba6-790e70c292d1" testId="ed6b3ee9-628f-42a4-56ce-554c19cf0237" testName="ExtractExistsConstraints_BothExistsAndNotExists_ShouldExtractBothCorrectly" computerName="cursor" duration="00:00:00.0023989" startTime="2025-07-06T11:01:03.8667098+00:00" endTime="2025-07-06T11:01:03.8691876+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="c9b4cc4f-1c0b-4919-aba6-790e70c292d1" />
    <UnitTestResult executionId="d2c7144a-45b7-4a8a-8706-521bcaab3367" testId="dd4dcdfc-3229-d26a-a927-8c8874ede311" testName="ExtractAllConstraints_WithoutTableAlias_ShouldExtractCorrectly" computerName="cursor" duration="00:00:00.0021649" startTime="2025-07-06T10:57:02.2878852+00:00" endTime="2025-07-06T10:57:02.2901430+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="d2c7144a-45b7-4a8a-8706-521bcaab3367">
      <Output>
        <StdOut>[10:57:02 INF] Extracting comprehensive constraints from SQL query
[10:57:02 INF] Found WHERE clause: status = 'ACTIVE' AND age BETWEEN 18 AND 65 AND department IN ('HR', 'IT') AND email IS NOT NULL
[10:57:02 INF] Found WHERE equality without alias: status = 'ACTIVE'
[10:57:02 INF] Found IN clause: .department IN (HR, IT) - Type: STRING_LIST
[10:57:02 INF] Found BETWEEN constraint without alias: age BETWEEN '18' AND '65' - Type: NUMERIC
[10:57:02 INF] Found NOT NULL constraint without alias: email IS NOT NULL
[10:57:02 INF] Starting EXISTS constraints extraction with two-phase approach
[10:57:02 INF] Completed EXISTS constraints extraction: 0 NOT EXISTS, 0 EXISTS
[10:57:02 INF] Extracted 4 total constraints: 1 WHERE, 0 JOIN, 0 LIKE, 1 IN, 1 BETWEEN, 1 NULL, 0 EXISTS
WHERE constraints: 1
BETWEEN constraints: 1
IN constraints: 1
NULL constraints: 1
WHERE: .status = ACTIVE
BETWEEN: .age BETWEEN 18 AND 65</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="a18eedaf-57ea-44a0-ad92-38323df66bf3" testId="b0d97344-12ad-7d1d-6969-28321e909b5f" testName="ExtractExistsConstraints_CaseInsensitive_ShouldExtractCorrectly" computerName="cursor" duration="00:00:00.0021035" startTime="2025-07-06T11:01:03.8797759+00:00" endTime="2025-07-06T11:01:03.8819675+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="a18eedaf-57ea-44a0-ad92-38323df66bf3" />
    <UnitTestResult executionId="3e2ce5e4-bd1c-4c58-927e-0a2476a319b0" testId="198251d9-c903-0e2b-dcda-1d746dd7a792" testName="TC017_RightJoin_WithNullHandling_ShouldGenerateCorrectData" computerName="cursor" duration="00:00:00.0049984" startTime="2025-07-06T11:01:03.8320663+00:00" endTime="2025-07-06T11:01:03.8372074+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="3e2ce5e4-bd1c-4c58-927e-0a2476a319b0">
      <Output>
        <StdOut>[CentralizedLoggingManager] Initialized. Logs directory: /workspace/logs
[CentralizedLoggingManager] Config source: default
[EngineService] Centralized logs directory: /workspace/logs
=== TC017: RIGHT JOIN Test ===
Keywords: RIGHT JOIN, IFNULL, IS NULL, NULL handling
[EngineService] Starting execution for MySQL
[EngineService] Analyzing query: 769 chars
[SqlMetadataService] Extracting tables from query: 769 chars
[SqlMetadataService] Clean SQL: 
            SELECT IFNULL(u.username, 'No User') as username,
                   IFNULL(u.email, 'No Email') as email,
                   c.name as company_name,
                   c.industry,
      ...
[SqlMetadataService] Pattern '\bFROM\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)(?:\s+(?:AS\s+)?(\w+))?' found 1 matches
[SqlMetadataService] Match: 'FROM companies c'
[SqlMetadataService] Found table: companies
[SqlMetadataService] Pattern '\b(?:INNER\s+|LEFT\s+|RIGHT\s+|FULL\s+|OUTER\s+)?JOIN\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)(?:\s+(?:AS\s+)?(\w+))?' found 1 matches
[SqlMetadataService] Match: 'RIGHT JOIN users u'
[SqlMetadataService] Found table: users
[SqlMetadataService] Pattern '\bINTO\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)' found 0 matches
[SqlMetadataService] Pattern '\bUPDATE\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)' found 0 matches
[SqlMetadataService] Pattern '\bINSERT\s+INTO\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)' found 0 matches
[SqlMetadataService] Total tables extracted: 2 - companies, users
[EngineService] Metadata extraction failed: Unable to connect to any of the specified MySQL hosts.
[EngineService] Execution failed: Không thể phân tích database schema: Unable to connect to any of the specified MySQL hosts.
[EngineService] Exception type: InvalidOperationException
[EngineService] Inner exception: Unable to connect to any of the specified MySQL hosts.
Result Success: False
Generated Records: 0
Expected error for RIGHT JOIN: Không thể phân tích database schema: Unable to connect to any of the specified MySQL hosts.</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="59bb2e5c-f247-45a7-9973-d211436fa881" testId="214c1e4f-b53b-6028-1f71-6aa1cf0fa2a7" testName="TC006_5_ProveEngineGeneratesRecords_WriteToFile" computerName="cursor" duration="00:02:00.0081881" startTime="2025-07-06T10:59:03.7549926+00:00" endTime="2025-07-06T11:01:03.7636562+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="59bb2e5c-f247-45a7-9973-d211436fa881">
      <Output>
        <StdOut>[CentralizedLoggingManager] Initialized. Logs directory: /workspace/logs
[CentralizedLoggingManager] Config source: default
[EngineService] Centralized logs directory: /workspace/logs
Gemini API Key Available: False
[EngineService] Starting execution for MySQL
[EngineService] Analyzing query: 65 chars
[SqlMetadataService] Extracting tables from query: 65 chars
[SqlMetadataService] Clean SQL: SELECT id, username, email FROM users WHERE is_active = 1 LIMIT 3...
[SqlMetadataService] Pattern '\bFROM\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)(?:\s+(?:AS\s+)?(\w+))?' found 1 matches
[SqlMetadataService] Match: 'FROM users WHERE'
[SqlMetadataService] Found table: users
[SqlMetadataService] Pattern '\b(?:INNER\s+|LEFT\s+|RIGHT\s+|FULL\s+|OUTER\s+)?JOIN\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)(?:\s+(?:AS\s+)?(\w+))?' found 0 matches
[SqlMetadataService] Pattern '\bINTO\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)' found 0 matches
[SqlMetadataService] Pattern '\bUPDATE\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)' found 0 matches
[SqlMetadataService] Pattern '\bINSERT\s+INTO\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)' found 0 matches
[SqlMetadataService] Total tables extracted: 1 - users
[EngineService] Metadata extraction failed: Connect Timeout expired.
[EngineService] Execution failed: Không thể phân tích database schema: Connect Timeout expired.
[EngineService] Exception type: InvalidOperationException
[EngineService] Inner exception: Connect Timeout expired.
\ud83d\udcc4 Report written to: engine_proof_report.txt
=== ENGINE FUNCTIONALITY PROOF REPORT ===
Generated at: 7/6/2025 10:59:03 AM

TEST RESULTS:
Success: False
Generated Records: 0
Execution Time: 120001ms
Error Message: Không thể phân tích database schema: Connect Timeout expired.
Generated INSERT Statements: 0

⚠️ CONCLUSION: ENGINE CÓ THỂ CẦN KIỂM TRA THÊM</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="23de4ab1-9104-46c9-9719-9bff186190a3" testId="8b41ed37-8e2a-590a-c55d-20fbb8244176" testName="AddRecentQuery_ShouldLimitTo20Queries" computerName="cursor" duration="00:00:00.0042147" startTime="2025-07-06T10:57:02.3690287+00:00" endTime="2025-07-06T10:57:02.3733730+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="23de4ab1-9104-46c9-9719-9bff186190a3" />
    <UnitTestResult executionId="100e687d-9af1-4564-b51a-5cd3b4133b02" testId="d561a39e-b3ae-5830-d2e6-51256ca89cb1" testName="TestExtractConstraints_ComplexParentheses_ShouldHandleNestedLogic" computerName="cursor" duration="00:00:00.0022364" startTime="2025-07-06T11:01:03.9384118+00:00" endTime="2025-07-06T11:01:03.9407200+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="100e687d-9af1-4564-b51a-5cd3b4133b02">
      <Output>
        <StdOut>=== COMPLEX PARENTHESES TEST RESULTS ===
Total Constraints: 6
LIKE Patterns: 2
WHERE Constraints: 3
LIKE: u.first_name LIKE '%John%'
LIKE: u.last_name LIKE '%John%'
WHERE: u.department = 'IT'
WHERE: u.department = 'HR'
WHERE: u.status = 'INACTIVE'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="b64d8ef4-33c7-46d8-adc0-1f24a9dc45d2" testId="52fb0373-feef-f3e6-6b7c-b0a6051bc365" testName="TC002_20_ExecuteQueryWithTestDataAsync_SimpleSQL_WithGeminiAI" computerName="cursor" duration="00:00:00.0058210" startTime="2025-07-06T10:57:03.7274650+00:00" endTime="2025-07-06T10:57:03.7334138+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="b64d8ef4-33c7-46d8-adc0-1f24a9dc45d2">
      <Output>
        <StdOut>[CentralizedLoggingManager] Initialized. Logs directory: /workspace/logs
[CentralizedLoggingManager] Config source: default
[EngineService] Centralized logs directory: /workspace/logs
=== TEST: AI-Enhanced Simple SQL với Gemini AI ===
SQL: SELECT * FROM users WHERE is_active = 1 ORDER BY created_at DESC LIMIT 10
Expected: Generate additional intelligent records để reach DesiredRecordCount
Gemini API Key Available: False
[EngineService] Starting execution for MySQL
[EngineService] Analyzing query: 73 chars
[SqlMetadataService] Extracting tables from query: 73 chars
[SqlMetadataService] Clean SQL: SELECT * FROM users WHERE is_active = 1 ORDER BY created_at DESC LIMIT 10...
[SqlMetadataService] Pattern '\bFROM\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)(?:\s+(?:AS\s+)?(\w+))?' found 1 matches
[SqlMetadataService] Match: 'FROM users WHERE'
[SqlMetadataService] Found table: users
[SqlMetadataService] Pattern '\b(?:INNER\s+|LEFT\s+|RIGHT\s+|FULL\s+|OUTER\s+)?JOIN\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)(?:\s+(?:AS\s+)?(\w+))?' found 0 matches
[SqlMetadataService] Pattern '\bINTO\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)' found 0 matches
[SqlMetadataService] Pattern '\bUPDATE\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)' found 0 matches
[SqlMetadataService] Pattern '\bINSERT\s+INTO\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)' found 0 matches
[SqlMetadataService] Total tables extracted: 1 - users
[EngineService] Metadata extraction failed: Unable to connect to any of the specified MySQL hosts.
[EngineService] Execution failed: Không thể phân tích database schema: Unable to connect to any of the specified MySQL hosts.
[EngineService] Exception type: InvalidOperationException
[EngineService] Inner exception: Unable to connect to any of the specified MySQL hosts.

Result Success: False
Generated Records (INSERT statements): 0
Final Query Results (rows returned): 0
Execution Time: 1ms
Expected error (quota exceeded hoặc FK constraint): Không thể phân tích database schema: Unable to connect to any of the specified MySQL hosts.
⚠️ Connection error - this is EXPECTED without real MySQL server access
❌ Test completed with expected error - ENGINE FUNCTIONALITY VERIFIED</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="628effda-81d6-423a-bc53-3e01fff6877f" testId="2e266685-4e99-7827-1a5f-a9f5bc730d79" testName="TC015_DateTimeFunctions_WithCalculations_ShouldHandleTemporalData" computerName="cursor" duration="00:00:00.0055161" startTime="2025-07-06T11:01:03.8202161+00:00" endTime="2025-07-06T11:01:03.8258446+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="628effda-81d6-423a-bc53-3e01fff6877f">
      <Output>
        <StdOut>[CentralizedLoggingManager] Initialized. Logs directory: /workspace/logs
[CentralizedLoggingManager] Config source: default
[EngineService] Centralized logs directory: /workspace/logs
=== TC015: Date/Time Functions Test ===
Keywords: YEAR, MONTH, DAYOFWEEK, TIMESTAMPDIFF, DATE_ADD, DATE_SUB, STR_TO_DATE, DATE_FORMAT, NOW()
[EngineService] Starting execution for MySQL
[EngineService] Analyzing query: 1233 chars
[SqlMetadataService] Extracting tables from query: 1233 chars
[SqlMetadataService] Clean SQL: 
            SELECT u.id, u.username, u.hire_date, u.date_of_birth,
                   YEAR(u.date_of_birth) as birth_year,
                   MONTH(u.hire_date) as hire_month,
                   DAYO...
[SqlMetadataService] Pattern '\bFROM\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)(?:\s+(?:AS\s+)?(\w+))?' found 1 matches
[SqlMetadataService] Match: 'FROM users u'
[SqlMetadataService] Found table: users
[SqlMetadataService] Pattern '\b(?:INNER\s+|LEFT\s+|RIGHT\s+|FULL\s+|OUTER\s+)?JOIN\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)(?:\s+(?:AS\s+)?(\w+))?' found 0 matches
[SqlMetadataService] Pattern '\bINTO\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)' found 0 matches
[SqlMetadataService] Pattern '\bUPDATE\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)' found 0 matches
[SqlMetadataService] Pattern '\bINSERT\s+INTO\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)' found 0 matches
[SqlMetadataService] Total tables extracted: 1 - users
[EngineService] Metadata extraction failed: Unable to connect to any of the specified MySQL hosts.
[EngineService] Execution failed: Không thể phân tích database schema: Unable to connect to any of the specified MySQL hosts.
[EngineService] Exception type: InvalidOperationException
[EngineService] Inner exception: Unable to connect to any of the specified MySQL hosts.
Result Success: False
Generated Records: 0
Expected error for date/time functions: Không thể phân tích database schema: Unable to connect to any of the specified MySQL hosts.</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="0322765a-f3d6-4498-a8ef-3787328c321c" testId="4d299dc1-4133-b328-b004-81a79c37f47d" testName="ExecuteQueryWithTestDataAsync_SimpleSQL_MustMatchExactRecordCount" computerName="cursor" duration="00:00:00.0059647" startTime="2025-07-06T11:03:06.4344879+00:00" endTime="2025-07-06T11:03:06.4407491+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="0322765a-f3d6-4498-a8ef-3787328c321c">
      <Output>
        <StdOut>[CentralizedLoggingManager] Initialized. Logs directory: /workspace/logs
[CentralizedLoggingManager] Config source: default
[EngineService] Centralized logs directory: /workspace/logs
=== STRICT TEST: Expected Records = 15 ===
SQL: SELECT * FROM users WHERE is_active = 1 ORDER BY created_at DESC LIMIT 10
[EngineService] Starting execution for MySQL
[EngineService] Analyzing query: 73 chars
[SqlMetadataService] Extracting tables from query: 73 chars
[SqlMetadataService] Clean SQL: SELECT * FROM users WHERE is_active = 1 ORDER BY created_at DESC LIMIT 10...
[SqlMetadataService] Pattern '\bFROM\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)(?:\s+(?:AS\s+)?(\w+))?' found 1 matches
[SqlMetadataService] Match: 'FROM users WHERE'
[SqlMetadataService] Found table: users
[SqlMetadataService] Pattern '\b(?:INNER\s+|LEFT\s+|RIGHT\s+|FULL\s+|OUTER\s+)?JOIN\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)(?:\s+(?:AS\s+)?(\w+))?' found 0 matches
[SqlMetadataService] Pattern '\bINTO\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)' found 0 matches
[SqlMetadataService] Pattern '\bUPDATE\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)' found 0 matches
[SqlMetadataService] Pattern '\bINSERT\s+INTO\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)' found 0 matches
[SqlMetadataService] Total tables extracted: 1 - users
[EngineService] Metadata extraction failed: Unable to connect to any of the specified MySQL hosts.
[EngineService] Execution failed: Không thể phân tích database schema: Unable to connect to any of the specified MySQL hosts.
[EngineService] Exception type: InvalidOperationException
[EngineService] Inner exception: Unable to connect to any of the specified MySQL hosts.
Success: False
Generated Records: 0
Expected Records: 15
Match: False</StdOut>
        <ErrorInfo>
          <Message>Assert.Fail failed. Test FAILED: Không thể phân tích database schema: Unable to connect to any of the specified MySQL hosts.</Message>
          <StackTrace>   at SqlTestDataGenerator.Tests.RecordCountStrictVerificationTests.ExecuteQueryWithTestDataAsync_SimpleSQL_MustMatchExactRecordCount() in /workspace/SqlTestDataGenerator.Tests/RecordCountStrictVerificationTests.cs:line 68
</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="8065210c-d262-482b-86c3-d64a59bf5d30" testId="ca04d0d9-5902-f099-e24d-45ba7b4a4b34" testName="GenerateBogusData_UserRoles_ShouldNotHaveDuplicateKeys" computerName="cursor" duration="00:00:00.0051097" startTime="2025-07-06T10:57:03.6486774+00:00" endTime="2025-07-06T10:57:03.6540400+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="8065210c-d262-482b-86c3-d64a59bf5d30">
      <Output>
        <StdOut>[DEBUG] Table companies has 3 columns:
[DEBUG] Column: id, IsIdentity: True, IsGenerated: False, DefaultValue: ''
[DEBUG] Column: name, IsIdentity: False, IsGenerated: False, DefaultValue: ''
[DEBUG] Column: code, IsIdentity: False, IsGenerated: False, DefaultValue: ''
[DEBUG-T021] Filtered columns for companies: 2 columns (from 3 total)
[DEBUG-T021] Excluded columns: id(Identity:True,Generated:False)
[DEBUG-T021] Included columns: name, code
[DEBUG-T021] Generated SQL for companies: INSERT INTO `companies` (`name`, `code`) VALUES ('Marisol Schulist', 'CODE_16797_001');
[DEBUG-T021] Generated SQL for companies: INSERT INTO `companies` (`name`, `code`) VALUES ('Emiliano Jacobs', 'CODE_17390_002');
[DEBUG-T021] Generated SQL for companies: INSERT INTO `companies` (`name`, `code`) VALUES ('Francesco Funk', 'CODE_17766_003');
[DEBUG-T021] Generated SQL for companies: INSERT INTO `companies` (`name`, `code`) VALUES ('Jevon Mertz', 'CODE_18064_004');
[DEBUG-T021] Generated SQL for companies: INSERT INTO `companies` (`name`, `code`) VALUES ('Ethan Jakubowski', 'CODE_18330_005');
[DEBUG-T021] Generated SQL for companies: INSERT INTO `companies` (`name`, `code`) VALUES ('Nicklaus Zemlak', 'CODE_18584_006');
[DEBUG-T021] Generated SQL for companies: INSERT INTO `companies` (`name`, `code`) VALUES ('Dayna Stroman', 'CODE_18843_007');
[DEBUG-T021] Generated SQL for companies: INSERT INTO `companies` (`name`, `code`) VALUES ('Jayson Kessler', 'CODE_19252_008');
[DEBUG-T021] Generated SQL for companies: INSERT INTO `companies` (`name`, `code`) VALUES ('Savion Morar', 'CODE_19498_009');
[DEBUG-T021] Generated SQL for companies: INSERT INTO `companies` (`name`, `code`) VALUES ('Brendan Koss', 'CODE_19754_010');
[DEBUG] Table roles has 3 columns:
[DEBUG] Column: id, IsIdentity: True, IsGenerated: False, DefaultValue: ''
[DEBUG] Column: name, IsIdentity: False, IsGenerated: False, DefaultValue: ''
[DEBUG] Column: code, IsIdentity: False, IsGenerated: False, DefaultValue: ''
[DEBUG-T021] Filtered columns for roles: 2 columns (from 3 total)
[DEBUG-T021] Excluded columns: id(Identity:True,Generated:False)
[DEBUG-T021] Included columns: name, code
[DEBUG-T021] Generated SQL for roles: INSERT INTO `roles` (`name`, `code`) VALUES ('Jeff Reichert', 'C1_01DD');
[DEBUG-T021] Generated SQL for roles: INSERT INTO `roles` (`name`, `code`) VALUES ('Glenna Kunde', 'C2_FE7C');
[DEBUG-T021] Generated SQL for roles: INSERT INTO `roles` (`name`, `code`) VALUES ('Zena Dicki', 'C3_954E');
[DEBUG-T021] Generated SQL for roles: INSERT INTO `roles` (`name`, `code`) VALUES ('Einar Deckow', 'C4_416C');
[DEBUG-T021] Generated SQL for roles: INSERT INTO `roles` (`name`, `code`) VALUES ('Austin Farrell', 'C5_A59D');
[DEBUG-T021] Generated SQL for roles: INSERT INTO `roles` (`name`, `code`) VALUES ('Enos Roberts', 'C6_3794');
[DEBUG-T021] Generated SQL for roles: INSERT INTO `roles` (`name`, `code`) VALUES ('Jackie Crona', 'C7_4C0F');
[DEBUG-T021] Generated SQL for roles: INSERT INTO `roles` (`name`, `code`) VALUES ('Kasandra Rempel', 'C8_73A7');
[DEBUG-T021] Generated SQL for roles: INSERT INTO `roles` (`name`, `code`) VALUES ('Amara Rodriguez', 'C9_C7A2');
[DEBUG-T021] Generated SQL for roles: INSERT INTO `roles` (`name`, `code`) VALUES ('Orlando Leffler', 'C10_5BEB');
[DEBUG] Table users has 4 columns:
[DEBUG] Column: id, IsIdentity: True, IsGenerated: False, DefaultValue: ''
[DEBUG] Column: username, IsIdentity: False, IsGenerated: False, DefaultValue: ''
[DEBUG] Column: email, IsIdentity: False, IsGenerated: False, DefaultValue: ''
[DEBUG] Column: company_id, IsIdentity: False, IsGenerated: False, DefaultValue: ''
[DEBUG-T021] Filtered columns for users: 3 columns (from 4 total)
[DEBUG-T021] Excluded columns: id(Identity:True,Generated:False)
[DEBUG-T021] Included columns: username, email, company_id
[DEBUG-T021] Generated SQL for users: INSERT INTO `users` (`username`, `email`, `company_id`) VALUES ('Hal57', 'Emil_Bernhard@hotmail.com', 2);
[DEBUG-T021] Generated SQL for users: INSERT INTO `users` (`username`, `email`, `company_id`) VALUES ('Geraldine47', 'Newton_Ruecker@hotmail.com', 3);
[DEBUG-T021] Generated SQL for users: INSERT INTO `users` (`username`, `email`, `company_id`) VALUES ('Edyth_Huel41', 'Lonny94@yahoo.com', 4);
[DEBUG-T021] Generated SQL for users: INSERT INTO `users` (`username`, `email`, `company_id`) VALUES ('Adah.Carroll', 'Estelle.Greenholt@gmail.com', 5);
[DEBUG-T021] Generated SQL for users: INSERT INTO `users` (`username`, `email`, `company_id`) VALUES ('Houston_Bechtelar91', 'Angelo.Hettinger22@hotmail.com', 6);
[DEBUG-T021] Generated SQL for users: INSERT INTO `users` (`username`, `email`, `company_id`) VALUES ('Rico73', 'Janick37@yahoo.com', 7);
[DEBUG-T021] Generated SQL for users: INSERT INTO `users` (`username`, `email`, `company_id`) VALUES ('Marlin_Cronin3', 'Boyd_Goodwin@gmail.com', 8);
[DEBUG-T021] Generated SQL for users: INSERT INTO `users` (`username`, `email`, `company_id`) VALUES ('Abdullah_Schmeler13', 'Veda.Zboncak68@gmail.com', 9);
[DEBUG-T021] Generated SQL for users: INSERT INTO `users` (`username`, `email`, `company_id`) VALUES ('Estell_Kreiger', 'Lincoln64@gmail.com', 10);
[DEBUG-T021] Generated SQL for users: INSERT INTO `users` (`username`, `email`, `company_id`) VALUES ('Krystina_Hickle', 'Chaim.Connelly42@yahoo.com', 1);
[DEBUG] Table user_roles has 6 columns:
[DEBUG] Column: user_id, IsIdentity: False, IsGenerated: False, DefaultValue: ''
[DEBUG] Column: role_id, IsIdentity: False, IsGenerated: False, DefaultValue: ''
[DEBUG] Column: assigned_by, IsIdentity: False, IsGenerated: False, DefaultValue: ''
[DEBUG] Column: assigned_at, IsIdentity: False, IsGenerated: False, DefaultValue: ''
[DEBUG] Column: expires_at, IsIdentity: False, IsGenerated: False, DefaultValue: ''
[DEBUG] Column: is_active, IsIdentity: False, IsGenerated: False, DefaultValue: ''
[DEBUG-T021] Filtered columns for user_roles: 6 columns (from 6 total)
[DEBUG-T021] Excluded columns: 
[DEBUG-T021] Included columns: user_id, role_id, assigned_by, assigned_at, expires_at, is_active
[DATE-FALLBACK] user_roles.expires_at: Generated 2025-07-23 12:23:14 (within 60 days default)
[DEBUG] Generated SQL for user_roles: INSERT INTO `user_roles` (`user_id`, `role_id`, `assigned_by`, `assigned_at`, `expires_at`, `is_active`) VALUES (2, 5, 8, '2024-10-21 07:22:30', '2025-07-23 12:23:14', 37);
[DATE-FALLBACK] user_roles.expires_at: Generated 2025-07-22 10:54:30 (within 60 days default)
[DEBUG] Generated SQL for user_roles: INSERT INTO `user_roles` (`user_id`, `role_id`, `assigned_by`, `assigned_at`, `expires_at`, `is_active`) VALUES (3, 6, 9, '2024-09-03 22:47:31', '2025-07-22 10:54:30', 18);
[DATE-FALLBACK] user_roles.expires_at: Generated 2025-08-03 04:08:51 (within 60 days default)
[DEBUG] Generated SQL for user_roles: INSERT INTO `user_roles` (`user_id`, `role_id`, `assigned_by`, `assigned_at`, `expires_at`, `is_active`) VALUES (4, 7, 10, '2025-03-10 22:42:41', '2025-08-03 04:08:51', 48);
[DATE-FALLBACK] user_roles.expires_at: Generated 2025-07-29 17:28:34 (within 60 days default)
[DEBUG] Generated SQL for user_roles: INSERT INTO `user_roles` (`user_id`, `role_id`, `assigned_by`, `assigned_at`, `expires_at`, `is_active`) VALUES (5, 8, 1, '2025-01-28 02:55:24', '2025-07-29 17:28:34', 13);
[DATE-FALLBACK] user_roles.expires_at: Generated 2025-07-16 14:24:21 (within 60 days default)
[DEBUG] Generated SQL for user_roles: INSERT INTO `user_roles` (`user_id`, `role_id`, `assigned_by`, `assigned_at`, `expires_at`, `is_active`) VALUES (6, 9, 2, '2025-06-22 18:05:36', '2025-07-16 14:24:21', 36);
[DATE-FALLBACK] user_roles.expires_at: Generated 2025-08-19 00:55:26 (within 60 days default)
[DEBUG] Generated SQL for user_roles: INSERT INTO `user_roles` (`user_id`, `role_id`, `assigned_by`, `assigned_at`, `expires_at`, `is_active`) VALUES (7, 10, 3, '2025-02-07 20:47:01', '2025-08-19 00:55:26', 18);
[DATE-FALLBACK] user_roles.expires_at: Generated 2025-07-18 11:58:58 (within 60 days default)
[DEBUG] Generated SQL for user_roles: INSERT INTO `user_roles` (`user_id`, `role_id`, `assigned_by`, `assigned_at`, `expires_at`, `is_active`) VALUES (8, 1, 4, '2024-10-23 22:46:12', '2025-07-18 11:58:58', 17);
[DATE-FALLBACK] user_roles.expires_at: Generated 2025-08-02 22:06:52 (within 60 days default)
[DEBUG] Generated SQL for user_roles: INSERT INTO `user_roles` (`user_id`, `role_id`, `assigned_by`, `assigned_at`, `expires_at`, `is_active`) VALUES (9, 2, 5, '2024-07-26 17:46:05', '2025-08-02 22:06:52', 38);
[DATE-FALLBACK] user_roles.expires_at: Generated 2025-07-08 17:57:59 (within 60 days default)
[DEBUG] Generated SQL for user_roles: INSERT INTO `user_roles` (`user_id`, `role_id`, `assigned_by`, `assigned_at`, `expires_at`, `is_active`) VALUES (10, 3, 6, '2025-05-14 18:34:27', '2025-07-08 17:57:59', 12);
[DATE-FALLBACK] user_roles.expires_at: Generated 2025-07-09 04:03:41 (within 60 days default)
[DEBUG] Generated SQL for user_roles: INSERT INTO `user_roles` (`user_id`, `role_id`, `assigned_by`, `assigned_at`, `expires_at`, `is_active`) VALUES (1, 4, 7, '2024-08-23 20:47:26', '2025-07-09 04:03:41', 74);
Generated 10 user_roles INSERT statements:
  2-5 -&gt; INSERT INTO `user_roles` (`user_id`, `role_id`, `assigned_by`, `assigned_at`, `expires_at`, `is_active`) VALUES (2, 5, 8, '2024-10-21 07:22:30', '2025-07-23 12:23:14', 37);
  3-6 -&gt; INSERT INTO `user_roles` (`user_id`, `role_id`, `assigned_by`, `assigned_at`, `expires_at`, `is_active`) VALUES (3, 6, 9, '2024-09-03 22:47:31', '2025-07-22 10:54:30', 18);
  4-7 -&gt; INSERT INTO `user_roles` (`user_id`, `role_id`, `assigned_by`, `assigned_at`, `expires_at`, `is_active`) VALUES (4, 7, 10, '2025-03-10 22:42:41', '2025-08-03 04:08:51', 48);
  5-8 -&gt; INSERT INTO `user_roles` (`user_id`, `role_id`, `assigned_by`, `assigned_at`, `expires_at`, `is_active`) VALUES (5, 8, 1, '2025-01-28 02:55:24', '2025-07-29 17:28:34', 13);
  6-9 -&gt; INSERT INTO `user_roles` (`user_id`, `role_id`, `assigned_by`, `assigned_at`, `expires_at`, `is_active`) VALUES (6, 9, 2, '2025-06-22 18:05:36', '2025-07-16 14:24:21', 36);
  7-10 -&gt; INSERT INTO `user_roles` (`user_id`, `role_id`, `assigned_by`, `assigned_at`, `expires_at`, `is_active`) VALUES (7, 10, 3, '2025-02-07 20:47:01', '2025-08-19 00:55:26', 18);
  8-1 -&gt; INSERT INTO `user_roles` (`user_id`, `role_id`, `assigned_by`, `assigned_at`, `expires_at`, `is_active`) VALUES (8, 1, 4, '2024-10-23 22:46:12', '2025-07-18 11:58:58', 17);
  9-2 -&gt; INSERT INTO `user_roles` (`user_id`, `role_id`, `assigned_by`, `assigned_at`, `expires_at`, `is_active`) VALUES (9, 2, 5, '2024-07-26 17:46:05', '2025-08-02 22:06:52', 38);
  10-3 -&gt; INSERT INTO `user_roles` (`user_id`, `role_id`, `assigned_by`, `assigned_at`, `expires_at`, `is_active`) VALUES (10, 3, 6, '2025-05-14 18:34:27', '2025-07-08 17:57:59', 12);
  1-4 -&gt; INSERT INTO `user_roles` (`user_id`, `role_id`, `assigned_by`, `assigned_at`, `expires_at`, `is_active`) VALUES (1, 4, 7, '2024-08-23 20:47:26', '2025-07-09 04:03:41', 74);
✅ SUCCESS: No duplicate keys found in user_roles table</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="9146419b-3709-418a-9f00-3c510cb099ec" testId="ef360172-a68a-6348-fde5-8601fa099fa3" testName="ExecuteQueryWithTestDataAsync_WithValidConnection_ShouldCompleteWorkflow" computerName="cursor" duration="00:00:00.0050947" startTime="2025-07-06T10:57:02.1588567+00:00" endTime="2025-07-06T10:57:02.1640648+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="9146419b-3709-418a-9f00-3c510cb099ec">
      <Output>
        <StdOut>[CentralizedLoggingManager] Initialized. Logs directory: /workspace/logs
[CentralizedLoggingManager] Config source: default
[EngineService] Centralized logs directory: /workspace/logs
[EngineService] Starting execution for MySQL
[EngineService] Analyzing query: 22 chars
[SqlMetadataService] Extracting tables from query: 22 chars
[SqlMetadataService] Clean SQL: SELECT 1 as test_value...
[SqlMetadataService] Pattern '\bFROM\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)(?:\s+(?:AS\s+)?(\w+))?' found 0 matches
[SqlMetadataService] Pattern '\b(?:INNER\s+|LEFT\s+|RIGHT\s+|FULL\s+|OUTER\s+)?JOIN\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)(?:\s+(?:AS\s+)?(\w+))?' found 0 matches
[SqlMetadataService] Pattern '\bINTO\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)' found 0 matches
[SqlMetadataService] Pattern '\bUPDATE\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)' found 0 matches
[SqlMetadataService] Pattern '\bINSERT\s+INTO\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)' found 0 matches
[SqlMetadataService] No tables found with complex patterns, trying simple approach...
[SqlMetadataService] Simple pattern '\bFROM\s+(?:(\w+)|`([^`]+)`)' found 0 matches
[SqlMetadataService] Simple pattern '\bJOIN\s+(?:(\w+)|`([^`]+)`)' found 0 matches
[SqlMetadataService] Simple pattern '\bINTO\s+(?:(\w+)|`([^`]+)`)' found 0 matches
[SqlMetadataService] Simple pattern '\bUPDATE\s+(?:(\w+)|`([^`]+)`)' found 0 matches
[SqlMetadataService] Total tables extracted: 0 - 
[SqlMetadataService] ❌ NO TABLES FOUND! SQL Query: SELECT 1 as test_value
[SqlMetadataService] Exception in ExtractTablesFromQuery: System.InvalidOperationException: Không thể xác định bảng nào từ SQL query. Vui lòng kiểm tra lại câu truy vấn.
   at SqlTestDataGenerator.Core.Services.SqlMetadataService.ExtractTablesFromQuery(String sqlQuery) in /workspace/SqlTestDataGenerator.Core/Services/SqlMetadataService.cs:line 344
[EngineService] Metadata extraction failed: Lỗi phân tích SQL query: Không thể xác định bảng nào từ SQL query. Vui lòng kiểm tra lại câu truy vấn.
[EngineService] Execution failed: Không thể phân tích database schema: Lỗi phân tích SQL query: Không thể xác định bảng nào từ SQL query. Vui lòng kiểm tra lại câu truy vấn.
[EngineService] Exception type: InvalidOperationException
[EngineService] Inner exception: Lỗi phân tích SQL query: Không thể xác định bảng nào từ SQL query. Vui lòng kiểm tra lại câu truy vấn.
❌ Workflow failed: Không thể phân tích database schema: Lỗi phân tích SQL query: Không thể xác định bảng nào từ SQL query. Vui lòng kiểm tra lại câu truy vấn.</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="e34ed36b-41d9-41fd-9416-2ccdb99b8350" testId="21ece978-a12a-f4c1-72a3-37e93bcaa880" testName="ExtractExistsConstraints_MultipleExistsAndNotExists_ShouldExtractAllCorrectly" computerName="cursor" duration="00:00:00.0025868" startTime="2025-07-06T11:01:03.8735904+00:00" endTime="2025-07-06T11:01:03.8762718+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="e34ed36b-41d9-41fd-9416-2ccdb99b8350" />
    <UnitTestResult executionId="5d723ff5-b6ff-4e1f-81c7-9821b20d94d3" testId="c0e01d56-99bd-dc71-a75c-8c6658a29dc2" testName="ExtractExistsConstraints_SimpleNotExists_ShouldExtractCorrectly" computerName="cursor" duration="00:00:00.0016330" startTime="2025-07-06T11:01:03.8648008+00:00" endTime="2025-07-06T11:01:03.8665219+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="5d723ff5-b6ff-4e1f-81c7-9821b20d94d3" />
    <UnitTestResult executionId="a4d10525-4a82-490c-8e0e-2f390af476cf" testId="fd5281bd-ebeb-6ce9-7bce-991b4cce7130" testName="ParseVietnameseQuery_CaseStatement_ShouldHandleUTF8" computerName="cursor" duration="00:00:00.0012164" startTime="2025-07-06T11:03:06.4992968+00:00" endTime="2025-07-06T11:03:06.5005540+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="a4d10525-4a82-490c-8e0e-2f390af476cf">
      <Output>
        <StdOut>[SqlMetadataService] Extracting tables from query: 280 chars
[SqlMetadataService] Clean SQL: SELECT u.id, u.username, CASE WHEN u.is_active = 0 THEN 'Đã nghỉ việc' WHEN ur.expires_at &lt;= DATE_ADD(NOW(), INTERVAL 30 DAY) THEN 'Sắp hết hạn vai trò' ELSE 'Đang làm việc' END AS work_status FROM us...
[SqlMetadataService] Pattern '\bFROM\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)(?:\s+(?:AS\s+)?(\w+))?' found 1 matches
[SqlMetadataService] Match: 'FROM users u'
[SqlMetadataService] Found table: users
[SqlMetadataService] Pattern '\b(?:INNER\s+|LEFT\s+|RIGHT\s+|FULL\s+|OUTER\s+)?JOIN\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)(?:\s+(?:AS\s+)?(\w+))?' found 1 matches
[SqlMetadataService] Match: 'JOIN user_roles ur'
[SqlMetadataService] Found table: user_roles
[SqlMetadataService] Pattern '\bINTO\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)' found 0 matches
[SqlMetadataService] Pattern '\bUPDATE\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)' found 0 matches
[SqlMetadataService] Pattern '\bINSERT\s+INTO\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)' found 0 matches
[SqlMetadataService] Total tables extracted: 2 - users, user_roles
JOIN Debug: Clean query = 'SELECT u.id, u.username, CASE WHEN u.is_active = 0 THEN 'Đã nghỉ việc' WHEN ur.expires_at &lt;= DATE_ADD(NOW(), INTERVAL 30 DAY) THEN 'Sắp hết hạn vai trò' ELSE 'Đang làm việc' END AS work_status FROM users u JOIN user_roles ur ON u.id = ur.user_id WHERE u.first_name LIKE '%Phương%''
JOIN Debug: Pattern = '(?:INNER\s+|LEFT\s+|RIGHT\s+|FULL\s+|OUTER\s+)?JOIN\s+(\w+)\s+(\w+)\s+ON\s+([^()]+?)(?=\s+(?:INNER|LEFT|RIGHT|FULL|OUTER|WHERE|ORDER|GROUP|LIMIT|$)|$)'
JOIN Debug: Found 1 JOIN matches
JOIN Debug: Match found - Table: 'user_roles', Alias: 'ur', OnClause: 'u.id = ur.user_id'
JOIN Debug: Condition pattern match success: True
Found JOIN: u.id = ur.user_id
✅ Vietnamese LIKE condition: first_name LIKE Phương</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="5497cb99-66cd-4fdb-9c61-7ad6d98c0504" testId="7ec98a93-65bc-1691-fbcb-29f0384b3e5f" testName="TC010_AggregateFunction_WithGroupBy_ShouldGenerateData" computerName="cursor" duration="00:00:00.0048330" startTime="2025-07-06T11:01:03.7939978+00:00" endTime="2025-07-06T11:01:03.7989266+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="5497cb99-66cd-4fdb-9c61-7ad6d98c0504">
      <Output>
        <StdOut>[CentralizedLoggingManager] Initialized. Logs directory: /workspace/logs
[CentralizedLoggingManager] Config source: default
[EngineService] Centralized logs directory: /workspace/logs
=== TC010: Aggregate Functions Test ===
Keywords: COUNT, SUM, AVG, MAX, MIN, GROUP BY, HAVING, DISTINCT
[EngineService] Starting execution for MySQL
[EngineService] Analyzing query: 638 chars
[SqlMetadataService] Extracting tables from query: 638 chars
[SqlMetadataService] Clean SQL: 
            SELECT c.name as company_name,
                   COUNT(u.id) as employee_count,
                   SUM(u.salary) as total_salary,
                   AVG(u.salary) as avg_salary,
        ...
[SqlMetadataService] Pattern '\bFROM\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)(?:\s+(?:AS\s+)?(\w+))?' found 1 matches
[SqlMetadataService] Match: 'FROM users u'
[SqlMetadataService] Found table: users
[SqlMetadataService] Pattern '\b(?:INNER\s+|LEFT\s+|RIGHT\s+|FULL\s+|OUTER\s+)?JOIN\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)(?:\s+(?:AS\s+)?(\w+))?' found 1 matches
[SqlMetadataService] Match: 'INNER JOIN companies c'
[SqlMetadataService] Found table: companies
[SqlMetadataService] Pattern '\bINTO\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)' found 0 matches
[SqlMetadataService] Pattern '\bUPDATE\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)' found 0 matches
[SqlMetadataService] Pattern '\bINSERT\s+INTO\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)' found 0 matches
[SqlMetadataService] Total tables extracted: 2 - users, companies
[EngineService] Metadata extraction failed: Unable to connect to any of the specified MySQL hosts.
[EngineService] Execution failed: Không thể phân tích database schema: Unable to connect to any of the specified MySQL hosts.
[EngineService] Exception type: InvalidOperationException
[EngineService] Inner exception: Unable to connect to any of the specified MySQL hosts.
Result Success: False
Generated Records: 0
Expected error for aggregate query: Không thể phân tích database schema: Unable to connect to any of the specified MySQL hosts.</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="2506d76b-0783-44d6-aefc-5dce7f7e7893" testId="20e93dd1-82ff-4a3f-b298-50de6537d959" testName="ExecuteQueryWithTestDataAsync_VowisSQL_ShouldNotProduceDuplicateKeys" computerName="cursor" duration="00:00:00.0102427" startTime="2025-07-06T11:01:03.9565817+00:00" endTime="2025-07-06T11:01:03.9670138+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="2506d76b-0783-44d6-aefc-5dce7f7e7893">
      <Output>
        <StdOut>[CentralizedLoggingManager] Initialized. Logs directory: /workspace/logs
[CentralizedLoggingManager] Config source: default
[EngineService] Centralized logs directory: /workspace/logs
\ud83e\uddf9 Cleaning up existing data...
⚠️ Cleanup warning: Unable to connect to any of the specified MySQL hosts.
\ud83c\udfaf Testing Vowis Business SQL with AI generation...
[EngineService] Starting execution for MySQL
[EngineService] Analyzing query: 1074 chars
[SqlMetadataService] Extracting tables from query: 1074 chars
[SqlMetadataService] Clean SQL: 
        SELECT u.id, u.username, u.first_name, u.last_name, u.email, u.date_of_birth, u.salary, u.department, u.hire_date, 
               c.NAME AS company_name, c.code AS company_code, r.NAME AS ro...
[SqlMetadataService] Pattern '\bFROM\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)(?:\s+(?:AS\s+)?(\w+))?' found 1 matches
[SqlMetadataService] Match: 'FROM users u'
[SqlMetadataService] Found table: users
[SqlMetadataService] Pattern '\b(?:INNER\s+|LEFT\s+|RIGHT\s+|FULL\s+|OUTER\s+)?JOIN\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)(?:\s+(?:AS\s+)?(\w+))?' found 3 matches
[SqlMetadataService] Match: 'INNER JOIN companies c'
[SqlMetadataService] Found table: companies
[SqlMetadataService] Match: 'INNER JOIN user_roles ur'
[SqlMetadataService] Found table: user_roles
[SqlMetadataService] Match: 'INNER JOIN roles r'
[SqlMetadataService] Found table: roles
[SqlMetadataService] Pattern '\bINTO\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)' found 0 matches
[SqlMetadataService] Pattern '\bUPDATE\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)' found 0 matches
[SqlMetadataService] Pattern '\bINSERT\s+INTO\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)' found 0 matches
[SqlMetadataService] Total tables extracted: 4 - users, companies, user_roles, roles
[EngineService] Metadata extraction failed: Unable to connect to any of the specified MySQL hosts.
[EngineService] Execution failed: Không thể phân tích database schema: Unable to connect to any of the specified MySQL hosts.
[EngineService] Exception type: InvalidOperationException
[EngineService] Inner exception: Unable to connect to any of the specified MySQL hosts.
❌ Exception occurred: Assert.IsTrue failed. ❌ Operation failed: Không thể phân tích database schema: Unable to connect to any of the specified MySQL hosts.</StdOut>
        <ErrorInfo>
          <Message>Assert.IsTrue failed. ❌ Operation failed: Không thể phân tích database schema: Unable to connect to any of the specified MySQL hosts.</Message>
          <StackTrace>   at SqlTestDataGenerator.Tests.MySQLIntegrationDuplicateKeyTests.ExecuteQueryWithTestDataAsync_VowisSQL_ShouldNotProduceDuplicateKeys() in /workspace/SqlTestDataGenerator.Tests/MySQLIntegrationDuplicateKeyTests.cs:line 75
</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="3f350519-3f68-4ee0-97c6-d11249f94195" testId="3087e7cd-ea9d-56e0-22de-fd46d7c32d6b" testName="GetConversionSuggestions_InvalidQuery_ShouldReturnSuggestions" computerName="cursor" duration="00:00:00.0013249" startTime="2025-07-06T11:01:03.9542086+00:00" endTime="2025-07-06T11:01:03.9556095+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="3f350519-3f68-4ee0-97c6-d11249f94195">
      <Output>
        <StdOut>✅ Found 2 conversion suggestions
   - Convert datetime() to MySQL DATE_ADD/DATE_SUB: datetime('now', '+30 days') -&gt; DATE_ADD(NOW(), INTERVAL 30 DAY)
   - Convert substr() to MySQL SUBSTRING(): substr(name, 1, 5) -&gt; SUBSTRING(name, 1, 5)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="b98826ed-1881-49c5-872e-92531fc542e3" testId="d8a2d2ae-737f-6b91-1529-4bb418d9ea60" testName="ExtractTablesFromQuery_ComplexSQL_ShouldReturnAllTables" computerName="cursor" duration="00:00:00.0002797" startTime="2025-07-06T10:57:02.1950417+00:00" endTime="2025-07-06T10:57:02.1955360+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="b98826ed-1881-49c5-872e-92531fc542e3">
      <Output>
        <StdOut>[SqlMetadataService] Extracting tables from query: 1479 chars
[SqlMetadataService] Clean SQL: 
        
        SELECT u.id
            ,u.username
            ,u.first_name
            ,u.last_name
            ,u.email
            ,u.date_of_birth
            ,u.salary
            ,u.departme...
[SqlMetadataService] Pattern '\bFROM\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)(?:\s+(?:AS\s+)?(\w+))?' found 1 matches
[SqlMetadataService] Match: 'FROM users u'
[SqlMetadataService] Found table: users
[SqlMetadataService] Pattern '\b(?:INNER\s+|LEFT\s+|RIGHT\s+|FULL\s+|OUTER\s+)?JOIN\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)(?:\s+(?:AS\s+)?(\w+))?' found 3 matches
[SqlMetadataService] Match: 'INNER JOIN companies c'
[SqlMetadataService] Found table: companies
[SqlMetadataService] Match: 'INNER JOIN user_roles ur'
[SqlMetadataService] Found table: user_roles
[SqlMetadataService] Match: 'INNER JOIN roles r'
[SqlMetadataService] Found table: roles
[SqlMetadataService] Pattern '\bINTO\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)' found 0 matches
[SqlMetadataService] Pattern '\bUPDATE\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)' found 0 matches
[SqlMetadataService] Pattern '\bINSERT\s+INTO\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)' found 0 matches
[SqlMetadataService] Total tables extracted: 4 - users, companies, user_roles, roles
Extracted tables: users, companies, user_roles, roles</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="5240ca2f-3405-4e5c-ad5e-522a5523ec7b" testId="8b3ed7f0-9282-3d91-dc55-9a522b50ee02" testName="ParseDateConditions_DateAddWithYear_ShouldParseCorrectly" computerName="cursor" duration="00:00:00.0005880" startTime="2025-07-06T11:03:06.4959558+00:00" endTime="2025-07-06T11:03:06.4965828+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="5240ca2f-3405-4e5c-ad5e-522a5523ec7b">
      <Output>
        <StdOut>[SqlMetadataService] Extracting tables from query: 83 chars
[SqlMetadataService] Clean SQL: SELECT * FROM user_roles ur WHERE ur.expires_at &lt; DATE_ADD(NOW(), INTERVAL 2 YEARS)...
[SqlMetadataService] Pattern '\bFROM\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)(?:\s+(?:AS\s+)?(\w+))?' found 1 matches
[SqlMetadataService] Match: 'FROM user_roles ur'
[SqlMetadataService] Found table: user_roles
[SqlMetadataService] Pattern '\b(?:INNER\s+|LEFT\s+|RIGHT\s+|FULL\s+|OUTER\s+)?JOIN\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)(?:\s+(?:AS\s+)?(\w+))?' found 0 matches
[SqlMetadataService] Pattern '\bINTO\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)' found 0 matches
[SqlMetadataService] Pattern '\bUPDATE\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)' found 0 matches
[SqlMetadataService] Pattern '\bINSERT\s+INTO\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)' found 0 matches
[SqlMetadataService] Total tables extracted: 1 - user_roles
JOIN Debug: Clean query = 'SELECT * FROM user_roles ur WHERE ur.expires_at &lt; DATE_ADD(NOW(), INTERVAL 2 YEARS)'
JOIN Debug: Pattern = '(?:INNER\s+|LEFT\s+|RIGHT\s+|FULL\s+|OUTER\s+)?JOIN\s+(\w+)\s+(\w+)\s+ON\s+([^()]+?)(?=\s+(?:INNER|LEFT|RIGHT|FULL|OUTER|WHERE|ORDER|GROUP|LIMIT|$)|$)'
JOIN Debug: Found 0 JOIN matches</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="faf7e03d-1b8a-4728-b9e3-5b59ca27a750" testId="70128367-1104-e472-1271-9c18ebb476f8" testName="TestCompleteWorkflow_DesiredToGeneratedToCommittedToVerified" computerName="cursor" duration="00:00:00.1159104" startTime="2025-07-06T10:57:01.8394155+00:00" endTime="2025-07-06T10:57:01.9555888+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="faf7e03d-1b8a-4728-b9e3-5b59ca27a750">
      <Output>
        <StdOut>=== COMPLETE WORKFLOW AUTOMATED TEST SETUP ===
[CentralizedLoggingManager] Created logs directory: /workspace/logs
[CentralizedLoggingManager] Initialized. Logs directory: /workspace/logs
[CentralizedLoggingManager] Config source: default
[EngineService] Centralized logs directory: /workspace/logs
=== COMPLETE WORKFLOW TEST CLEANUP ===</StdOut>
        <ErrorInfo>
          <Message>Initialization method SqlTestDataGenerator.Tests.CompleteWorkflowAutomatedTest.Setup threw exception. MySqlConnector.MySqlException: Unable to connect to any of the specified MySQL hosts..
TestCleanup method SqlTestDataGenerator.Tests.CompleteWorkflowAutomatedTest.Cleanup threw exception. MySqlConnector.MySqlException: Unable to connect to any of the specified MySQL hosts..</Message>
          <StackTrace>    at MySqlConnector.Core.ServerSession.OpenTcpSocketAsync(ConnectionSettings cs, ILoadBalancer loadBalancer, Activity activity, IOBehavior ioBehavior, CancellationToken cancellationToken) in /_/src/MySqlConnector/Core/ServerSession.cs:line 1063
   at MySqlConnector.Core.ServerSession.ConnectAsync(ConnectionSettings cs, MySqlConnection connection, Int64 startingTimestamp, ILoadBalancer loadBalancer, Activity activity, IOBehavior ioBehavior, CancellationToken cancellationToken) in /_/src/MySqlConnector/Core/ServerSession.cs:line 425
   at MySqlConnector.Core.ConnectionPool.ConnectSessionAsync(MySqlConnection connection, Action`4 logMessage, Int64 startingTimestamp, Activity activity, IOBehavior ioBehavior, CancellationToken cancellationToken) in /_/src/MySqlConnector/Core/ConnectionPool.cs:line 428
   at MySqlConnector.Core.ConnectionPool.ConnectSessionAsync(MySqlConnection connection, Action`4 logMessage, Int64 startingTimestamp, Activity activity, IOBehavior ioBehavior, CancellationToken cancellationToken) in /_/src/MySqlConnector/Core/ConnectionPool.cs:line 433
   at MySqlConnector.Core.ConnectionPool.GetSessionAsync(MySqlConnection connection, Int64 startingTimestamp, Int32 timeoutMilliseconds, Activity activity, IOBehavior ioBehavior, CancellationToken cancellationToken) in /_/src/MySqlConnector/Core/ConnectionPool.cs:line 111
   at MySqlConnector.Core.ConnectionPool.GetSessionAsync(MySqlConnection connection, Int64 startingTimestamp, Int32 timeoutMilliseconds, Activity activity, IOBehavior ioBehavior, CancellationToken cancellationToken) in /_/src/MySqlConnector/Core/ConnectionPool.cs:line 144
   at MySqlConnector.MySqlConnection.CreateSessionAsync(ConnectionPool pool, Int64 startingTimestamp, Activity activity, Nullable`1 ioBehavior, CancellationToken cancellationToken) in /_/src/MySqlConnector/MySqlConnection.cs:line 919
   at MySqlConnector.MySqlConnection.OpenAsync(Nullable`1 ioBehavior, CancellationToken cancellationToken) in /_/src/MySqlConnector/MySqlConnection.cs:line 419
   at SqlTestDataGenerator.Tests.CompleteWorkflowAutomatedTest.CreateTestDatabaseIfNotExists() in /workspace/SqlTestDataGenerator.Tests/CompleteWorkflowAutomatedTest.cs:line 184
   at SqlTestDataGenerator.Tests.CompleteWorkflowAutomatedTest.Setup() in /workspace/SqlTestDataGenerator.Tests/CompleteWorkflowAutomatedTest.cs:line 47

TestCleanup Stack Trace
   at MySqlConnector.Core.ServerSession.OpenTcpSocketAsync(ConnectionSettings cs, ILoadBalancer loadBalancer, Activity activity, IOBehavior ioBehavior, CancellationToken cancellationToken) in /_/src/MySqlConnector/Core/ServerSession.cs:line 1063
   at MySqlConnector.Core.ServerSession.ConnectAsync(ConnectionSettings cs, MySqlConnection connection, Int64 startingTimestamp, ILoadBalancer loadBalancer, Activity activity, IOBehavior ioBehavior, CancellationToken cancellationToken) in /_/src/MySqlConnector/Core/ServerSession.cs:line 425
   at MySqlConnector.Core.ConnectionPool.ConnectSessionAsync(MySqlConnection connection, Action`4 logMessage, Int64 startingTimestamp, Activity activity, IOBehavior ioBehavior, CancellationToken cancellationToken) in /_/src/MySqlConnector/Core/ConnectionPool.cs:line 428
   at MySqlConnector.Core.ConnectionPool.ConnectSessionAsync(MySqlConnection connection, Action`4 logMessage, Int64 startingTimestamp, Activity activity, IOBehavior ioBehavior, CancellationToken cancellationToken) in /_/src/MySqlConnector/Core/ConnectionPool.cs:line 433
   at MySqlConnector.Core.ConnectionPool.GetSessionAsync(MySqlConnection connection, Int64 startingTimestamp, Int32 timeoutMilliseconds, Activity activity, IOBehavior ioBehavior, CancellationToken cancellationToken) in /_/src/MySqlConnector/Core/ConnectionPool.cs:line 111
   at MySqlConnector.Core.ConnectionPool.GetSessionAsync(MySqlConnection connection, Int64 startingTimestamp, Int32 timeoutMilliseconds, Activity activity, IOBehavior ioBehavior, CancellationToken cancellationToken) in /_/src/MySqlConnector/Core/ConnectionPool.cs:line 144
   at MySqlConnector.MySqlConnection.CreateSessionAsync(ConnectionPool pool, Int64 startingTimestamp, Activity activity, Nullable`1 ioBehavior, CancellationToken cancellationToken) in /_/src/MySqlConnector/MySqlConnection.cs:line 919
   at MySqlConnector.MySqlConnection.OpenAsync(Nullable`1 ioBehavior, CancellationToken cancellationToken) in /_/src/MySqlConnector/MySqlConnection.cs:line 419
   at SqlTestDataGenerator.Tests.CompleteWorkflowAutomatedTest.CleanupTestData() in /workspace/SqlTestDataGenerator.Tests/CompleteWorkflowAutomatedTest.cs:line 243
   at SqlTestDataGenerator.Tests.CompleteWorkflowAutomatedTest.Cleanup() in /workspace/SqlTestDataGenerator.Tests/CompleteWorkflowAutomatedTest.cs:line 59
</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="4f1ee4ee-5684-4242-85bb-5b96db7f5079" testId="bf7011a5-9321-ec3e-fc18-281f6a788ac4" testName="TestExtractConstraints_InClauseSubquery_ShouldExtractSubquery" computerName="cursor" duration="00:00:00.0014754" startTime="2025-07-06T10:57:03.7061904+00:00" endTime="2025-07-06T10:57:03.7077578+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="4f1ee4ee-5684-4242-85bb-5b96db7f5079">
      <Output>
        <StdOut>=== IN CLAUSE SUBQUERY TEST RESULTS ===
IN Clause Constraints: 2
IN: u.role_id IN (SELECT id FROM active_roles WHERE level &gt; 5) - Type: SUBQUERY
IN: u.company_id IN (SELECT id FROM companies WHERE status = 'ACTIVE') - Type: SUBQUERY
✅ IN clause subquery extraction test passed</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="014f79ea-2218-4b45-8280-7cc40472932f" testId="02e43938-4bb0-1b90-d0c7-1bda28998f3a" testName="TestDifferentSQLFormats" computerName="cursor" duration="00:00:00.0002280" startTime="2025-07-06T11:03:06.5113845+00:00" endTime="2025-07-06T11:03:06.5116470+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="014f79ea-2218-4b45-8280-7cc40472932f">
      <Output>
        <StdOut>=== Testing: SELECT * FROM users WHERE status = 'active' ===
WHERE Match: True
WHERE Clause: 'status = 'active''

=== Testing: SELECT * FROM users WHERE age = 25 ===
WHERE Match: True
WHERE Clause: 'age = 25'

=== Testing: SELECT * FROM users WHERE is_active = TRUE ===
WHERE Match: True
WHERE Clause: 'is_active = TRUE'

=== Testing: SELECT * FROM users u WHERE u.status = 'active' ===
WHERE Match: True
WHERE Clause: 'u.status = 'active''

=== Testing: SELECT * FROM users WHERE name LIKE '%John%' ===
WHERE Match: True
WHERE Clause: 'name LIKE '%John%''</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="f18736c7-59d4-493f-96b4-104e433a7601" testId="e66a12a6-2992-4559-0940-4e677c37d285" testName="TestGetNextFlashModel" computerName="cursor" duration="00:00:00.0002769" startTime="2025-07-06T10:57:03.6208198+00:00" endTime="2025-07-06T10:57:03.6212009+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="f18736c7-59d4-493f-96b4-104e433a7601">
      <Output>
        <StdOut>✅ Model Rotation Test Passed
\ud83d\ude80 First Model: gemini-2.5-flash-preview-04-17
\ud83d\udd04 Second Model: gemini-2.5-flash-preview-05-20
\ud83d\udd04 Model rotation working (multiple healthy models available)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="57e8ca3c-8625-4ace-bcbf-54445bb135fa" testId="841aba5c-167f-c0d8-d4a9-4c6ca4256425" testName="GenerateBogusData_LargeDataset_ShouldHandleUniqueConstraints" computerName="cursor" duration="00:00:00.0097939" startTime="2025-07-06T10:57:03.6807869+00:00" endTime="2025-07-06T10:57:03.6916429+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="57e8ca3c-8625-4ace-bcbf-54445bb135fa">
      <Output>
        <StdOut>[DEBUG] Table companies has 2 columns:
[DEBUG] Column: id, IsIdentity: True, IsGenerated: False, DefaultValue: ''
[DEBUG] Column: name, IsIdentity: False, IsGenerated: False, DefaultValue: ''
[DEBUG-T021] Filtered columns for companies: 1 columns (from 2 total)
[DEBUG-T021] Excluded columns: id(Identity:True,Generated:False)
[DEBUG-T021] Included columns: name
[DEBUG-T021] Generated SQL for companies: INSERT INTO `companies` (`name`) VALUES ('Zane Gusikowski');
[DEBUG-T021] Generated SQL for companies: INSERT INTO `companies` (`name`) VALUES ('Karianne Corkery');
[DEBUG-T021] Generated SQL for companies: INSERT INTO `companies` (`name`) VALUES ('Aimee Feil');
[DEBUG-T021] Generated SQL for companies: INSERT INTO `companies` (`name`) VALUES ('Ubaldo Emard');
[DEBUG-T021] Generated SQL for companies: INSERT INTO `companies` (`name`) VALUES ('Frederique Hintz');
[DEBUG-T021] Generated SQL for companies: INSERT INTO `companies` (`name`) VALUES ('Sherwood Bednar');
[DEBUG-T021] Generated SQL for companies: INSERT INTO `companies` (`name`) VALUES ('Daisy Rowe');
[DEBUG-T021] Generated SQL for companies: INSERT INTO `companies` (`name`) VALUES ('Maeve Emmerich');
[DEBUG-T021] Generated SQL for companies: INSERT INTO `companies` (`name`) VALUES ('Walter Hand');
[DEBUG-T021] Generated SQL for companies: INSERT INTO `companies` (`name`) VALUES ('Anjali Rodriguez');
[DEBUG-T021] Generated SQL for companies: INSERT INTO `companies` (`name`) VALUES ('Willis Williamson');
[DEBUG-T021] Generated SQL for companies: INSERT INTO `companies` (`name`) VALUES ('Irwin Rau');
[DEBUG-T021] Generated SQL for companies: INSERT INTO `companies` (`name`) VALUES ('Queenie Johnson');
[DEBUG-T021] Generated SQL for companies: INSERT INTO `companies` (`name`) VALUES ('Rahsaan Wilkinson');
[DEBUG-T021] Generated SQL for companies: INSERT INTO `companies` (`name`) VALUES ('Pete Kuhn');
[DEBUG-T021] Generated SQL for companies: INSERT INTO `companies` (`name`) VALUES ('Hoyt Parisian');
[DEBUG-T021] Generated SQL for companies: INSERT INTO `companies` (`name`) VALUES ('Freda Howell');
[DEBUG-T021] Generated SQL for companies: INSERT INTO `companies` (`name`) VALUES ('Oswaldo Batz');
[DEBUG-T021] Generated SQL for companies: INSERT INTO `companies` (`name`) VALUES ('Kasandra O''Connell');
[DEBUG-T021] Generated SQL for companies: INSERT INTO `companies` (`name`) VALUES ('Abel O''Reilly');
[DEBUG-T021] Generated SQL for companies: INSERT INTO `companies` (`name`) VALUES ('Cicero Huel');
[DEBUG-T021] Generated SQL for companies: INSERT INTO `companies` (`name`) VALUES ('Davonte Daniel');
[DEBUG-T021] Generated SQL for companies: INSERT INTO `companies` (`name`) VALUES ('Alta O''Reilly');
[DEBUG-T021] Generated SQL for companies: INSERT INTO `companies` (`name`) VALUES ('Bennie Kozey');
[DEBUG-T021] Generated SQL for companies: INSERT INTO `companies` (`name`) VALUES ('Rylan Parisian');
[DEBUG-T021] Generated SQL for companies: INSERT INTO `companies` (`name`) VALUES ('Juana Schowalter');
[DEBUG-T021] Generated SQL for companies: INSERT INTO `companies` (`name`) VALUES ('Thora Goodwin');
[DEBUG-T021] Generated SQL for companies: INSERT INTO `companies` (`name`) VALUES ('Shawn Corwin');
[DEBUG-T021] Generated SQL for companies: INSERT INTO `companies` (`name`) VALUES ('Jaunita Lynch');
[DEBUG-T021] Generated SQL for companies: INSERT INTO `companies` (`name`) VALUES ('Zoey Kertzmann');
[DEBUG-T021] Generated SQL for companies: INSERT INTO `companies` (`name`) VALUES ('Violette Conroy');
[DEBUG-T021] Generated SQL for companies: INSERT INTO `companies` (`name`) VALUES ('Reina Smith');
[DEBUG-T021] Generated SQL for companies: INSERT INTO `companies` (`name`) VALUES ('Leland Kunde');
[DEBUG-T021] Generated SQL for companies: INSERT INTO `companies` (`name`) VALUES ('Marley Stokes');
[DEBUG-T021] Generated SQL for companies: INSERT INTO `companies` (`name`) VALUES ('Douglas Green');
[DEBUG-T021] Generated SQL for companies: INSERT INTO `companies` (`name`) VALUES ('Talon Morissette');
[DEBUG-T021] Generated SQL for companies: INSERT INTO `companies` (`name`) VALUES ('Jayne Larkin');
[DEBUG-T021] Generated SQL for companies: INSERT INTO `companies` (`name`) VALUES ('Micheal Hackett');
[DEBUG-T021] Generated SQL for companies: INSERT INTO `companies` (`name`) VALUES ('Christelle Oberbrunner');
[DEBUG-T021] Generated SQL for companies: INSERT INTO `companies` (`name`) VALUES ('Velma Hermiston');
[DEBUG-T021] Generated SQL for companies: INSERT INTO `companies` (`name`) VALUES ('Fredrick Roob');
[DEBUG-T021] Generated SQL for companies: INSERT INTO `companies` (`name`) VALUES ('Myrtice Larkin');
[DEBUG-T021] Generated SQL for companies: INSERT INTO `companies` (`name`) VALUES ('Stevie Renner');
[DEBUG-T021] Generated SQL for companies: INSERT INTO `companies` (`name`) VALUES ('Abbey Walker');
[DEBUG-T021] Generated SQL for companies: INSERT INTO `companies` (`name`) VALUES ('Kacey Kris');
[DEBUG-T021] Generated SQL for companies: INSERT INTO `companies` (`name`) VALUES ('Adrian Labadie');
[DEBUG-T021] Generated SQL for companies: INSERT INTO `companies` (`name`) VALUES ('Dorian Quitzon');
[DEBUG-T021] Generated SQL for companies: INSERT INTO `companies` (`name`) VALUES ('Maryse Botsford');
[DEBUG-T021] Generated SQL for companies: INSERT INTO `companies` (`name`) VALUES ('Alta Zulauf');
[DEBUG-T021] Generated SQL for companies: INSERT INTO `companies` (`name`) VALUES ('Jazmyn Glover');
[DEBUG] Table roles has 2 columns:
[DEBUG] Column: id, IsIdentity: True, IsGenerated: False, DefaultValue: ''
[DEBUG] Column: name, IsIdentity: False, IsGenerated: False, DefaultValue: ''
[DEBUG-T021] Filtered columns for roles: 1 columns (from 2 total)
[DEBUG-T021] Excluded columns: id(Identity:True,Generated:False)
[DEBUG-T021] Included columns: name
[DEBUG-T021] Generated SQL for roles: INSERT INTO `roles` (`name`) VALUES ('Asa Rogahn');
[DEBUG-T021] Generated SQL for roles: INSERT INTO `roles` (`name`) VALUES ('Sonya Dicki');
[DEBUG-T021] Generated SQL for roles: INSERT INTO `roles` (`name`) VALUES ('Elna Monahan');
[DEBUG-T021] Generated SQL for roles: INSERT INTO `roles` (`name`) VALUES ('Ellen Nader');
[DEBUG-T021] Generated SQL for roles: INSERT INTO `roles` (`name`) VALUES ('Dayne Hartmann');
[DEBUG-T021] Generated SQL for roles: INSERT INTO `roles` (`name`) VALUES ('Flo Metz');
[DEBUG-T021] Generated SQL for roles: INSERT INTO `roles` (`name`) VALUES ('Stacy Fahey');
[DEBUG-T021] Generated SQL for roles: INSERT INTO `roles` (`name`) VALUES ('Van Lesch');
[DEBUG-T021] Generated SQL for roles: INSERT INTO `roles` (`name`) VALUES ('Earl Johnson');
[DEBUG-T021] Generated SQL for roles: INSERT INTO `roles` (`name`) VALUES ('Karli Block');
[DEBUG-T021] Generated SQL for roles: INSERT INTO `roles` (`name`) VALUES ('Makenna Reichel');
[DEBUG-T021] Generated SQL for roles: INSERT INTO `roles` (`name`) VALUES ('Favian Padberg');
[DEBUG-T021] Generated SQL for roles: INSERT INTO `roles` (`name`) VALUES ('Thea Labadie');
[DEBUG-T021] Generated SQL for roles: INSERT INTO `roles` (`name`) VALUES ('Imogene Romaguera');
[DEBUG-T021] Generated SQL for roles: INSERT INTO `roles` (`name`) VALUES ('Pedro Gerlach');
[DEBUG-T021] Generated SQL for roles: INSERT INTO `roles` (`name`) VALUES ('Michaela Lehner');
[DEBUG-T021] Generated SQL for roles: INSERT INTO `roles` (`name`) VALUES ('Annalise Pfannerstill');
[DEBUG-T021] Generated SQL for roles: INSERT INTO `roles` (`name`) VALUES ('Angie Champlin');
[DEBUG-T021] Generated SQL for roles: INSERT INTO `roles` (`name`) VALUES ('Sabina Tromp');
[DEBUG-T021] Generated SQL for roles: INSERT INTO `roles` (`name`) VALUES ('Jaclyn Bogisich');
[DEBUG-T021] Generated SQL for roles: INSERT INTO `roles` (`name`) VALUES ('Rigoberto Douglas');
[DEBUG-T021] Generated SQL for roles: INSERT INTO `roles` (`name`) VALUES ('Donato Kerluke');
[DEBUG-T021] Generated SQL for roles: INSERT INTO `roles` (`name`) VALUES ('Westley Considine');
[DEBUG-T021] Generated SQL for roles: INSERT INTO `roles` (`name`) VALUES ('Lucio Medhurst');
[DEBUG-T021] Generated SQL for roles: INSERT INTO `roles` (`name`) VALUES ('Ettie Emmerich');
[DEBUG-T021] Generated SQL for roles: INSERT INTO `roles` (`name`) VALUES ('Amanda Towne');
[DEBUG-T021] Generated SQL for roles: INSERT INTO `roles` (`name`) VALUES ('Aiden Dooley');
[DEBUG-T021] Generated SQL for roles: INSERT INTO `roles` (`name`) VALUES ('Ila Howell');
[DEBUG-T021] Generated SQL for roles: INSERT INTO `roles` (`name`) VALUES ('Carley Flatley');
[DEBUG-T021] Generated SQL for roles: INSERT INTO `roles` (`name`) VALUES ('Sage Bruen');
[DEBUG-T021] Generated SQL for roles: INSERT INTO `roles` (`name`) VALUES ('Eugenia Bosco');
[DEBUG-T021] Generated SQL for roles: INSERT INTO `roles` (`name`) VALUES ('Alexandrine Haag');
[DEBUG-T021] Generated SQL for roles: INSERT INTO `roles` (`name`) VALUES ('Macey Schiller');
[DEBUG-T021] Generated SQL for roles: INSERT INTO `roles` (`name`) VALUES ('Blanche Luettgen');
[DEBUG-T021] Generated SQL for roles: INSERT INTO `roles` (`name`) VALUES ('Julien Armstrong');
[DEBUG-T021] Generated SQL for roles: INSERT INTO `roles` (`name`) VALUES ('Victor McClure');
[DEBUG-T021] Generated SQL for roles: INSERT INTO `roles` (`name`) VALUES ('Elmore Heidenreich');
[DEBUG-T021] Generated SQL for roles: INSERT INTO `roles` (`name`) VALUES ('Therese Collier');
[DEBUG-T021] Generated SQL for roles: INSERT INTO `roles` (`name`) VALUES ('Leonardo Ratke');
[DEBUG-T021] Generated SQL for roles: INSERT INTO `roles` (`name`) VALUES ('Jamison Nader');
[DEBUG-T021] Generated SQL for roles: INSERT INTO `roles` (`name`) VALUES ('Adriel Trantow');
[DEBUG-T021] Generated SQL for roles: INSERT INTO `roles` (`name`) VALUES ('Whitney Davis');
[DEBUG-T021] Generated SQL for roles: INSERT INTO `roles` (`name`) VALUES ('Ferne Bogisich');
[DEBUG-T021] Generated SQL for roles: INSERT INTO `roles` (`name`) VALUES ('Bruce Hayes');
[DEBUG-T021] Generated SQL for roles: INSERT INTO `roles` (`name`) VALUES ('Grant Paucek');
[DEBUG-T021] Generated SQL for roles: INSERT INTO `roles` (`name`) VALUES ('Jesse Hagenes');
[DEBUG-T021] Generated SQL for roles: INSERT INTO `roles` (`name`) VALUES ('Garrett Christiansen');
[DEBUG-T021] Generated SQL for roles: INSERT INTO `roles` (`name`) VALUES ('Jennyfer Williamson');
[DEBUG-T021] Generated SQL for roles: INSERT INTO `roles` (`name`) VALUES ('Johan Little');
[DEBUG-T021] Generated SQL for roles: INSERT INTO `roles` (`name`) VALUES ('Pearlie Steuber');
[DEBUG] Table users has 3 columns:
[DEBUG] Column: id, IsIdentity: True, IsGenerated: False, DefaultValue: ''
[DEBUG] Column: username, IsIdentity: False, IsGenerated: False, DefaultValue: ''
[DEBUG] Column: company_id, IsIdentity: False, IsGenerated: False, DefaultValue: ''
[DEBUG-T021] Filtered columns for users: 2 columns (from 3 total)
[DEBUG-T021] Excluded columns: id(Identity:True,Generated:False)
[DEBUG-T021] Included columns: username, company_id
[DEBUG-T021] Generated SQL for users: INSERT INTO `users` (`username`, `company_id`) VALUES ('Opal58', 2);
[DEBUG-T021] Generated SQL for users: INSERT INTO `users` (`username`, `company_id`) VALUES ('Edna.Weissnat92', 3);
[DEBUG-T021] Generated SQL for users: INSERT INTO `users` (`username`, `company_id`) VALUES ('Eugenia.Kutch', 4);
[DEBUG-T021] Generated SQL for users: INSERT INTO `users` (`username`, `company_id`) VALUES ('Kristoffer_Hamill', 5);
[DEBUG-T021] Generated SQL for users: INSERT INTO `users` (`username`, `company_id`) VALUES ('Mellie.Purdy53', 6);
[DEBUG-T021] Generated SQL for users: INSERT INTO `users` (`username`, `company_id`) VALUES ('Gerda.Ledner57', 7);
[DEBUG-T021] Generated SQL for users: INSERT INTO `users` (`username`, `company_id`) VALUES ('Sabryna62', 8);
[DEBUG-T021] Generated SQL for users: INSERT INTO `users` (`username`, `company_id`) VALUES ('Jamaal.Berge26', 9);
[DEBUG-T021] Generated SQL for users: INSERT INTO `users` (`username`, `company_id`) VALUES ('Jaeden.Rath26', 10);
[DEBUG-T021] Generated SQL for users: INSERT INTO `users` (`username`, `company_id`) VALUES ('Hailie.Kris32', 11);
[DEBUG-T021] Generated SQL for users: INSERT INTO `users` (`username`, `company_id`) VALUES ('Jorge66', 12);
[DEBUG-T021] Generated SQL for users: INSERT INTO `users` (`username`, `company_id`) VALUES ('Kevin_Heidenreich', 13);
[DEBUG-T021] Generated SQL for users: INSERT INTO `users` (`username`, `company_id`) VALUES ('Fredrick.Rosenbaum', 14);
[DEBUG-T021] Generated SQL for users: INSERT INTO `users` (`username`, `company_id`) VALUES ('Hazel_Homenick', 15);
[DEBUG-T021] Generated SQL for users: INSERT INTO `users` (`username`, `company_id`) VALUES ('Lorna.Russel', 16);
[DEBUG-T021] Generated SQL for users: INSERT INTO `users` (`username`, `company_id`) VALUES ('Katrina.Goodwin', 17);
[DEBUG-T021] Generated SQL for users: INSERT INTO `users` (`username`, `company_id`) VALUES ('Darien_Hettinger', 18);
[DEBUG-T021] Generated SQL for users: INSERT INTO `users` (`username`, `company_id`) VALUES ('Leopold54', 19);
[DEBUG-T021] Generated SQL for users: INSERT INTO `users` (`username`, `company_id`) VALUES ('Mariana_Kohler92', 20);
[DEBUG-T021] Generated SQL for users: INSERT INTO `users` (`username`, `company_id`) VALUES ('Nettie_Ebert', 21);
[DEBUG-T021] Generated SQL for users: INSERT INTO `users` (`username`, `company_id`) VALUES ('Rudolph_Schoen34', 22);
[DEBUG-T021] Generated SQL for users: INSERT INTO `users` (`username`, `company_id`) VALUES ('Luigi53', 23);
[DEBUG-T021] Generated SQL for users: INSERT INTO `users` (`username`, `company_id`) VALUES ('Nicklaus_Schimmel', 24);
[DEBUG-T021] Generated SQL for users: INSERT INTO `users` (`username`, `company_id`) VALUES ('Tanner71', 25);
[DEBUG-T021] Generated SQL for users: INSERT INTO `users` (`username`, `company_id`) VALUES ('Terence54', 26);
[DEBUG-T021] Generated SQL for users: INSERT INTO `users` (`username`, `company_id`) VALUES ('Helena_Roberts', 27);
[DEBUG-T021] Generated SQL for users: INSERT INTO `users` (`username`, `company_id`) VALUES ('Pauline22', 28);
[DEBUG-T021] Generated SQL for users: INSERT INTO `users` (`username`, `company_id`) VALUES ('Noe.Rogahn', 29);
[DEBUG-T021] Generated SQL for users: INSERT INTO `users` (`username`, `company_id`) VALUES ('Jett95', 30);
[DEBUG-T021] Generated SQL for users: INSERT INTO `users` (`username`, `company_id`) VALUES ('Ashlee_Watsica93', 31);
[DEBUG-T021] Generated SQL for users: INSERT INTO `users` (`username`, `company_id`) VALUES ('Princess78', 32);
[DEBUG-T021] Generated SQL for users: INSERT INTO `users` (`username`, `company_id`) VALUES ('Thomas_Berge', 33);
[DEBUG-T021] Generated SQL for users: INSERT INTO `users` (`username`, `company_id`) VALUES ('Kenyon_Davis', 34);
[DEBUG-T021] Generated SQL for users: INSERT INTO `users` (`username`, `company_id`) VALUES ('Flo.Schroeder', 35);
[DEBUG-T021] Generated SQL for users: INSERT INTO `users` (`username`, `company_id`) VALUES ('Sabrina5', 36);
[DEBUG-T021] Generated SQL for users: INSERT INTO `users` (`username`, `company_id`) VALUES ('Rachelle_Spencer', 37);
[DEBUG-T021] Generated SQL for users: INSERT INTO `users` (`username`, `company_id`) VALUES ('Kathryn.Goldner92', 38);
[DEBUG-T021] Generated SQL for users: INSERT INTO `users` (`username`, `company_id`) VALUES ('Dannie_Shanahan', 39);
[DEBUG-T021] Generated SQL for users: INSERT INTO `users` (`username`, `company_id`) VALUES ('Kaden_OKon', 40);
[DEBUG-T021] Generated SQL for users: INSERT INTO `users` (`username`, `company_id`) VALUES ('Haskell.Leannon50', 41);
[DEBUG-T021] Generated SQL for users: INSERT INTO `users` (`username`, `company_id`) VALUES ('Lauren68', 42);
[DEBUG-T021] Generated SQL for users: INSERT INTO `users` (`username`, `company_id`) VALUES ('Frederic_Yost2', 43);
[DEBUG-T021] Generated SQL for users: INSERT INTO `users` (`username`, `company_id`) VALUES ('Kelsi.Kassulke62', 44);
[DEBUG-T021] Generated SQL for users: INSERT INTO `users` (`username`, `company_id`) VALUES ('Aracely_Dietrich37', 45);
[DEBUG-T021] Generated SQL for users: INSERT INTO `users` (`username`, `company_id`) VALUES ('Ricky1', 46);
[DEBUG-T021] Generated SQL for users: INSERT INTO `users` (`username`, `company_id`) VALUES ('Gwen_Rolfson87', 47);
[DEBUG-T021] Generated SQL for users: INSERT INTO `users` (`username`, `company_id`) VALUES ('Lemuel.Christiansen20', 48);
[DEBUG-T021] Generated SQL for users: INSERT INTO `users` (`username`, `company_id`) VALUES ('Brandon_Grimes60', 49);
[DEBUG-T021] Generated SQL for users: INSERT INTO `users` (`username`, `company_id`) VALUES ('Casimer98', 50);
[DEBUG-T021] Generated SQL for users: INSERT INTO `users` (`username`, `company_id`) VALUES ('Annalise_Quitzon15', 1);
[DEBUG] Table user_roles has 4 columns:
[DEBUG] Column: user_id, IsIdentity: False, IsGenerated: False, DefaultValue: ''
[DEBUG] Column: role_id, IsIdentity: False, IsGenerated: False, DefaultValue: ''
[DEBUG] Column: assigned_by, IsIdentity: False, IsGenerated: False, DefaultValue: ''
[DEBUG] Column: is_active, IsIdentity: False, IsGenerated: False, DefaultValue: ''
[DEBUG-T021] Filtered columns for user_roles: 4 columns (from 4 total)
[DEBUG-T021] Excluded columns: 
[DEBUG-T021] Included columns: user_id, role_id, assigned_by, is_active
[DEBUG] Generated SQL for user_roles: INSERT INTO `user_roles` (`user_id`, `role_id`, `assigned_by`, `is_active`) VALUES (2, 18, 35, 36);
[DEBUG] Generated SQL for user_roles: INSERT INTO `user_roles` (`user_id`, `role_id`, `assigned_by`, `is_active`) VALUES (3, 19, 36, 17);
[DEBUG] Generated SQL for user_roles: INSERT INTO `user_roles` (`user_id`, `role_id`, `assigned_by`, `is_active`) VALUES (4, 20, 37, 79);
[DEBUG] Generated SQL for user_roles: INSERT INTO `user_roles` (`user_id`, `role_id`, `assigned_by`, `is_active`) VALUES (5, 21, 38, 78);
[DEBUG] Generated SQL for user_roles: INSERT INTO `user_roles` (`user_id`, `role_id`, `assigned_by`, `is_active`) VALUES (6, 22, 39, 65);
[DEBUG] Generated SQL for user_roles: INSERT INTO `user_roles` (`user_id`, `role_id`, `assigned_by`, `is_active`) VALUES (7, 23, 40, 87);
[DEBUG] Generated SQL for user_roles: INSERT INTO `user_roles` (`user_id`, `role_id`, `assigned_by`, `is_active`) VALUES (8, 24, 41, 16);
[DEBUG] Generated SQL for user_roles: INSERT INTO `user_roles` (`user_id`, `role_id`, `assigned_by`, `is_active`) VALUES (9, 25, 42, 59);
[DEBUG] Generated SQL for user_roles: INSERT INTO `user_roles` (`user_id`, `role_id`, `assigned_by`, `is_active`) VALUES (10, 26, 43, 64);
[DEBUG] Generated SQL for user_roles: INSERT INTO `user_roles` (`user_id`, `role_id`, `assigned_by`, `is_active`) VALUES (11, 27, 44, 25);
[DEBUG] Generated SQL for user_roles: INSERT INTO `user_roles` (`user_id`, `role_id`, `assigned_by`, `is_active`) VALUES (12, 28, 45, 14);
[DEBUG] Generated SQL for user_roles: INSERT INTO `user_roles` (`user_id`, `role_id`, `assigned_by`, `is_active`) VALUES (13, 29, 46, 49);
[DEBUG] Generated SQL for user_roles: INSERT INTO `user_roles` (`user_id`, `role_id`, `assigned_by`, `is_active`) VALUES (14, 30, 47, 55);
[DEBUG] Generated SQL for user_roles: INSERT INTO `user_roles` (`user_id`, `role_id`, `assigned_by`, `is_active`) VALUES (15, 31, 48, 99);
[DEBUG] Generated SQL for user_roles: INSERT INTO `user_roles` (`user_id`, `role_id`, `assigned_by`, `is_active`) VALUES (16, 32, 49, 65);
[DEBUG] Generated SQL for user_roles: INSERT INTO `user_roles` (`user_id`, `role_id`, `assigned_by`, `is_active`) VALUES (17, 33, 50, 100);
[DEBUG] Generated SQL for user_roles: INSERT INTO `user_roles` (`user_id`, `role_id`, `assigned_by`, `is_active`) VALUES (18, 34, 1, 96);
[DEBUG] Generated SQL for user_roles: INSERT INTO `user_roles` (`user_id`, `role_id`, `assigned_by`, `is_active`) VALUES (19, 35, 2, 98);
[DEBUG] Generated SQL for user_roles: INSERT INTO `user_roles` (`user_id`, `role_id`, `assigned_by`, `is_active`) VALUES (20, 36, 3, 64);
[DEBUG] Generated SQL for user_roles: INSERT INTO `user_roles` (`user_id`, `role_id`, `assigned_by`, `is_active`) VALUES (21, 37, 4, 15);
[DEBUG] Generated SQL for user_roles: INSERT INTO `user_roles` (`user_id`, `role_id`, `assigned_by`, `is_active`) VALUES (22, 38, 5, 92);
[DEBUG] Generated SQL for user_roles: INSERT INTO `user_roles` (`user_id`, `role_id`, `assigned_by`, `is_active`) VALUES (23, 39, 6, 47);
[DEBUG] Generated SQL for user_roles: INSERT INTO `user_roles` (`user_id`, `role_id`, `assigned_by`, `is_active`) VALUES (24, 40, 7, 37);
[DEBUG] Generated SQL for user_roles: INSERT INTO `user_roles` (`user_id`, `role_id`, `assigned_by`, `is_active`) VALUES (25, 41, 8, 37);
[DEBUG] Generated SQL for user_roles: INSERT INTO `user_roles` (`user_id`, `role_id`, `assigned_by`, `is_active`) VALUES (26, 42, 9, 2);
[DEBUG] Generated SQL for user_roles: INSERT INTO `user_roles` (`user_id`, `role_id`, `assigned_by`, `is_active`) VALUES (27, 43, 10, 51);
[DEBUG] Generated SQL for user_roles: INSERT INTO `user_roles` (`user_id`, `role_id`, `assigned_by`, `is_active`) VALUES (28, 44, 11, 61);
[DEBUG] Generated SQL for user_roles: INSERT INTO `user_roles` (`user_id`, `role_id`, `assigned_by`, `is_active`) VALUES (29, 45, 12, 30);
[DEBUG] Generated SQL for user_roles: INSERT INTO `user_roles` (`user_id`, `role_id`, `assigned_by`, `is_active`) VALUES (30, 46, 13, 47);
[DEBUG] Generated SQL for user_roles: INSERT INTO `user_roles` (`user_id`, `role_id`, `assigned_by`, `is_active`) VALUES (31, 47, 14, 40);
[DEBUG] Generated SQL for user_roles: INSERT INTO `user_roles` (`user_id`, `role_id`, `assigned_by`, `is_active`) VALUES (32, 48, 15, 64);
[DEBUG] Generated SQL for user_roles: INSERT INTO `user_roles` (`user_id`, `role_id`, `assigned_by`, `is_active`) VALUES (33, 49, 16, 47);
[DEBUG] Generated SQL for user_roles: INSERT INTO `user_roles` (`user_id`, `role_id`, `assigned_by`, `is_active`) VALUES (34, 50, 17, 23);
[DEBUG] Generated SQL for user_roles: INSERT INTO `user_roles` (`user_id`, `role_id`, `assigned_by`, `is_active`) VALUES (35, 1, 18, 50);
[DEBUG] Generated SQL for user_roles: INSERT INTO `user_roles` (`user_id`, `role_id`, `assigned_by`, `is_active`) VALUES (36, 2, 19, 89);
[DEBUG] Generated SQL for user_roles: INSERT INTO `user_roles` (`user_id`, `role_id`, `assigned_by`, `is_active`) VALUES (37, 3, 20, 27);
[DEBUG] Generated SQL for user_roles: INSERT INTO `user_roles` (`user_id`, `role_id`, `assigned_by`, `is_active`) VALUES (38, 4, 21, 30);
[DEBUG] Generated SQL for user_roles: INSERT INTO `user_roles` (`user_id`, `role_id`, `assigned_by`, `is_active`) VALUES (39, 5, 22, 68);
[DEBUG] Generated SQL for user_roles: INSERT INTO `user_roles` (`user_id`, `role_id`, `assigned_by`, `is_active`) VALUES (40, 6, 23, 89);
[DEBUG] Generated SQL for user_roles: INSERT INTO `user_roles` (`user_id`, `role_id`, `assigned_by`, `is_active`) VALUES (41, 7, 24, 66);
[DEBUG] Generated SQL for user_roles: INSERT INTO `user_roles` (`user_id`, `role_id`, `assigned_by`, `is_active`) VALUES (42, 8, 25, 67);
[DEBUG] Generated SQL for user_roles: INSERT INTO `user_roles` (`user_id`, `role_id`, `assigned_by`, `is_active`) VALUES (43, 9, 26, 9);
[DEBUG] Generated SQL for user_roles: INSERT INTO `user_roles` (`user_id`, `role_id`, `assigned_by`, `is_active`) VALUES (44, 10, 27, 58);
[DEBUG] Generated SQL for user_roles: INSERT INTO `user_roles` (`user_id`, `role_id`, `assigned_by`, `is_active`) VALUES (45, 11, 28, 57);
[DEBUG] Generated SQL for user_roles: INSERT INTO `user_roles` (`user_id`, `role_id`, `assigned_by`, `is_active`) VALUES (46, 12, 29, 75);
[DEBUG] Generated SQL for user_roles: INSERT INTO `user_roles` (`user_id`, `role_id`, `assigned_by`, `is_active`) VALUES (47, 13, 30, 46);
[DEBUG] Generated SQL for user_roles: INSERT INTO `user_roles` (`user_id`, `role_id`, `assigned_by`, `is_active`) VALUES (48, 14, 31, 24);
[DEBUG] Generated SQL for user_roles: INSERT INTO `user_roles` (`user_id`, `role_id`, `assigned_by`, `is_active`) VALUES (49, 15, 32, 50);
[DEBUG] Generated SQL for user_roles: INSERT INTO `user_roles` (`user_id`, `role_id`, `assigned_by`, `is_active`) VALUES (50, 16, 33, 44);
[DEBUG] Generated SQL for user_roles: INSERT INTO `user_roles` (`user_id`, `role_id`, `assigned_by`, `is_active`) VALUES (1, 17, 34, 52);
Generated 50 combinations, 50 unique
Sample combinations: 2-18, 3-19, 4-20, 5-21, 6-22, 7-23, 8-24, 9-25, 10-26, 11-27
✅ SUCCESS: Large dataset handled without duplicate keys</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="6c30cdf2-b58a-441b-925c-6fcb87e58c05" testId="9095faf9-dd7f-d7fb-e451-67e3bb815ecc" testName="ExtractBetweenConstraints_WithStringValues_ShouldExtractCorrectly" computerName="cursor" duration="00:00:00.0014662" startTime="2025-07-06T10:57:02.2698299+00:00" endTime="2025-07-06T10:57:02.2713973+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="6c30cdf2-b58a-441b-925c-6fcb87e58c05">
      <Output>
        <StdOut>[10:57:02 INF] Extracting comprehensive constraints from SQL query
[10:57:02 INF] Found WHERE clause: customer_name BETWEEN 'A' AND 'M'
[10:57:02 INF] Found BETWEEN constraint without alias: customer_name BETWEEN 'A' AND 'M' - Type: STRING
[10:57:02 INF] Starting EXISTS constraints extraction with two-phase approach
[10:57:02 INF] Completed EXISTS constraints extraction: 0 NOT EXISTS, 0 EXISTS
[10:57:02 INF] Extracted 1 total constraints: 0 WHERE, 0 JOIN, 0 LIKE, 0 IN, 1 BETWEEN, 0 NULL, 0 EXISTS</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="4dc3ac71-846e-4a0f-a949-058cce305c0f" testId="79b3e653-2e42-5747-8f83-4719364b0792" testName="ParseQuery_NullCondition_ExtractsCorrectly" computerName="cursor" duration="00:00:00.0009631" startTime="2025-07-06T11:03:06.6084976+00:00" endTime="2025-07-06T11:03:06.6095048+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="4dc3ac71-846e-4a0f-a949-058cce305c0f">
      <Output>
        <StdOut>[11:03:06 INF] SqlQueryParserV2: Parsing SQL query with ScriptDom engine
[11:03:06 DBG] Visiting SelectStatement
[11:03:06 DBG] Found table: users with alias: users
[11:03:06 DBG] Extracting WHERE conditions from clause
[11:03:06 DBG] Found NULL condition: .email IS NOT NULL
[11:03:06 INF] ScriptDom extracted 1 WHERE conditions and 0 JOIN requirements</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="b3f703f9-d808-49de-99d5-76dc466de4d5" testId="9b97f53b-9d68-7c6d-0aa2-b2322ea14026" testName="ExtractNullConstraints_WithoutTableAlias_ShouldExtractCorrectly" computerName="cursor" duration="00:00:00.0016478" startTime="2025-07-06T10:57:02.2769158+00:00" endTime="2025-07-06T10:57:02.2786559+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="b3f703f9-d808-49de-99d5-76dc466de4d5">
      <Output>
        <StdOut>[10:57:02 INF] Extracting comprehensive constraints from SQL query
[10:57:02 INF] Found WHERE clause: email IS NOT NULL AND phone IS NULL
[10:57:02 INF] Found NULL constraint without alias: phone IS NULL
[10:57:02 INF] Found NOT NULL constraint without alias: email IS NOT NULL
[10:57:02 INF] Starting EXISTS constraints extraction with two-phase approach
[10:57:02 INF] Completed EXISTS constraints extraction: 0 NOT EXISTS, 0 EXISTS
[10:57:02 INF] Extracted 2 total constraints: 0 WHERE, 0 JOIN, 0 LIKE, 0 IN, 0 BETWEEN, 2 NULL, 0 EXISTS</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="bc3556ec-359f-433b-835a-3d94894c43e6" testId="0ec26798-ed4f-fe6b-4885-38fccb91d1c9" testName="Test_SimplifiedConstraintValidation" computerName="cursor" duration="00:00:00.0004022" startTime="2025-07-06T10:57:03.6022735+00:00" endTime="2025-07-06T10:57:03.6027669+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="bc3556ec-359f-433b-835a-3d94894c43e6">
      <Output>
        <StdOut>[DEBUG] GetApiKey() method called
[DEBUG] ConfigurationManager result: '' (length: 0)
[DEBUG] Environment variable result: '' (length: 0)
[DEBUG] Using HARDCODED API key for testing
[DEBUG] Gemini API Key configured: True
[DEBUG] API Key length: 39
[DEBUG] API Key preview: AIzaSyCsOz...
[SIMPLIFIED] Testing basic constraint validation...
[SIMPLIFIED] VNEXT validation: True
[SIMPLIFIED] Email validation: True
[SIMPLIFIED] ✅ All simplified validations passed</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="b2a4d4f8-b755-4051-b879-a16376d3b4d6" testId="6a837f89-6df6-acb7-0827-1ca906ffd71d" testName="ExecuteQueryWithTestDataAsync_LargeRecordCount_ShouldHandleEfficiently" computerName="cursor" duration="00:00:00.0046097" startTime="2025-07-06T11:03:06.4752128+00:00" endTime="2025-07-06T11:03:06.4799019+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="b2a4d4f8-b755-4051-b879-a16376d3b4d6">
      <Output>
        <StdOut>[CentralizedLoggingManager] Initialized. Logs directory: /workspace/logs
[CentralizedLoggingManager] Config source: default
[EngineService] Centralized logs directory: /workspace/logs
[EngineService] Starting execution for MySQL
[EngineService] Analyzing query: 71 chars
[SqlMetadataService] Extracting tables from query: 71 chars
[SqlMetadataService] Clean SQL: SELECT u.id, u.username, u.email FROM users u WHERE u.email IS NOT NULL...
[SqlMetadataService] Pattern '\bFROM\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)(?:\s+(?:AS\s+)?(\w+))?' found 1 matches
[SqlMetadataService] Match: 'FROM users u'
[SqlMetadataService] Found table: users
[SqlMetadataService] Pattern '\b(?:INNER\s+|LEFT\s+|RIGHT\s+|FULL\s+|OUTER\s+)?JOIN\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)(?:\s+(?:AS\s+)?(\w+))?' found 0 matches
[SqlMetadataService] Pattern '\bINTO\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)' found 0 matches
[SqlMetadataService] Pattern '\bUPDATE\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)' found 0 matches
[SqlMetadataService] Pattern '\bINSERT\s+INTO\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)' found 0 matches
[SqlMetadataService] Total tables extracted: 1 - users
[EngineService] Metadata extraction failed: Unable to connect to any of the specified MySQL hosts.
[EngineService] Execution failed: Không thể phân tích database schema: Unable to connect to any of the specified MySQL hosts.
[EngineService] Exception type: InvalidOperationException
[EngineService] Inner exception: Unable to connect to any of the specified MySQL hosts.</StdOut>
        <ErrorInfo>
          <Message>Assert.IsTrue failed. Execution should succeed. Error: Không thể phân tích database schema: Unable to connect to any of the specified MySQL hosts.</Message>
          <StackTrace>   at SqlTestDataGenerator.Tests.RecordCountVerificationTests.ExecuteQueryWithTestDataAsync_LargeRecordCount_ShouldHandleEfficiently() in /workspace/SqlTestDataGenerator.Tests/RecordCountVerificationTests.cs:line 117
</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="b8540ecc-9802-4ad3-b10d-d97e3800bbf7" testId="6db14700-ee73-a039-ac8a-97d4f91c8c74" testName="ExtractNullConstraints_WithIsNull_ShouldExtractCorrectly" computerName="cursor" duration="00:00:00.0018279" startTime="2025-07-06T10:57:02.2721662+00:00" endTime="2025-07-06T10:57:02.2741152+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="b8540ecc-9802-4ad3-b10d-d97e3800bbf7">
      <Output>
        <StdOut>[10:57:02 INF] Extracting comprehensive constraints from SQL query
[10:57:02 INF] Found WHERE clause: e.manager_id IS NULL AND e.department = 'HR'
[10:57:02 INF] Found WHERE equality with alias: e.department = 'HR'
[10:57:02 INF] Found NULL constraint: e.manager_id IS NULL
[10:57:02 INF] Starting EXISTS constraints extraction with two-phase approach
[10:57:02 INF] Completed EXISTS constraints extraction: 0 NOT EXISTS, 0 EXISTS
[10:57:02 INF] Extracted 2 total constraints: 1 WHERE, 0 JOIN, 0 LIKE, 0 IN, 0 BETWEEN, 1 NULL, 0 EXISTS</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="cccbb52b-90b1-4a75-8fde-3573d09fb9a6" testId="738bd56e-e4d1-f571-372f-1f02cb5587ac" testName="GenerateBogusData_Companies_ShouldCreateCompanyData" computerName="cursor" duration="00:00:00.0089730" startTime="2025-07-06T10:57:02.0271430+00:00" endTime="2025-07-06T10:57:02.0362426+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="cccbb52b-90b1-4a75-8fde-3573d09fb9a6">
      <Output>
        <StdOut>[DEBUG] Table companies has 5 columns:
[DEBUG] Column: id, IsIdentity: True, IsGenerated: False, DefaultValue: ''
[DEBUG] Column: name, IsIdentity: False, IsGenerated: False, DefaultValue: ''
[DEBUG] Column: code, IsIdentity: False, IsGenerated: False, DefaultValue: ''
[DEBUG] Column: address, IsIdentity: False, IsGenerated: False, DefaultValue: ''
[DEBUG] Column: created_at, IsIdentity: False, IsGenerated: False, DefaultValue: ''
[DEBUG-T021] Filtered columns for companies: 4 columns (from 5 total)
[DEBUG-T021] Excluded columns: id(Identity:True,Generated:False)
[DEBUG-T021] Included columns: name, code, address, created_at
[DEBUG-T021] Generated SQL for companies: INSERT INTO `companies` (`name`, `code`, `address`, `created_at`) VALUES ('Joanie Sipes', 'CODE_99026_001', '64233 Hackett Roads', '2025-04-04 17:59:52');
[DEBUG-T021] Generated SQL for companies: INSERT INTO `companies` (`name`, `code`, `address`, `created_at`) VALUES ('Deondre McKenzie', 'CODE_59750_002', '9464 O''Connell Street', '2024-12-20 08:40:20');
[DEBUG-T021] Generated SQL for companies: INSERT INTO `companies` (`name`, `code`, `address`, `created_at`) VALUES ('Shakira Williamson', 'CODE_60743_003', '7947 Brekke Mission', '2025-02-03 22:15:46');
Generated 3 company statements
Company: INSERT INTO `companies` (`name`, `code`, `address`, `created_at`) VALUES ('Joanie Sipes', 'CODE_99026_001', '64233 Hacke...
Company: INSERT INTO `companies` (`name`, `code`, `address`, `created_at`) VALUES ('Deondre McKenzie', 'CODE_59750_002', '9464 O'...
Company: INSERT INTO `companies` (`name`, `code`, `address`, `created_at`) VALUES ('Shakira Williamson', 'CODE_60743_003', '7947 ...</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="ec17d678-eacf-4c87-a21b-f151810128db" testId="a360ec56-40aa-5772-8b61-56b24d403398" testName="Mock_AIGeneration_ManualRecordCreation" computerName="cursor" duration="00:00:00.0013929" startTime="2025-07-06T10:57:03.5933260+00:00" endTime="2025-07-06T10:57:03.5948546+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="ec17d678-eacf-4c87-a21b-f151810128db">
      <Output>
        <StdOut>[DEBUG] GetApiKey() method called
[DEBUG] ConfigurationManager result: '' (length: 0)
[DEBUG] Environment variable result: '' (length: 0)
[DEBUG] Using HARDCODED API key for testing
[DEBUG] Gemini API Key configured: True
[DEBUG] API Key length: 39
[DEBUG] API Key preview: AIzaSyCsOz...
[MOCK] Created 2 mock records
[MOCK] Record validation: True
[MOCK] Record: first_name='Phương Anh', last_name='Nguyễn'
[MOCK] Record validation: True
[MOCK] Record: first_name='Minh Phương', last_name='Trần'
[MOCK] All 2 mock records passed validation</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="bc05896c-c573-475c-b1f9-668227fbc37d" testId="8f466810-9566-05f4-5c19-11e1c24ec4a6" testName="GenerateBogusData_MultipleRuns_ShouldAlwaysProduceUniqueKeys" computerName="cursor" duration="00:00:00.0236258" startTime="2025-07-06T10:57:03.6558983+00:00" endTime="2025-07-06T10:57:03.6797010+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="bc05896c-c573-475c-b1f9-668227fbc37d">
      <Output>
        <StdOut>=== RUN 1 ===
[DEBUG] Table companies has 2 columns:
[DEBUG] Column: id, IsIdentity: True, IsGenerated: False, DefaultValue: ''
[DEBUG] Column: name, IsIdentity: False, IsGenerated: False, DefaultValue: ''
[DEBUG-T021] Filtered columns for companies: 1 columns (from 2 total)
[DEBUG-T021] Excluded columns: id(Identity:True,Generated:False)
[DEBUG-T021] Included columns: name
[DEBUG-T021] Generated SQL for companies: INSERT INTO `companies` (`name`) VALUES ('Danny Wunsch');
[DEBUG-T021] Generated SQL for companies: INSERT INTO `companies` (`name`) VALUES ('Gracie Bailey');
[DEBUG-T021] Generated SQL for companies: INSERT INTO `companies` (`name`) VALUES ('Aida Keebler');
[DEBUG-T021] Generated SQL for companies: INSERT INTO `companies` (`name`) VALUES ('Dovie Shields');
[DEBUG-T021] Generated SQL for companies: INSERT INTO `companies` (`name`) VALUES ('Daniela Stroman');
[DEBUG-T021] Generated SQL for companies: INSERT INTO `companies` (`name`) VALUES ('Skylar Streich');
[DEBUG-T021] Generated SQL for companies: INSERT INTO `companies` (`name`) VALUES ('Dannie Dickens');
[DEBUG-T021] Generated SQL for companies: INSERT INTO `companies` (`name`) VALUES ('Brock Schmitt');
[DEBUG] Table roles has 2 columns:
[DEBUG] Column: id, IsIdentity: True, IsGenerated: False, DefaultValue: ''
[DEBUG] Column: name, IsIdentity: False, IsGenerated: False, DefaultValue: ''
[DEBUG-T021] Filtered columns for roles: 1 columns (from 2 total)
[DEBUG-T021] Excluded columns: id(Identity:True,Generated:False)
[DEBUG-T021] Included columns: name
[DEBUG-T021] Generated SQL for roles: INSERT INTO `roles` (`name`) VALUES ('Marisa Auer');
[DEBUG-T021] Generated SQL for roles: INSERT INTO `roles` (`name`) VALUES ('Kade Rath');
[DEBUG-T021] Generated SQL for roles: INSERT INTO `roles` (`name`) VALUES ('Alvina Wiegand');
[DEBUG-T021] Generated SQL for roles: INSERT INTO `roles` (`name`) VALUES ('Cathrine Reichert');
[DEBUG-T021] Generated SQL for roles: INSERT INTO `roles` (`name`) VALUES ('Mozelle Rogahn');
[DEBUG-T021] Generated SQL for roles: INSERT INTO `roles` (`name`) VALUES ('Dewayne Kozey');
[DEBUG-T021] Generated SQL for roles: INSERT INTO `roles` (`name`) VALUES ('Lonie Blick');
[DEBUG-T021] Generated SQL for roles: INSERT INTO `roles` (`name`) VALUES ('Scot Welch');
[DEBUG] Table users has 3 columns:
[DEBUG] Column: id, IsIdentity: True, IsGenerated: False, DefaultValue: ''
[DEBUG] Column: username, IsIdentity: False, IsGenerated: False, DefaultValue: ''
[DEBUG] Column: company_id, IsIdentity: False, IsGenerated: False, DefaultValue: ''
[DEBUG-T021] Filtered columns for users: 2 columns (from 3 total)
[DEBUG-T021] Excluded columns: id(Identity:True,Generated:False)
[DEBUG-T021] Included columns: username, company_id
[DEBUG-T021] Generated SQL for users: INSERT INTO `users` (`username`, `company_id`) VALUES ('Felicia.Waters', 2);
[DEBUG-T021] Generated SQL for users: INSERT INTO `users` (`username`, `company_id`) VALUES ('Eileen8', 3);
[DEBUG-T021] Generated SQL for users: INSERT INTO `users` (`username`, `company_id`) VALUES ('Nayeli.Roberts', 4);
[DEBUG-T021] Generated SQL for users: INSERT INTO `users` (`username`, `company_id`) VALUES ('Bridget.Boyer84', 5);
[DEBUG-T021] Generated SQL for users: INSERT INTO `users` (`username`, `company_id`) VALUES ('Carolyn32', 6);
[DEBUG-T021] Generated SQL for users: INSERT INTO `users` (`username`, `company_id`) VALUES ('Bernadine51', 7);
[DEBUG-T021] Generated SQL for users: INSERT INTO `users` (`username`, `company_id`) VALUES ('Arjun.Bogan35', 8);
[DEBUG-T021] Generated SQL for users: INSERT INTO `users` (`username`, `company_id`) VALUES ('Ralph13', 1);
[DEBUG] Table user_roles has 4 columns:
[DEBUG] Column: user_id, IsIdentity: False, IsGenerated: False, DefaultValue: ''
[DEBUG] Column: role_id, IsIdentity: False, IsGenerated: False, DefaultValue: ''
[DEBUG] Column: assigned_by, IsIdentity: False, IsGenerated: False, DefaultValue: ''
[DEBUG] Column: is_active, IsIdentity: False, IsGenerated: False, DefaultValue: ''
[DEBUG-T021] Filtered columns for user_roles: 4 columns (from 4 total)
[DEBUG-T021] Excluded columns: 
[DEBUG-T021] Included columns: user_id, role_id, assigned_by, is_active
[DEBUG] Generated SQL for user_roles: INSERT INTO `user_roles` (`user_id`, `role_id`, `assigned_by`, `is_active`) VALUES (2, 4, 7, 43);
[DEBUG] Generated SQL for user_roles: INSERT INTO `user_roles` (`user_id`, `role_id`, `assigned_by`, `is_active`) VALUES (3, 5, 8, 60);
[DEBUG] Generated SQL for user_roles: INSERT INTO `user_roles` (`user_id`, `role_id`, `assigned_by`, `is_active`) VALUES (4, 6, 1, 44);
[DEBUG] Generated SQL for user_roles: INSERT INTO `user_roles` (`user_id`, `role_id`, `assigned_by`, `is_active`) VALUES (5, 7, 2, 20);
[DEBUG] Generated SQL for user_roles: INSERT INTO `user_roles` (`user_id`, `role_id`, `assigned_by`, `is_active`) VALUES (6, 8, 3, 79);
[DEBUG] Generated SQL for user_roles: INSERT INTO `user_roles` (`user_id`, `role_id`, `assigned_by`, `is_active`) VALUES (7, 1, 4, 75);
[DEBUG] Generated SQL for user_roles: INSERT INTO `user_roles` (`user_id`, `role_id`, `assigned_by`, `is_active`) VALUES (8, 2, 5, 28);
[DEBUG] Generated SQL for user_roles: INSERT INTO `user_roles` (`user_id`, `role_id`, `assigned_by`, `is_active`) VALUES (1, 3, 6, 41);
Generated combinations: 2-4, 3-5, 4-6, 5-7, 6-8, 7-1, 8-2, 1-3

=== RUN 2 ===
[DEBUG] Table companies has 2 columns:
[DEBUG] Column: id, IsIdentity: True, IsGenerated: False, DefaultValue: ''
[DEBUG] Column: name, IsIdentity: False, IsGenerated: False, DefaultValue: ''
[DEBUG-T021] Filtered columns for companies: 1 columns (from 2 total)
[DEBUG-T021] Excluded columns: id(Identity:True,Generated:False)
[DEBUG-T021] Included columns: name
[DEBUG-T021] Generated SQL for companies: INSERT INTO `companies` (`name`) VALUES ('Bart Hane');
[DEBUG-T021] Generated SQL for companies: INSERT INTO `companies` (`name`) VALUES ('Shakira Kulas');
[DEBUG-T021] Generated SQL for companies: INSERT INTO `companies` (`name`) VALUES ('Adonis Rowe');
[DEBUG-T021] Generated SQL for companies: INSERT INTO `companies` (`name`) VALUES ('Tyrel Rowe');
[DEBUG-T021] Generated SQL for companies: INSERT INTO `companies` (`name`) VALUES ('Keira Pfeffer');
[DEBUG-T021] Generated SQL for companies: INSERT INTO `companies` (`name`) VALUES ('Brady Durgan');
[DEBUG-T021] Generated SQL for companies: INSERT INTO `companies` (`name`) VALUES ('Franz Dietrich');
[DEBUG-T021] Generated SQL for companies: INSERT INTO `companies` (`name`) VALUES ('Esmeralda Schaden');
[DEBUG] Table roles has 2 columns:
[DEBUG] Column: id, IsIdentity: True, IsGenerated: False, DefaultValue: ''
[DEBUG] Column: name, IsIdentity: False, IsGenerated: False, DefaultValue: ''
[DEBUG-T021] Filtered columns for roles: 1 columns (from 2 total)
[DEBUG-T021] Excluded columns: id(Identity:True,Generated:False)
[DEBUG-T021] Included columns: name
[DEBUG-T021] Generated SQL for roles: INSERT INTO `roles` (`name`) VALUES ('Christa Bode');
[DEBUG-T021] Generated SQL for roles: INSERT INTO `roles` (`name`) VALUES ('Jessie Nikolaus');
[DEBUG-T021] Generated SQL for roles: INSERT INTO `roles` (`name`) VALUES ('Delta Leannon');
[DEBUG-T021] Generated SQL for roles: INSERT INTO `roles` (`name`) VALUES ('Natalia Runolfsson');
[DEBUG-T021] Generated SQL for roles: INSERT INTO `roles` (`name`) VALUES ('Irma Ryan');
[DEBUG-T021] Generated SQL for roles: INSERT INTO `roles` (`name`) VALUES ('Ulises Murazik');
[DEBUG-T021] Generated SQL for roles: INSERT INTO `roles` (`name`) VALUES ('Bobbie Mertz');
[DEBUG-T021] Generated SQL for roles: INSERT INTO `roles` (`name`) VALUES ('Ronaldo Kshlerin');
[DEBUG] Table users has 3 columns:
[DEBUG] Column: id, IsIdentity: True, IsGenerated: False, DefaultValue: ''
[DEBUG] Column: username, IsIdentity: False, IsGenerated: False, DefaultValue: ''
[DEBUG] Column: company_id, IsIdentity: False, IsGenerated: False, DefaultValue: ''
[DEBUG-T021] Filtered columns for users: 2 columns (from 3 total)
[DEBUG-T021] Excluded columns: id(Identity:True,Generated:False)
[DEBUG-T021] Included columns: username, company_id
[DEBUG-T021] Generated SQL for users: INSERT INTO `users` (`username`, `company_id`) VALUES ('Ivah.Baumbach72', 2);
[DEBUG-T021] Generated SQL for users: INSERT INTO `users` (`username`, `company_id`) VALUES ('Uriel25', 3);
[DEBUG-T021] Generated SQL for users: INSERT INTO `users` (`username`, `company_id`) VALUES ('Amir32', 4);
[DEBUG-T021] Generated SQL for users: INSERT INTO `users` (`username`, `company_id`) VALUES ('Rod.DAmore16', 5);
[DEBUG-T021] Generated SQL for users: INSERT INTO `users` (`username`, `company_id`) VALUES ('Anjali52', 6);
[DEBUG-T021] Generated SQL for users: INSERT INTO `users` (`username`, `company_id`) VALUES ('Loy_Cole', 7);
[DEBUG-T021] Generated SQL for users: INSERT INTO `users` (`username`, `company_id`) VALUES ('Anissa_Reichert56', 8);
[DEBUG-T021] Generated SQL for users: INSERT INTO `users` (`username`, `company_id`) VALUES ('Santiago_Towne96', 1);
[DEBUG] Table user_roles has 4 columns:
[DEBUG] Column: user_id, IsIdentity: False, IsGenerated: False, DefaultValue: ''
[DEBUG] Column: role_id, IsIdentity: False, IsGenerated: False, DefaultValue: ''
[DEBUG] Column: assigned_by, IsIdentity: False, IsGenerated: False, DefaultValue: ''
[DEBUG] Column: is_active, IsIdentity: False, IsGenerated: False, DefaultValue: ''
[DEBUG-T021] Filtered columns for user_roles: 4 columns (from 4 total)
[DEBUG-T021] Excluded columns: 
[DEBUG-T021] Included columns: user_id, role_id, assigned_by, is_active
[DEBUG] Generated SQL for user_roles: INSERT INTO `user_roles` (`user_id`, `role_id`, `assigned_by`, `is_active`) VALUES (2, 4, 7, 45);
[DEBUG] Generated SQL for user_roles: INSERT INTO `user_roles` (`user_id`, `role_id`, `assigned_by`, `is_active`) VALUES (3, 5, 8, 79);
[DEBUG] Generated SQL for user_roles: INSERT INTO `user_roles` (`user_id`, `role_id`, `assigned_by`, `is_active`) VALUES (4, 6, 1, 70);
[DEBUG] Generated SQL for user_roles: INSERT INTO `user_roles` (`user_id`, `role_id`, `assigned_by`, `is_active`) VALUES (5, 7, 2, 2);
[DEBUG] Generated SQL for user_roles: INSERT INTO `user_roles` (`user_id`, `role_id`, `assigned_by`, `is_active`) VALUES (6, 8, 3, 73);
[DEBUG] Generated SQL for user_roles: INSERT INTO `user_roles` (`user_id`, `role_id`, `assigned_by`, `is_active`) VALUES (7, 1, 4, 15);
[DEBUG] Generated SQL for user_roles: INSERT INTO `user_roles` (`user_id`, `role_id`, `assigned_by`, `is_active`) VALUES (8, 2, 5, 49);
[DEBUG] Generated SQL for user_roles: INSERT INTO `user_roles` (`user_id`, `role_id`, `assigned_by`, `is_active`) VALUES (1, 3, 6, 60);
Generated combinations: 2-4, 3-5, 4-6, 5-7, 6-8, 7-1, 8-2, 1-3

=== RUN 3 ===
[DEBUG] Table companies has 2 columns:
[DEBUG] Column: id, IsIdentity: True, IsGenerated: False, DefaultValue: ''
[DEBUG] Column: name, IsIdentity: False, IsGenerated: False, DefaultValue: ''
[DEBUG-T021] Filtered columns for companies: 1 columns (from 2 total)
[DEBUG-T021] Excluded columns: id(Identity:True,Generated:False)
[DEBUG-T021] Included columns: name
[DEBUG-T021] Generated SQL for companies: INSERT INTO `companies` (`name`) VALUES ('Providenci Erdman');
[DEBUG-T021] Generated SQL for companies: INSERT INTO `companies` (`name`) VALUES ('Jaleel Nader');
[DEBUG-T021] Generated SQL for companies: INSERT INTO `companies` (`name`) VALUES ('Landen Beier');
[DEBUG-T021] Generated SQL for companies: INSERT INTO `companies` (`name`) VALUES ('Cassie Schneider');
[DEBUG-T021] Generated SQL for companies: INSERT INTO `companies` (`name`) VALUES ('Mabel Will');
[DEBUG-T021] Generated SQL for companies: INSERT INTO `companies` (`name`) VALUES ('Rosina Reilly');
[DEBUG-T021] Generated SQL for companies: INSERT INTO `companies` (`name`) VALUES ('Moses Legros');
[DEBUG-T021] Generated SQL for companies: INSERT INTO `companies` (`name`) VALUES ('Ines Gorczany');
[DEBUG] Table roles has 2 columns:
[DEBUG] Column: id, IsIdentity: True, IsGenerated: False, DefaultValue: ''
[DEBUG] Column: name, IsIdentity: False, IsGenerated: False, DefaultValue: ''
[DEBUG-T021] Filtered columns for roles: 1 columns (from 2 total)
[DEBUG-T021] Excluded columns: id(Identity:True,Generated:False)
[DEBUG-T021] Included columns: name
[DEBUG-T021] Generated SQL for roles: INSERT INTO `roles` (`name`) VALUES ('Alize Borer');
[DEBUG-T021] Generated SQL for roles: INSERT INTO `roles` (`name`) VALUES ('Giuseppe Kassulke');
[DEBUG-T021] Generated SQL for roles: INSERT INTO `roles` (`name`) VALUES ('Betsy Stracke');
[DEBUG-T021] Generated SQL for roles: INSERT INTO `roles` (`name`) VALUES ('Gay Legros');
[DEBUG-T021] Generated SQL for roles: INSERT INTO `roles` (`name`) VALUES ('Nikolas Hane');
[DEBUG-T021] Generated SQL for roles: INSERT INTO `roles` (`name`) VALUES ('Jodie Tremblay');
[DEBUG-T021] Generated SQL for roles: INSERT INTO `roles` (`name`) VALUES ('Marisa Ledner');
[DEBUG-T021] Generated SQL for roles: INSERT INTO `roles` (`name`) VALUES ('Lavina Collier');
[DEBUG] Table users has 3 columns:
[DEBUG] Column: id, IsIdentity: True, IsGenerated: False, DefaultValue: ''
[DEBUG] Column: username, IsIdentity: False, IsGenerated: False, DefaultValue: ''
[DEBUG] Column: company_id, IsIdentity: False, IsGenerated: False, DefaultValue: ''
[DEBUG-T021] Filtered columns for users: 2 columns (from 3 total)
[DEBUG-T021] Excluded columns: id(Identity:True,Generated:False)
[DEBUG-T021] Included columns: username, company_id
[DEBUG-T021] Generated SQL for users: INSERT INTO `users` (`username`, `company_id`) VALUES ('Camden45', 2);
[DEBUG-T021] Generated SQL for users: INSERT INTO `users` (`username`, `company_id`) VALUES ('Marianne48', 3);
[DEBUG-T021] Generated SQL for users: INSERT INTO `users` (`username`, `company_id`) VALUES ('Kaci_Wuckert62', 4);
[DEBUG-T021] Generated SQL for users: INSERT INTO `users` (`username`, `company_id`) VALUES ('Dorothea_Waters', 5);
[DEBUG-T021] Generated SQL for users: INSERT INTO `users` (`username`, `company_id`) VALUES ('Nichole_Bosco89', 6);
[DEBUG-T021] Generated SQL for users: INSERT INTO `users` (`username`, `company_id`) VALUES ('Melody38', 7);
[DEBUG-T021] Generated SQL for users: INSERT INTO `users` (`username`, `company_id`) VALUES ('Althea_Renner', 8);
[DEBUG-T021] Generated SQL for users: INSERT INTO `users` (`username`, `company_id`) VALUES ('Zoila_Buckridge72', 1);
[DEBUG] Table user_roles has 4 columns:
[DEBUG] Column: user_id, IsIdentity: False, IsGenerated: False, DefaultValue: ''
[DEBUG] Column: role_id, IsIdentity: False, IsGenerated: False, DefaultValue: ''
[DEBUG] Column: assigned_by, IsIdentity: False, IsGenerated: False, DefaultValue: ''
[DEBUG] Column: is_active, IsIdentity: False, IsGenerated: False, DefaultValue: ''
[DEBUG-T021] Filtered columns for user_roles: 4 columns (from 4 total)
[DEBUG-T021] Excluded columns: 
[DEBUG-T021] Included columns: user_id, role_id, assigned_by, is_active
[DEBUG] Generated SQL for user_roles: INSERT INTO `user_roles` (`user_id`, `role_id`, `assigned_by`, `is_active`) VALUES (2, 4, 7, 19);
[DEBUG] Generated SQL for user_roles: INSERT INTO `user_roles` (`user_id`, `role_id`, `assigned_by`, `is_active`) VALUES (3, 5, 8, 62);
[DEBUG] Generated SQL for user_roles: INSERT INTO `user_roles` (`user_id`, `role_id`, `assigned_by`, `is_active`) VALUES (4, 6, 1, 37);
[DEBUG] Generated SQL for user_roles: INSERT INTO `user_roles` (`user_id`, `role_id`, `assigned_by`, `is_active`) VALUES (5, 7, 2, 76);
[DEBUG] Generated SQL for user_roles: INSERT INTO `user_roles` (`user_id`, `role_id`, `assigned_by`, `is_active`) VALUES (6, 8, 3, 68);
[DEBUG] Generated SQL for user_roles: INSERT INTO `user_roles` (`user_id`, `role_id`, `assigned_by`, `is_active`) VALUES (7, 1, 4, 75);
[DEBUG] Generated SQL for user_roles: INSERT INTO `user_roles` (`user_id`, `role_id`, `assigned_by`, `is_active`) VALUES (8, 2, 5, 94);
[DEBUG] Generated SQL for user_roles: INSERT INTO `user_roles` (`user_id`, `role_id`, `assigned_by`, `is_active`) VALUES (1, 3, 6, 33);
Generated combinations: 2-4, 3-5, 4-6, 5-7, 6-8, 7-1, 8-2, 1-3

=== RUN 4 ===
[DEBUG] Table companies has 2 columns:
[DEBUG] Column: id, IsIdentity: True, IsGenerated: False, DefaultValue: ''
[DEBUG] Column: name, IsIdentity: False, IsGenerated: False, DefaultValue: ''
[DEBUG-T021] Filtered columns for companies: 1 columns (from 2 total)
[DEBUG-T021] Excluded columns: id(Identity:True,Generated:False)
[DEBUG-T021] Included columns: name
[DEBUG-T021] Generated SQL for companies: INSERT INTO `companies` (`name`) VALUES ('Kristoffer Turcotte');
[DEBUG-T021] Generated SQL for companies: INSERT INTO `companies` (`name`) VALUES ('Madisyn Blanda');
[DEBUG-T021] Generated SQL for companies: INSERT INTO `companies` (`name`) VALUES ('Valentine Quigley');
[DEBUG-T021] Generated SQL for companies: INSERT INTO `companies` (`name`) VALUES ('Lincoln Lubowitz');
[DEBUG-T021] Generated SQL for companies: INSERT INTO `companies` (`name`) VALUES ('Antwon Batz');
[DEBUG-T021] Generated SQL for companies: INSERT INTO `companies` (`name`) VALUES ('Audra Schaefer');
[DEBUG-T021] Generated SQL for companies: INSERT INTO `companies` (`name`) VALUES ('Brice Lang');
[DEBUG-T021] Generated SQL for companies: INSERT INTO `companies` (`name`) VALUES ('Odie Moore');
[DEBUG] Table roles has 2 columns:
[DEBUG] Column: id, IsIdentity: True, IsGenerated: False, DefaultValue: ''
[DEBUG] Column: name, IsIdentity: False, IsGenerated: False, DefaultValue: ''
[DEBUG-T021] Filtered columns for roles: 1 columns (from 2 total)
[DEBUG-T021] Excluded columns: id(Identity:True,Generated:False)
[DEBUG-T021] Included columns: name
[DEBUG-T021] Generated SQL for roles: INSERT INTO `roles` (`name`) VALUES ('Sasha Rath');
[DEBUG-T021] Generated SQL for roles: INSERT INTO `roles` (`name`) VALUES ('Johnny Wilkinson');
[DEBUG-T021] Generated SQL for roles: INSERT INTO `roles` (`name`) VALUES ('Kale Maggio');
[DEBUG-T021] Generated SQL for roles: INSERT INTO `roles` (`name`) VALUES ('Alexandra Purdy');
[DEBUG-T021] Generated SQL for roles: INSERT INTO `roles` (`name`) VALUES ('Thurman Blanda');
[DEBUG-T021] Generated SQL for roles: INSERT INTO `roles` (`name`) VALUES ('Bette Towne');
[DEBUG-T021] Generated SQL for roles: INSERT INTO `roles` (`name`) VALUES ('Garrick Bechtelar');
[DEBUG-T021] Generated SQL for roles: INSERT INTO `roles` (`name`) VALUES ('Jeanette Wolf');
[DEBUG] Table users has 3 columns:
[DEBUG] Column: id, IsIdentity: True, IsGenerated: False, DefaultValue: ''
[DEBUG] Column: username, IsIdentity: False, IsGenerated: False, DefaultValue: ''
[DEBUG] Column: company_id, IsIdentity: False, IsGenerated: False, DefaultValue: ''
[DEBUG-T021] Filtered columns for users: 2 columns (from 3 total)
[DEBUG-T021] Excluded columns: id(Identity:True,Generated:False)
[DEBUG-T021] Included columns: username, company_id
[DEBUG-T021] Generated SQL for users: INSERT INTO `users` (`username`, `company_id`) VALUES ('Oma.Blanda70', 2);
[DEBUG-T021] Generated SQL for users: INSERT INTO `users` (`username`, `company_id`) VALUES ('Celine41', 3);
[DEBUG-T021] Generated SQL for users: INSERT INTO `users` (`username`, `company_id`) VALUES ('Emilie.Langosh71', 4);
[DEBUG-T021] Generated SQL for users: INSERT INTO `users` (`username`, `company_id`) VALUES ('Mertie.Fritsch', 5);
[DEBUG-T021] Generated SQL for users: INSERT INTO `users` (`username`, `company_id`) VALUES ('Crystel74', 6);
[DEBUG-T021] Generated SQL for users: INSERT INTO `users` (`username`, `company_id`) VALUES ('Wilber.OReilly18', 7);
[DEBUG-T021] Generated SQL for users: INSERT INTO `users` (`username`, `company_id`) VALUES ('Stanford.Pfannerstill87', 8);
[DEBUG-T021] Generated SQL for users: INSERT INTO `users` (`username`, `company_id`) VALUES ('Olen.Luettgen', 1);
[DEBUG] Table user_roles has 4 columns:
[DEBUG] Column: user_id, IsIdentity: False, IsGenerated: False, DefaultValue: ''
[DEBUG] Column: role_id, IsIdentity: False, IsGenerated: False, DefaultValue: ''
[DEBUG] Column: assigned_by, IsIdentity: False, IsGenerated: False, DefaultValue: ''
[DEBUG] Column: is_active, IsIdentity: False, IsGenerated: False, DefaultValue: ''
[DEBUG-T021] Filtered columns for user_roles: 4 columns (from 4 total)
[DEBUG-T021] Excluded columns: 
[DEBUG-T021] Included columns: user_id, role_id, assigned_by, is_active
[DEBUG] Generated SQL for user_roles: INSERT INTO `user_roles` (`user_id`, `role_id`, `assigned_by`, `is_active`) VALUES (2, 4, 7, 30);
[DEBUG] Generated SQL for user_roles: INSERT INTO `user_roles` (`user_id`, `role_id`, `assigned_by`, `is_active`) VALUES (3, 5, 8, 21);
[DEBUG] Generated SQL for user_roles: INSERT INTO `user_roles` (`user_id`, `role_id`, `assigned_by`, `is_active`) VALUES (4, 6, 1, 81);
[DEBUG] Generated SQL for user_roles: INSERT INTO `user_roles` (`user_id`, `role_id`, `assigned_by`, `is_active`) VALUES (5, 7, 2, 74);
[DEBUG] Generated SQL for user_roles: INSERT INTO `user_roles` (`user_id`, `role_id`, `assigned_by`, `is_active`) VALUES (6, 8, 3, 41);
[DEBUG] Generated SQL for user_roles: INSERT INTO `user_roles` (`user_id`, `role_id`, `assigned_by`, `is_active`) VALUES (7, 1, 4, 67);
[DEBUG] Generated SQL for user_roles: INSERT INTO `user_roles` (`user_id`, `role_id`, `assigned_by`, `is_active`) VALUES (8, 2, 5, 8);
[DEBUG] Generated SQL for user_roles: INSERT INTO `user_roles` (`user_id`, `role_id`, `assigned_by`, `is_active`) VALUES (1, 3, 6, 43);
Generated combinations: 2-4, 3-5, 4-6, 5-7, 6-8, 7-1, 8-2, 1-3

=== RUN 5 ===
[DEBUG] Table companies has 2 columns:
[DEBUG] Column: id, IsIdentity: True, IsGenerated: False, DefaultValue: ''
[DEBUG] Column: name, IsIdentity: False, IsGenerated: False, DefaultValue: ''
[DEBUG-T021] Filtered columns for companies: 1 columns (from 2 total)
[DEBUG-T021] Excluded columns: id(Identity:True,Generated:False)
[DEBUG-T021] Included columns: name
[DEBUG-T021] Generated SQL for companies: INSERT INTO `companies` (`name`) VALUES ('Lenna Yundt');
[DEBUG-T021] Generated SQL for companies: INSERT INTO `companies` (`name`) VALUES ('Juliana Carroll');
[DEBUG-T021] Generated SQL for companies: INSERT INTO `companies` (`name`) VALUES ('D''angelo White');
[DEBUG-T021] Generated SQL for companies: INSERT INTO `companies` (`name`) VALUES ('Creola Reichel');
[DEBUG-T021] Generated SQL for companies: INSERT INTO `companies` (`name`) VALUES ('Glenda Bergstrom');
[DEBUG-T021] Generated SQL for companies: INSERT INTO `companies` (`name`) VALUES ('Estrella Labadie');
[DEBUG-T021] Generated SQL for companies: INSERT INTO `companies` (`name`) VALUES ('Adolphus Borer');
[DEBUG-T021] Generated SQL for companies: INSERT INTO `companies` (`name`) VALUES ('Daron Rogahn');
[DEBUG] Table roles has 2 columns:
[DEBUG] Column: id, IsIdentity: True, IsGenerated: False, DefaultValue: ''
[DEBUG] Column: name, IsIdentity: False, IsGenerated: False, DefaultValue: ''
[DEBUG-T021] Filtered columns for roles: 1 columns (from 2 total)
[DEBUG-T021] Excluded columns: id(Identity:True,Generated:False)
[DEBUG-T021] Included columns: name
[DEBUG-T021] Generated SQL for roles: INSERT INTO `roles` (`name`) VALUES ('Shemar Yost');
[DEBUG-T021] Generated SQL for roles: INSERT INTO `roles` (`name`) VALUES ('Vallie Raynor');
[DEBUG-T021] Generated SQL for roles: INSERT INTO `roles` (`name`) VALUES ('Shane Kunde');
[DEBUG-T021] Generated SQL for roles: INSERT INTO `roles` (`name`) VALUES ('Tracey Hintz');
[DEBUG-T021] Generated SQL for roles: INSERT INTO `roles` (`name`) VALUES ('Tanner Stehr');
[DEBUG-T021] Generated SQL for roles: INSERT INTO `roles` (`name`) VALUES ('Izabella Deckow');
[DEBUG-T021] Generated SQL for roles: INSERT INTO `roles` (`name`) VALUES ('Earlene Hagenes');
[DEBUG-T021] Generated SQL for roles: INSERT INTO `roles` (`name`) VALUES ('Earline Treutel');
[DEBUG] Table users has 3 columns:
[DEBUG] Column: id, IsIdentity: True, IsGenerated: False, DefaultValue: ''
[DEBUG] Column: username, IsIdentity: False, IsGenerated: False, DefaultValue: ''
[DEBUG] Column: company_id, IsIdentity: False, IsGenerated: False, DefaultValue: ''
[DEBUG-T021] Filtered columns for users: 2 columns (from 3 total)
[DEBUG-T021] Excluded columns: id(Identity:True,Generated:False)
[DEBUG-T021] Included columns: username, company_id
[DEBUG-T021] Generated SQL for users: INSERT INTO `users` (`username`, `company_id`) VALUES ('Cora1', 2);
[DEBUG-T021] Generated SQL for users: INSERT INTO `users` (`username`, `company_id`) VALUES ('Astrid5', 3);
[DEBUG-T021] Generated SQL for users: INSERT INTO `users` (`username`, `company_id`) VALUES ('Austin_Conn', 4);
[DEBUG-T021] Generated SQL for users: INSERT INTO `users` (`username`, `company_id`) VALUES ('Kaylie_Sawayn', 5);
[DEBUG-T021] Generated SQL for users: INSERT INTO `users` (`username`, `company_id`) VALUES ('Theron45', 6);
[DEBUG-T021] Generated SQL for users: INSERT INTO `users` (`username`, `company_id`) VALUES ('Olga_Schumm54', 7);
[DEBUG-T021] Generated SQL for users: INSERT INTO `users` (`username`, `company_id`) VALUES ('Carlotta57', 8);
[DEBUG-T021] Generated SQL for users: INSERT INTO `users` (`username`, `company_id`) VALUES ('Cielo.Fay61', 1);
[DEBUG] Table user_roles has 4 columns:
[DEBUG] Column: user_id, IsIdentity: False, IsGenerated: False, DefaultValue: ''
[DEBUG] Column: role_id, IsIdentity: False, IsGenerated: False, DefaultValue: ''
[DEBUG] Column: assigned_by, IsIdentity: False, IsGenerated: False, DefaultValue: ''
[DEBUG] Column: is_active, IsIdentity: False, IsGenerated: False, DefaultValue: ''
[DEBUG-T021] Filtered columns for user_roles: 4 columns (from 4 total)
[DEBUG-T021] Excluded columns: 
[DEBUG-T021] Included columns: user_id, role_id, assigned_by, is_active
[DEBUG] Generated SQL for user_roles: INSERT INTO `user_roles` (`user_id`, `role_id`, `assigned_by`, `is_active`) VALUES (2, 4, 7, 71);
[DEBUG] Generated SQL for user_roles: INSERT INTO `user_roles` (`user_id`, `role_id`, `assigned_by`, `is_active`) VALUES (3, 5, 8, 91);
[DEBUG] Generated SQL for user_roles: INSERT INTO `user_roles` (`user_id`, `role_id`, `assigned_by`, `is_active`) VALUES (4, 6, 1, 55);
[DEBUG] Generated SQL for user_roles: INSERT INTO `user_roles` (`user_id`, `role_id`, `assigned_by`, `is_active`) VALUES (5, 7, 2, 17);
[DEBUG] Generated SQL for user_roles: INSERT INTO `user_roles` (`user_id`, `role_id`, `assigned_by`, `is_active`) VALUES (6, 8, 3, 68);
[DEBUG] Generated SQL for user_roles: INSERT INTO `user_roles` (`user_id`, `role_id`, `assigned_by`, `is_active`) VALUES (7, 1, 4, 57);
[DEBUG] Generated SQL for user_roles: INSERT INTO `user_roles` (`user_id`, `role_id`, `assigned_by`, `is_active`) VALUES (8, 2, 5, 8);
[DEBUG] Generated SQL for user_roles: INSERT INTO `user_roles` (`user_id`, `role_id`, `assigned_by`, `is_active`) VALUES (1, 3, 6, 56);
Generated combinations: 2-4, 3-5, 4-6, 5-7, 6-8, 7-1, 8-2, 1-3
✅ SUCCESS: All 5 runs produced unique combinations</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="eeb0629a-71a1-47d5-ad6a-a7edfd063853" testId="a07f75f8-8051-4207-c8e1-9b50be77e563" testName="ExtractBooleanConstraints_WithVariousFormats_ShouldExtractCorrectly" computerName="cursor" duration="00:00:00.0021316" startTime="2025-07-06T10:57:02.2482004+00:00" endTime="2025-07-06T10:57:02.2504384+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="eeb0629a-71a1-47d5-ad6a-a7edfd063853">
      <Output>
        <StdOut>[10:57:02 INF] Extracting comprehensive constraints from SQL query
[10:57:02 INF] Found WHERE clause: u.is_active = TRUE AND u.is_verified = 1 AND u.is_deleted = FALSE AND u.is_admin = 0
[10:57:02 INF] Found WHERE equality with alias: u.is_active = 'TRUE'
[10:57:02 INF] Found WHERE equality with alias: u.is_verified = '1'
[10:57:02 INF] Found WHERE equality with alias: u.is_deleted = 'FALSE'
[10:57:02 INF] Found WHERE equality with alias: u.is_admin = '0'
[10:57:02 INF] Found BOOLEAN constraint with alias: u.is_active = TRUE
[10:57:02 INF] Found BOOLEAN constraint with alias: u.is_verified = 1
[10:57:02 INF] Found BOOLEAN constraint with alias: u.is_deleted = FALSE
[10:57:02 INF] Found BOOLEAN constraint with alias: u.is_admin = 0
[10:57:02 INF] Starting EXISTS constraints extraction with two-phase approach
[10:57:02 INF] Completed EXISTS constraints extraction: 0 NOT EXISTS, 0 EXISTS
[10:57:02 INF] Extracted 8 total constraints: 4 WHERE, 0 JOIN, 0 LIKE, 0 IN, 0 BETWEEN, 0 NULL, 0 EXISTS</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="03d1539c-a10c-4ec4-a6e3-96fdaa5ab1a9" testId="1b599d83-b28e-d15e-5626-7477a1fe1c55" testName="TestDailyLimitSimulation" computerName="cursor" duration="00:00:00.0005611" startTime="2025-07-06T10:57:03.6180490+00:00" endTime="2025-07-06T10:57:03.6187552+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="03d1539c-a10c-4ec4-a6e3-96fdaa5ab1a9">
      <Output>
        <ErrorInfo>
          <Message>Assert.AreEqual failed. Expected:&lt;0&gt;. Actual:&lt;1&gt;. </Message>
          <StackTrace>   at SqlTestDataGenerator.Tests.DailyApiLimitTests.TestDailyLimitSimulation() in /workspace/SqlTestDataGenerator.Tests/DailyApiLimitTests.cs:line 84
   at System.RuntimeMethodHandle.InvokeMethod(Object target, Void** arguments, Signature sig, Boolean isConstructor)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="b9887993-6db9-4207-986b-882f0d7c71de" testId="ab7d94f6-5ca5-f08f-3e41-1182b84f4daa" testName="AddRecentConnection_WithNewConnection_ShouldAddToList" computerName="cursor" duration="00:00:00.0030666" startTime="2025-07-06T10:57:02.3546526+00:00" endTime="2025-07-06T10:57:02.3578027+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="b9887993-6db9-4207-986b-882f0d7c71de" />
    <UnitTestResult executionId="4ba4360e-a105-441e-953b-9486157bd767" testId="5bb14654-aea4-fc7b-632f-62555f83aa62" testName="ExecuteQueryWithTestDataAsync_RequestedRecordCount_ShouldGenerateCorrectAmountOfData" computerName="cursor" duration="00:00:00.0050771" startTime="2025-07-06T11:03:06.4649027+00:00" endTime="2025-07-06T11:03:06.4701774+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="4ba4360e-a105-441e-953b-9486157bd767">
      <Output>
        <StdOut>[CentralizedLoggingManager] Initialized. Logs directory: /workspace/logs
[CentralizedLoggingManager] Config source: default
[EngineService] Centralized logs directory: /workspace/logs
[EngineService] Starting execution for MySQL
[EngineService] Analyzing query: 297 chars
[SqlMetadataService] Extracting tables from query: 297 chars
[SqlMetadataService] Clean SQL: 
                SELECT u.id, u.username, u.first_name, u.last_name, u.email, u.date_of_birth
                FROM users u 
                INNER JOIN companies c ON u.company_id = c.id 
             ...
[SqlMetadataService] Pattern '\bFROM\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)(?:\s+(?:AS\s+)?(\w+))?' found 1 matches
[SqlMetadataService] Match: 'FROM users u'
[SqlMetadataService] Found table: users
[SqlMetadataService] Pattern '\b(?:INNER\s+|LEFT\s+|RIGHT\s+|FULL\s+|OUTER\s+)?JOIN\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)(?:\s+(?:AS\s+)?(\w+))?' found 1 matches
[SqlMetadataService] Match: 'INNER JOIN companies c'
[SqlMetadataService] Found table: companies
[SqlMetadataService] Pattern '\bINTO\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)' found 0 matches
[SqlMetadataService] Pattern '\bUPDATE\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)' found 0 matches
[SqlMetadataService] Pattern '\bINSERT\s+INTO\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)' found 0 matches
[SqlMetadataService] Total tables extracted: 2 - users, companies
[EngineService] Metadata extraction failed: Unable to connect to any of the specified MySQL hosts.
[EngineService] Execution failed: Không thể phân tích database schema: Unable to connect to any of the specified MySQL hosts.
[EngineService] Exception type: InvalidOperationException
[EngineService] Inner exception: Unable to connect to any of the specified MySQL hosts.</StdOut>
        <ErrorInfo>
          <Message>Assert.IsTrue failed. Execution should succeed. Error: Không thể phân tích database schema: Unable to connect to any of the specified MySQL hosts.</Message>
          <StackTrace>   at SqlTestDataGenerator.Tests.RecordCountVerificationTests.ExecuteQueryWithTestDataAsync_RequestedRecordCount_ShouldGenerateCorrectAmountOfData() in /workspace/SqlTestDataGenerator.Tests/RecordCountVerificationTests.cs:line 40
</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="8b64da9a-ce61-4384-8bc7-e546309bcbb5" testId="ee222a8f-8775-cb61-ba8e-0d406e0fadb8" testName="ExecuteQueryWithTestDataAsync_RealMySQL_ComplexJoin_ShouldWork" computerName="cursor" duration="00:00:00.0054041" startTime="2025-07-06T11:01:03.9947811+00:00" endTime="2025-07-06T11:01:04.0003078+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="8b64da9a-ce61-4384-8bc7-e546309bcbb5">
      <Output>
        <StdOut>[CentralizedLoggingManager] Initialized. Logs directory: /workspace/logs
[CentralizedLoggingManager] Config source: default
[EngineService] Centralized logs directory: /workspace/logs
=== TEST: Complex JOIN với Real MySQL ===
Tables: users, companies, user_roles, roles
[EngineService] Starting execution for MySQL
[EngineService] Analyzing query: 560 chars
[SqlMetadataService] Extracting tables from query: 560 chars
[SqlMetadataService] Clean SQL: 
            SELECT u.id, u.username, u.email, u.created_at,
                   c.name as company_name, c.code as company_code,
                   r.name as role_name, r.code as role_code,
           ...
[SqlMetadataService] Pattern '\bFROM\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)(?:\s+(?:AS\s+)?(\w+))?' found 1 matches
[SqlMetadataService] Match: 'FROM users u'
[SqlMetadataService] Found table: users
[SqlMetadataService] Pattern '\b(?:INNER\s+|LEFT\s+|RIGHT\s+|FULL\s+|OUTER\s+)?JOIN\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)(?:\s+(?:AS\s+)?(\w+))?' found 3 matches
[SqlMetadataService] Match: 'INNER JOIN companies c'
[SqlMetadataService] Found table: companies
[SqlMetadataService] Match: 'INNER JOIN user_roles ur'
[SqlMetadataService] Found table: user_roles
[SqlMetadataService] Match: 'INNER JOIN roles r'
[SqlMetadataService] Found table: roles
[SqlMetadataService] Pattern '\bINTO\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)' found 0 matches
[SqlMetadataService] Pattern '\bUPDATE\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)' found 0 matches
[SqlMetadataService] Pattern '\bINSERT\s+INTO\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)' found 0 matches
[SqlMetadataService] Total tables extracted: 4 - users, companies, user_roles, roles
[EngineService] Metadata extraction failed: Unable to connect to any of the specified MySQL hosts.
[EngineService] Execution failed: Không thể phân tích database schema: Unable to connect to any of the specified MySQL hosts.
[EngineService] Exception type: InvalidOperationException
[EngineService] Inner exception: Unable to connect to any of the specified MySQL hosts.

Complex JOIN Result:
Success: False
Generated Records: 0
Generated INSERTs: 0
Error: Không thể phân tích database schema: Unable to connect to any of the specified MySQL hosts.</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="4bdb7232-db54-4fe5-bdeb-ed2058245442" testId="67cc85c1-d6cf-52d6-b916-c4fcc25b3e21" testName="TestConnection_MySQL_ShouldConnect" computerName="cursor" duration="00:00:00.0050477" startTime="2025-07-06T11:01:03.9830297+00:00" endTime="2025-07-06T11:01:03.9882234+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="4bdb7232-db54-4fe5-bdeb-ed2058245442">
      <Output>
        <StdOut>[CentralizedLoggingManager] Initialized. Logs directory: /workspace/logs
[CentralizedLoggingManager] Config source: default
[EngineService] Centralized logs directory: /workspace/logs
\ud83d\udd0c Testing MySQL connection...
❌ MySQL connection failed: Assert.IsTrue failed. MySQL connection should succeed</StdOut>
        <ErrorInfo>
          <Message>Assert.Fail failed. Could not connect to MySQL database: Assert.IsTrue failed. MySQL connection should succeed</Message>
          <StackTrace>   at SqlTestDataGenerator.Tests.MySQLIntegrationDuplicateKeyTests.TestConnection_MySQL_ShouldConnect() in /workspace/SqlTestDataGenerator.Tests/MySQLIntegrationDuplicateKeyTests.cs:line 289
</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="95f26d2b-3f34-439e-b110-6b0735cf26cb" testId="31f12ab7-954e-c46c-3c20-787137cd9d64" testName="ExtractExistsConstraints_NoExistsStatements_ShouldReturnEmpty" computerName="cursor" duration="00:00:00.0029673" startTime="2025-07-06T11:01:03.8764687+00:00" endTime="2025-07-06T11:01:03.8795108+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="95f26d2b-3f34-439e-b110-6b0735cf26cb" />
    <UnitTestResult executionId="a145ce08-55e8-4496-aabc-66384c96f366" testId="09384688-af92-b310-fc14-d9dedce48bb9" testName="LoadAppSettings_WithInvalidJson_ShouldReturnDefaults" computerName="cursor" duration="00:00:00.0009553" startTime="2025-07-06T10:57:02.3396527+00:00" endTime="2025-07-06T10:57:02.3406831+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="a145ce08-55e8-4496-aabc-66384c96f366" />
    <UnitTestResult executionId="7b033bae-ae9d-4f09-8bdd-1c1b041569a2" testId="5e00d5b1-4727-db09-8981-fa70944ad954" testName="ExecuteQueryWithTestDataAsync_VietnameseBusinessQuery_MustMatchExpectedRecords" computerName="cursor" duration="00:00:00.0055779" startTime="2025-07-06T11:03:06.4590690+00:00" endTime="2025-07-06T11:03:06.4647624+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="7b033bae-ae9d-4f09-8bdd-1c1b041569a2">
      <Output>
        <StdOut>[CentralizedLoggingManager] Initialized. Logs directory: /workspace/logs
[CentralizedLoggingManager] Config source: default
[EngineService] Centralized logs directory: /workspace/logs
=== VIETNAMESE BUSINESS QUERY TEST: Expected Records = 10 ===
Query filters: Phương names, 1989 birth year, VNEXT company, DD role
[EngineService] Starting execution for MySQL
[EngineService] Converted SQL syntax for MySQL compatibility
[EngineService] Analyzing query: 1015 chars
[SqlMetadataService] Extracting tables from query: 1015 chars
[SqlMetadataService] Clean SQL: 
            SELECT u.id, u.username, u.first_name, u.last_name, u.email, u.date_of_birth, 
                   c.name AS company_name, c.code AS company_code, 
                   r.name AS role_name, ...
[SqlMetadataService] Pattern '\bFROM\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)(?:\s+(?:AS\s+)?(\w+))?' found 1 matches
[SqlMetadataService] Match: 'FROM users u'
[SqlMetadataService] Found table: users
[SqlMetadataService] Pattern '\b(?:INNER\s+|LEFT\s+|RIGHT\s+|FULL\s+|OUTER\s+)?JOIN\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)(?:\s+(?:AS\s+)?(\w+))?' found 3 matches
[SqlMetadataService] Match: 'INNER JOIN companies c'
[SqlMetadataService] Found table: companies
[SqlMetadataService] Match: 'INNER JOIN user_roles ur'
[SqlMetadataService] Found table: user_roles
[SqlMetadataService] Match: 'INNER JOIN roles r'
[SqlMetadataService] Found table: roles
[SqlMetadataService] Pattern '\bINTO\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)' found 0 matches
[SqlMetadataService] Pattern '\bUPDATE\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)' found 0 matches
[SqlMetadataService] Pattern '\bINSERT\s+INTO\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)' found 0 matches
[SqlMetadataService] Total tables extracted: 4 - users, companies, user_roles, roles
[EngineService] Metadata extraction failed: Unable to connect to any of the specified MySQL hosts.
[EngineService] Execution failed: Không thể phân tích database schema: Unable to connect to any of the specified MySQL hosts.
[EngineService] Exception type: InvalidOperationException
[EngineService] Inner exception: Unable to connect to any of the specified MySQL hosts.
Success: False
Generated Records: 0</StdOut>
        <ErrorInfo>
          <Message>Assert.Fail failed. Vietnamese business query test FAILED: Không thể phân tích database schema: Unable to connect to any of the specified MySQL hosts.</Message>
          <StackTrace>   at SqlTestDataGenerator.Tests.RecordCountStrictVerificationTests.ExecuteQueryWithTestDataAsync_VietnameseBusinessQuery_MustMatchExpectedRecords() in /workspace/SqlTestDataGenerator.Tests/RecordCountStrictVerificationTests.cs:line 322
</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="daacac5a-93b7-4318-90fc-64a9ef6c1ff2" testId="91cf582a-d7c9-0374-af53-13b473bf0efd" testName="UTF8Encoding_ConnectionString_ShouldIncludeCharset" computerName="cursor" duration="00:00:00.0001021" startTime="2025-07-06T11:03:06.5070464+00:00" endTime="2025-07-06T11:03:06.5071943+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="daacac5a-93b7-4318-90fc-64a9ef6c1ff2">
      <Output>
        <StdOut>✅ UTF-8 Connection String: Server=localhost;Port=3306;Database=my_database;Uid=root;Pwd=22092012;Connect Timeout=120;Command Timeout=120;CharSet=utf8mb4;Connection Lifetime=300;</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="88017939-38d8-47e7-8e66-097594da3ec4" testId="2162217a-6a03-5264-6e90-0701a49439c9" testName="AddRecentConnection_WithDuplicateConnection_ShouldNotAddDuplicate" computerName="cursor" duration="00:00:00.0034064" startTime="2025-07-06T10:57:02.3585909+00:00" endTime="2025-07-06T10:57:02.3621129+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="88017939-38d8-47e7-8e66-097594da3ec4" />
    <UnitTestResult executionId="f9d51a09-29b0-43b7-ab10-44af0ce0ad13" testId="6c5d5d33-1a99-7e67-e818-0fa2aa6b5a6b" testName="ParseQuery_ComplexVowisQuery_ExtractsAllConstraints" computerName="cursor" duration="00:00:00.0012346" startTime="2025-07-06T11:03:06.6400758+00:00" endTime="2025-07-06T11:03:06.6413853+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="f9d51a09-29b0-43b7-ab10-44af0ce0ad13">
      <Output>
        <StdOut>[SqlMetadataService] Extracting tables from query: 393 chars
[SqlMetadataService] Clean SQL: SELECT v.id, v.title, v.description, v.created_date, v.expiry_date, v.discount_percent, v.discount_amount, v.min_order_value, v.usage_limit, v.used_count, v.is_active, v.created_by, v.updated_by FROM ...
[SqlMetadataService] Pattern '\bFROM\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)(?:\s+(?:AS\s+)?(\w+))?' found 1 matches
[SqlMetadataService] Match: 'FROM vowis v'
[SqlMetadataService] Found table: vowis
[SqlMetadataService] Pattern '\b(?:INNER\s+|LEFT\s+|RIGHT\s+|FULL\s+|OUTER\s+)?JOIN\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)(?:\s+(?:AS\s+)?(\w+))?' found 1 matches
[SqlMetadataService] Match: 'INNER JOIN user_roles ur'
[SqlMetadataService] Found table: user_roles
[SqlMetadataService] Pattern '\bINTO\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)' found 0 matches
[SqlMetadataService] Pattern '\bUPDATE\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)' found 0 matches
[SqlMetadataService] Pattern '\bINSERT\s+INTO\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)' found 0 matches
[SqlMetadataService] Total tables extracted: 2 - vowis, user_roles
Extracted 3 WHERE conditions:
- v.is_active = TRUE
- ur.is_active = TRUE
- v.expiry_date DATE_WITHIN 30_DAY

Extracted 1 JOIN requirements:
- v.created_by = ur.user_id</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="6f0cb3c8-c31a-4729-8575-ae4ee6991d72" testId="f8cae70b-5890-a61a-b866-50948cb50146" testName="TestTimeAvailabilityChecking" computerName="cursor" duration="00:00:00.0008399" startTime="2025-07-06T10:57:03.6161862+00:00" endTime="2025-07-06T10:57:03.6171516+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="6f0cb3c8-c31a-4729-8575-ae4ee6991d72">
      <Output>
        <ErrorInfo>
          <Message>Assert.IsTrue failed. Should be able to call API initially</Message>
          <StackTrace>   at SqlTestDataGenerator.Tests.DailyApiLimitTests.TestTimeAvailabilityChecking() in /workspace/SqlTestDataGenerator.Tests/DailyApiLimitTests.cs:line 65
   at System.RuntimeMethodHandle.InvokeMethod(Object target, Void** arguments, Signature sig, Boolean isConstructor)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="fd8ed11b-0fdf-4653-8fde-8357eb280e1a" testId="69ece138-e613-08f4-1468-66ec2464bc39" testName="ParseQuery_JoinConditions_ShouldExtractJoinRequirements" computerName="cursor" duration="00:00:00.0006731" startTime="2025-07-06T11:03:06.5197048+00:00" endTime="2025-07-06T11:03:06.5204164+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="fd8ed11b-0fdf-4653-8fde-8357eb280e1a">
      <Output>
        <StdOut>[SqlMetadataService] Extracting tables from query: 80 chars
[SqlMetadataService] Clean SQL: SELECT u.name, c.name FROM users u INNER JOIN companies c ON u.company_id = c.id...
[SqlMetadataService] Pattern '\bFROM\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)(?:\s+(?:AS\s+)?(\w+))?' found 1 matches
[SqlMetadataService] Match: 'FROM users u'
[SqlMetadataService] Found table: users
[SqlMetadataService] Pattern '\b(?:INNER\s+|LEFT\s+|RIGHT\s+|FULL\s+|OUTER\s+)?JOIN\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)(?:\s+(?:AS\s+)?(\w+))?' found 1 matches
[SqlMetadataService] Match: 'INNER JOIN companies c'
[SqlMetadataService] Found table: companies
[SqlMetadataService] Pattern '\bINTO\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)' found 0 matches
[SqlMetadataService] Pattern '\bUPDATE\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)' found 0 matches
[SqlMetadataService] Pattern '\bINSERT\s+INTO\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)' found 0 matches
[SqlMetadataService] Total tables extracted: 2 - users, companies
JOIN Debug: Clean query = 'SELECT u.name, c.name FROM users u INNER JOIN companies c ON u.company_id = c.id'
JOIN Debug: Pattern = '(?:INNER\s+|LEFT\s+|RIGHT\s+|FULL\s+|OUTER\s+)?JOIN\s+(\w+)\s+(\w+)\s+ON\s+([^()]+?)(?=\s+(?:INNER|LEFT|RIGHT|FULL|OUTER|WHERE|ORDER|GROUP|LIMIT|$)|$)'
JOIN Debug: Found 1 JOIN matches
JOIN Debug: Match found - Table: 'companies', Alias: 'c', OnClause: 'u.company_id = c.id'
JOIN Debug: Condition pattern match success: True
Found JOIN: u.company_id = c.id</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="b67f190e-b1d5-4241-a5c9-880161a9b8c6" testId="e2987904-5347-d86b-0f48-2a0688bae6a3" testName="ExtractExistsConstraints_NestedParentheses_ShouldHandleCorrectly" computerName="cursor" duration="00:00:00.0018744" startTime="2025-07-06T11:01:03.8713648+00:00" endTime="2025-07-06T11:01:03.8733220+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="b67f190e-b1d5-4241-a5c9-880161a9b8c6" />
    <UnitTestResult executionId="0e3ba66e-9c20-4192-94fc-af6e7f776e11" testId="5d0d9424-0da5-07a1-c647-1345f47027e9" testName="ParseQuery_WithTableAlias_ExtractsCorrectAlias" computerName="cursor" duration="00:00:00.0019486" startTime="2025-07-06T11:03:06.6011052+00:00" endTime="2025-07-06T11:03:06.6031441+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="0e3ba66e-9c20-4192-94fc-af6e7f776e11">
      <Output>
        <StdOut>[11:03:06 INF] SqlQueryParserV2: Parsing SQL query with ScriptDom engine
[11:03:06 DBG] Visiting SelectStatement
[11:03:06 DBG] Found table: users with alias: u
[11:03:06 DBG] Extracting WHERE conditions from clause
[11:03:06 DBG] Found comparison condition: u.age &gt; 25
[11:03:06 INF] ScriptDom extracted 1 WHERE conditions and 0 JOIN requirements</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="36f8bc47-d9e1-47df-a33b-8a9e980dc563" testId="0802db3c-025d-934c-5585-56ad7882a936" testName="TestExtractConstraints_InClausePatterns_ShouldExtractValues" computerName="cursor" duration="00:00:00.0021780" startTime="2025-07-06T11:01:03.9296107+00:00" endTime="2025-07-06T11:01:03.9319960+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="36f8bc47-d9e1-47df-a33b-8a9e980dc563">
      <Output>
        <StdOut>=== IN CLAUSE TEST RESULTS ===
Total Constraints: 3
WHERE Constraints: 0
❌ IN constraints found: 0 (Expected: 0 until implemented)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="e1f4e2ae-ba98-4ee2-91fc-7d1cded08a2d" testId="272b019c-d5ab-f74f-94f3-fa1ad985f3e2" testName="GetOpenAiApiKey_WithValidKey_ShouldReturnKey" computerName="cursor" duration="00:00:00.0008285" startTime="2025-07-06T10:57:02.3635524+00:00" endTime="2025-07-06T10:57:02.3644544+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="e1f4e2ae-ba98-4ee2-91fc-7d1cded08a2d" />
    <UnitTestResult executionId="502d649b-fbc0-4c0e-9e1e-c4eb7c46193e" testId="5ef42c5d-cc7f-66b5-dd72-56f848fdc2ad" testName="ConvertToMySQLSyntax_NestedCaseStatements_ShouldConvertAll" computerName="cursor" duration="00:00:00.0001650" startTime="2025-07-06T11:01:03.9522486+00:00" endTime="2025-07-06T11:01:03.9524762+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="502d649b-fbc0-4c0e-9e1e-c4eb7c46193e">
      <Output>
        <StdOut>✅ Nested CASE statements converted successfully</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="fcf16fb3-263a-4308-af7f-0d9d54f1889e" testId="ca4bdeec-f4a5-473c-d409-9ce11eb71010" testName="ExtractExistsConstraints_WithNotExists_ShouldExtractCorrectly" computerName="cursor" duration="00:00:00.0009330" startTime="2025-07-06T10:57:02.2812003+00:00" endTime="2025-07-06T10:57:02.2822036+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="fcf16fb3-263a-4308-af7f-0d9d54f1889e">
      <Output>
        <StdOut>[10:57:02 INF] Extracting comprehensive constraints from SQL query
[10:57:02 INF] Found WHERE clause: NOT EXISTS ( SELECT 1 FROM orders o WHERE o.customer_id = c.id AND o.status = 'cancelled' )
[10:57:02 INF] Found WHERE equality with alias: o.status = 'cancelled'
[10:57:02 INF] Starting EXISTS constraints extraction with two-phase approach
[10:57:02 INF] Found NOT EXISTS constraint: NOT EXISTS (SELECT 1 FROM orders o WHERE o.customer_id = c.id AND o.status = 'cancelled')
[10:57:02 INF] Completed EXISTS constraints extraction: 1 NOT EXISTS, 0 EXISTS
[10:57:02 INF] Extracted 2 total constraints: 1 WHERE, 0 JOIN, 0 LIKE, 0 IN, 0 BETWEEN, 0 NULL, 1 EXISTS</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="7da1ae93-b98e-41d0-a7ca-34560526c25c" testId="c3543ecf-d632-4b92-de87-add46d298479" testName="ExtractTablesFromQuery_ComplexSQL_ShouldNotContainReservedWords" computerName="cursor" duration="00:00:00.0002973" startTime="2025-07-06T10:57:02.2043646+00:00" endTime="2025-07-06T10:57:02.2047570+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="7da1ae93-b98e-41d0-a7ca-34560526c25c">
      <Output>
        <StdOut>[SqlMetadataService] Extracting tables from query: 1479 chars
[SqlMetadataService] Clean SQL: 
        
        SELECT u.id
            ,u.username
            ,u.first_name
            ,u.last_name
            ,u.email
            ,u.date_of_birth
            ,u.salary
            ,u.departme...
[SqlMetadataService] Pattern '\bFROM\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)(?:\s+(?:AS\s+)?(\w+))?' found 1 matches
[SqlMetadataService] Match: 'FROM users u'
[SqlMetadataService] Found table: users
[SqlMetadataService] Pattern '\b(?:INNER\s+|LEFT\s+|RIGHT\s+|FULL\s+|OUTER\s+)?JOIN\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)(?:\s+(?:AS\s+)?(\w+))?' found 3 matches
[SqlMetadataService] Match: 'INNER JOIN companies c'
[SqlMetadataService] Found table: companies
[SqlMetadataService] Match: 'INNER JOIN user_roles ur'
[SqlMetadataService] Found table: user_roles
[SqlMetadataService] Match: 'INNER JOIN roles r'
[SqlMetadataService] Found table: roles
[SqlMetadataService] Pattern '\bINTO\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)' found 0 matches
[SqlMetadataService] Pattern '\bUPDATE\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)' found 0 matches
[SqlMetadataService] Pattern '\bINSERT\s+INTO\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)' found 0 matches
[SqlMetadataService] Total tables extracted: 4 - users, companies, user_roles, roles</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="ddf1a5b6-8441-48ac-b6e1-a91d339631b4" testId="85993953-c5ea-34f3-0be1-91b596396f0a" testName="ParseQuery_InCondition_ShouldExtractCondition" computerName="cursor" duration="00:00:00.0008407" startTime="2025-07-06T11:03:06.5186723+00:00" endTime="2025-07-06T11:03:06.5195787+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="ddf1a5b6-8441-48ac-b6e1-a91d339631b4">
      <Output>
        <StdOut>[SqlMetadataService] Extracting tables from query: 69 chars
[SqlMetadataService] Clean SQL: SELECT * FROM users WHERE status IN ('active', 'pending', 'verified')...
[SqlMetadataService] Pattern '\bFROM\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)(?:\s+(?:AS\s+)?(\w+))?' found 1 matches
[SqlMetadataService] Match: 'FROM users WHERE'
[SqlMetadataService] Found table: users
[SqlMetadataService] Pattern '\b(?:INNER\s+|LEFT\s+|RIGHT\s+|FULL\s+|OUTER\s+)?JOIN\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)(?:\s+(?:AS\s+)?(\w+))?' found 0 matches
[SqlMetadataService] Pattern '\bINTO\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)' found 0 matches
[SqlMetadataService] Pattern '\bUPDATE\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)' found 0 matches
[SqlMetadataService] Pattern '\bINSERT\s+INTO\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)' found 0 matches
[SqlMetadataService] Total tables extracted: 1 - users
JOIN Debug: Clean query = 'SELECT * FROM users WHERE status IN ('active', 'pending', 'verified')'
JOIN Debug: Pattern = '(?:INNER\s+|LEFT\s+|RIGHT\s+|FULL\s+|OUTER\s+)?JOIN\s+(\w+)\s+(\w+)\s+ON\s+([^()]+?)(?=\s+(?:INNER|LEFT|RIGHT|FULL|OUTER|WHERE|ORDER|GROUP|LIMIT|$)|$)'
JOIN Debug: Found 0 JOIN matches</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="3d5a8d22-2746-4654-b6a1-41989da56a11" testId="0f1b5e3b-a740-7c67-898e-c93ae524edbe" testName="ParseQuery_LikeCondition_ExtractsPattern" computerName="cursor" duration="00:00:00.0004910" startTime="2025-07-06T11:03:06.6370691+00:00" endTime="2025-07-06T11:03:06.6376305+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="3d5a8d22-2746-4654-b6a1-41989da56a11">
      <Output>
        <StdOut>[SqlMetadataService] Extracting tables from query: 53 chars
[SqlMetadataService] Clean SQL: SELECT * FROM products p WHERE p.name LIKE '%iPhone%'...
[SqlMetadataService] Pattern '\bFROM\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)(?:\s+(?:AS\s+)?(\w+))?' found 1 matches
[SqlMetadataService] Match: 'FROM products p'
[SqlMetadataService] Found table: products
[SqlMetadataService] Pattern '\b(?:INNER\s+|LEFT\s+|RIGHT\s+|FULL\s+|OUTER\s+)?JOIN\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)(?:\s+(?:AS\s+)?(\w+))?' found 0 matches
[SqlMetadataService] Pattern '\bINTO\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)' found 0 matches
[SqlMetadataService] Pattern '\bUPDATE\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)' found 0 matches
[SqlMetadataService] Pattern '\bINSERT\s+INTO\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)' found 0 matches
[SqlMetadataService] Total tables extracted: 1 - products</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="c623d98e-6f79-49c7-a163-9e5b73356438" testId="675d804e-7ee5-6644-2c5b-a336f6ed033e" testName="LogInfo_ShouldCreateLogEntry" computerName="cursor" duration="00:00:00.0058876" startTime="2025-07-06T11:01:03.8914284+00:00" endTime="2025-07-06T11:01:03.8975450+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="c623d98e-6f79-49c7-a163-9e5b73356438">
      <Output>
        <StdOut>[CentralizedLoggingManager] Initialized. Logs directory: /workspace/logs
[CentralizedLoggingManager] Config source: default
[LoggerServiceTests] Using centralized log path: /workspace/logs/test-20250706.log
[LogInfo_ShouldCreateLogEntry] Log file content: 2025-07-06 11:01:03.893 | INFORMATION [TEST_CONTEXT] | Test info message | Params: {"TestParam":"value"}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="26d723e3-827c-4900-8e1f-579535ec8604" testId="ac734ebd-fa4e-3d65-08af-7925674fc60e" testName="TC005_10_ExecuteQueryWithTestDataAsync_ProveEngineWorked_WithQuotaExceeded" computerName="cursor" duration="00:02:00.0070805" startTime="2025-07-06T10:57:03.7465259+00:00" endTime="2025-07-06T10:59:03.7537732+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="26d723e3-827c-4900-8e1f-579535ec8604">
      <Output>
        <StdOut>[CentralizedLoggingManager] Initialized. Logs directory: /workspace/logs
[CentralizedLoggingManager] Config source: default
[EngineService] Centralized logs directory: /workspace/logs
=== PROOF TEST: Engine đã hoạt động với quota exceeded ===
Expected: Engine generates data successfully until quota exceeded
Gemini API Key Available: False
[EngineService] Starting execution for MySQL
[EngineService] Analyzing query: 38 chars
[SqlMetadataService] Extracting tables from query: 38 chars
[SqlMetadataService] Clean SQL: SELECT id, username FROM users LIMIT 5...
[SqlMetadataService] Pattern '\bFROM\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)(?:\s+(?:AS\s+)?(\w+))?' found 1 matches
[SqlMetadataService] Match: 'FROM users LIMIT'
[SqlMetadataService] Found table: users
[SqlMetadataService] Pattern '\b(?:INNER\s+|LEFT\s+|RIGHT\s+|FULL\s+|OUTER\s+)?JOIN\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)(?:\s+(?:AS\s+)?(\w+))?' found 0 matches
[SqlMetadataService] Pattern '\bINTO\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)' found 0 matches
[SqlMetadataService] Pattern '\bUPDATE\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)' found 0 matches
[SqlMetadataService] Pattern '\bINSERT\s+INTO\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)' found 0 matches
[SqlMetadataService] Total tables extracted: 1 - users
[EngineService] Metadata extraction failed: Connect Timeout expired.
[EngineService] Execution failed: Không thể phân tích database schema: Connect Timeout expired.
[EngineService] Exception type: InvalidOperationException
[EngineService] Inner exception: Connect Timeout expired.
Result Success: False
Generated Records: 0
Error Message: Không thể phân tích database schema: Connect Timeout expired.
Engine attempted to work but failed: Không thể phân tích database schema: Connect Timeout expired.</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="7179394f-5fa6-4799-9fa1-05889bf907a1" testId="5ddaa2eb-71bb-6afb-d7b7-8346fc647577" testName="ConvertToMySQLSyntax_MixedSyntax_ShouldConvertOnlyNonMySQL" computerName="cursor" duration="00:00:00.0001125" startTime="2025-07-06T11:01:03.9518639+00:00" endTime="2025-07-06T11:01:03.9520375+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="7179394f-5fa6-4799-9fa1-05889bf907a1">
      <Output>
        <StdOut>✅ Mixed syntax converted correctly</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="e7e3a6dd-5795-474a-8f2a-1f4c31226d91" testId="cce9f4cf-aa90-ecb3-649e-ff4fc00300d7" testName="TC008_LeftJoin_WithComplexWhere_ShouldGenerateCorrectData" computerName="cursor" duration="00:00:00.0049253" startTime="2025-07-06T11:01:03.7834183+00:00" endTime="2025-07-06T11:01:03.7884648+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="e7e3a6dd-5795-474a-8f2a-1f4c31226d91">
      <Output>
        <StdOut>[CentralizedLoggingManager] Initialized. Logs directory: /workspace/logs
[CentralizedLoggingManager] Config source: default
[EngineService] Centralized logs directory: /workspace/logs
=== TC008: LEFT JOIN Test ===
Keywords: LEFT JOIN, WHERE, ORDER BY, LIMIT, IS NOT NULL
[EngineService] Starting execution for MySQL
[EngineService] Analyzing query: 532 chars
[SqlMetadataService] Extracting tables from query: 532 chars
[SqlMetadataService] Clean SQL: 
            SELECT u.id, u.username, u.email, 
                   c.name as company_name, c.industry,
                   d.name as department_name
            FROM users u
            LEFT JOIN compa...
[SqlMetadataService] Pattern '\bFROM\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)(?:\s+(?:AS\s+)?(\w+))?' found 1 matches
[SqlMetadataService] Match: 'FROM users u'
[SqlMetadataService] Found table: users
[SqlMetadataService] Pattern '\b(?:INNER\s+|LEFT\s+|RIGHT\s+|FULL\s+|OUTER\s+)?JOIN\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)(?:\s+(?:AS\s+)?(\w+))?' found 2 matches
[SqlMetadataService] Match: 'LEFT JOIN companies c'
[SqlMetadataService] Found table: companies
[SqlMetadataService] Match: 'LEFT JOIN departments d'
[SqlMetadataService] Found table: departments
[SqlMetadataService] Pattern '\bINTO\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)' found 0 matches
[SqlMetadataService] Pattern '\bUPDATE\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)' found 0 matches
[SqlMetadataService] Pattern '\bINSERT\s+INTO\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)' found 0 matches
[SqlMetadataService] Total tables extracted: 3 - users, companies, departments
[EngineService] Metadata extraction failed: Unable to connect to any of the specified MySQL hosts.
[EngineService] Execution failed: Không thể phân tích database schema: Unable to connect to any of the specified MySQL hosts.
[EngineService] Exception type: InvalidOperationException
[EngineService] Inner exception: Unable to connect to any of the specified MySQL hosts.
Result Success: False
Generated Records: 0
Expected error for complex LEFT JOIN: Không thể phân tích database schema: Unable to connect to any of the specified MySQL hosts.</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="80ec0b11-da2a-49b7-9394-db64cff96778" testId="792092c6-d93a-8f16-adcb-8adecb948e81" testName="ParseQuery_WhereEqualityWithBoolean_ShouldExtractCondition" computerName="cursor" duration="00:00:00.0005983" startTime="2025-07-06T11:03:06.5149310+00:00" endTime="2025-07-06T11:03:06.5155787+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="80ec0b11-da2a-49b7-9394-db64cff96778">
      <Output>
        <StdOut>[SqlMetadataService] Extracting tables from query: 42 chars
[SqlMetadataService] Clean SQL: SELECT * FROM users WHERE is_active = TRUE...
[SqlMetadataService] Pattern '\bFROM\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)(?:\s+(?:AS\s+)?(\w+))?' found 1 matches
[SqlMetadataService] Match: 'FROM users WHERE'
[SqlMetadataService] Found table: users
[SqlMetadataService] Pattern '\b(?:INNER\s+|LEFT\s+|RIGHT\s+|FULL\s+|OUTER\s+)?JOIN\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)(?:\s+(?:AS\s+)?(\w+))?' found 0 matches
[SqlMetadataService] Pattern '\bINTO\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)' found 0 matches
[SqlMetadataService] Pattern '\bUPDATE\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)' found 0 matches
[SqlMetadataService] Pattern '\bINSERT\s+INTO\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)' found 0 matches
[SqlMetadataService] Total tables extracted: 1 - users
JOIN Debug: Clean query = 'SELECT * FROM users WHERE is_active = TRUE'
JOIN Debug: Pattern = '(?:INNER\s+|LEFT\s+|RIGHT\s+|FULL\s+|OUTER\s+)?JOIN\s+(\w+)\s+(\w+)\s+ON\s+([^()]+?)(?=\s+(?:INNER|LEFT|RIGHT|FULL|OUTER|WHERE|ORDER|GROUP|LIMIT|$)|$)'
JOIN Debug: Found 0 JOIN matches</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="81f7a358-a0c5-4e77-b296-ada5a069c33a" testId="641ee920-3d9f-c1e4-4220-092e77dba1f3" testName="ParseQuery_NullCondition_ExtractsCorrectly" computerName="cursor" duration="00:00:00.0008393" startTime="2025-07-06T11:03:06.6389560+00:00" endTime="2025-07-06T11:03:06.6398445+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="81f7a358-a0c5-4e77-b296-ada5a069c33a">
      <Output>
        <StdOut>[SqlMetadataService] Extracting tables from query: 72 chars
[SqlMetadataService] Clean SQL: SELECT * FROM users u WHERE u.deleted_at IS NULL AND u.email IS NOT NULL...
[SqlMetadataService] Pattern '\bFROM\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)(?:\s+(?:AS\s+)?(\w+))?' found 1 matches
[SqlMetadataService] Match: 'FROM users u'
[SqlMetadataService] Found table: users
[SqlMetadataService] Pattern '\b(?:INNER\s+|LEFT\s+|RIGHT\s+|FULL\s+|OUTER\s+)?JOIN\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)(?:\s+(?:AS\s+)?(\w+))?' found 0 matches
[SqlMetadataService] Pattern '\bINTO\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)' found 0 matches
[SqlMetadataService] Pattern '\bUPDATE\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)' found 0 matches
[SqlMetadataService] Pattern '\bINSERT\s+INTO\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)' found 0 matches
[SqlMetadataService] Total tables extracted: 1 - users</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="21d5fc8e-c18c-4b28-95b3-c2ded362b413" testId="6b06fba3-635d-2f05-f63d-ba794c09660f" testName="ConvertToMySQLSyntax_DatetimeDays_ShouldConvertToDateAdd" computerName="cursor" duration="00:00:00.0014700" startTime="2025-07-06T11:01:03.9474312+00:00" endTime="2025-07-06T11:01:03.9491638+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="21d5fc8e-c18c-4b28-95b3-c2ded362b413">
      <Output>
        <StdOut>✅ Converted: WHERE expires_at &lt;= datetime('now', '+30 days') -&gt; WHERE expires_at &lt;= DATE_ADD(NOW(), INTERVAL 30 DAY)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="c03b76bd-0ce8-4c9f-af9e-00b5ef1a64d3" testId="8967fa17-c299-4e47-9dde-a8f0a5915c9f" testName="TC019_AdvancedWhereClauses_WithComplexConditions_ShouldFilterCorrectly" computerName="cursor" duration="00:00:00.0056910" startTime="2025-07-06T11:01:03.8425578+00:00" endTime="2025-07-06T11:01:03.8484011+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="c03b76bd-0ce8-4c9f-af9e-00b5ef1a64d3">
      <Output>
        <StdOut>[CentralizedLoggingManager] Initialized. Logs directory: /workspace/logs
[CentralizedLoggingManager] Config source: default
[EngineService] Centralized logs directory: /workspace/logs
=== TC019: Advanced WHERE Clauses Test ===
Keywords: Complex WHERE with AND/OR, BETWEEN, IN, REGEXP, NOT LIKE, IS NOT NULL, LENGTH, NOT EXISTS, Complex ORDER BY
[EngineService] Starting execution for MySQL
[EngineService] Analyzing query: 1181 chars
[SqlMetadataService] Extracting tables from query: 1181 chars
[SqlMetadataService] Clean SQL: 
            SELECT u.id, u.username, u.email, u.salary, u.hire_date,
                   c.name as company_name, c.industry
            FROM users u
            INNER JOIN companies c ON u.company_id ...
[SqlMetadataService] Pattern '\bFROM\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)(?:\s+(?:AS\s+)?(\w+))?' found 2 matches
[SqlMetadataService] Match: 'FROM users u'
[SqlMetadataService] Found table: users
[SqlMetadataService] Match: 'FROM user_roles ur'
[SqlMetadataService] Found table: user_roles
[SqlMetadataService] Pattern '\b(?:INNER\s+|LEFT\s+|RIGHT\s+|FULL\s+|OUTER\s+)?JOIN\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)(?:\s+(?:AS\s+)?(\w+))?' found 2 matches
[SqlMetadataService] Match: 'INNER JOIN companies c'
[SqlMetadataService] Found table: companies
[SqlMetadataService] Match: 'INNER JOIN roles r'
[SqlMetadataService] Found table: roles
[SqlMetadataService] Pattern '\bINTO\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)' found 0 matches
[SqlMetadataService] Pattern '\bUPDATE\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)' found 0 matches
[SqlMetadataService] Pattern '\bINSERT\s+INTO\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)' found 0 matches
[SqlMetadataService] Total tables extracted: 4 - users, user_roles, companies, roles
[EngineService] Metadata extraction failed: Unable to connect to any of the specified MySQL hosts.
[EngineService] Execution failed: Không thể phân tích database schema: Unable to connect to any of the specified MySQL hosts.
[EngineService] Exception type: InvalidOperationException
[EngineService] Inner exception: Unable to connect to any of the specified MySQL hosts.
Result Success: False
Generated Records: 0
Expected error for advanced WHERE clauses: Không thể phân tích database schema: Unable to connect to any of the specified MySQL hosts.</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="c3f4e447-2d79-4449-bb7a-ff070d3739c9" testId="e3d9b8e8-1d08-66db-840d-a960aae363de" testName="LoadAppSettings_WithMissingFile_ShouldReturnDefaults" computerName="cursor" duration="00:00:00.0004811" startTime="2025-07-06T10:57:02.3386130+00:00" endTime="2025-07-06T10:57:02.3391985+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="c3f4e447-2d79-4449-bb7a-ff070d3739c9" />
    <UnitTestResult executionId="d8cbfd99-68d5-44ec-b428-dc04c1ff767d" testId="e6484859-c047-2d19-88f6-de4273fe6051" testName="ConvertToMySQLSyntax_DatetimeMonths_ShouldConvertToDateAdd" computerName="cursor" duration="00:00:00.0002679" startTime="2025-07-06T11:01:03.9493552+00:00" endTime="2025-07-06T11:01:03.9496932+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="d8cbfd99-68d5-44ec-b428-dc04c1ff767d">
      <Output>
        <StdOut>✅ Converted: WHERE created_at &gt;= datetime('now', '-6 months') -&gt; WHERE created_at &gt;= DATE_SUB(NOW(), INTERVAL 6 MONTH)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="de9f847c-63ea-4d7b-931f-620a3fb2c422" testId="31ca75ff-f621-eb88-c366-60598c354854" testName="ParseQuery_ComparisonOperators_ShouldExtractConditions" computerName="cursor" duration="00:00:00.0010544" startTime="2025-07-06T11:03:06.5157852+00:00" endTime="2025-07-06T11:03:06.5168884+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="de9f847c-63ea-4d7b-931f-620a3fb2c422">
      <Output>
        <StdOut>[SqlMetadataService] Extracting tables from query: 55 chars
[SqlMetadataService] Clean SQL: SELECT * FROM users WHERE age &gt;= 18 AND salary &lt; 100000...
[SqlMetadataService] Pattern '\bFROM\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)(?:\s+(?:AS\s+)?(\w+))?' found 1 matches
[SqlMetadataService] Match: 'FROM users WHERE'
[SqlMetadataService] Found table: users
[SqlMetadataService] Pattern '\b(?:INNER\s+|LEFT\s+|RIGHT\s+|FULL\s+|OUTER\s+)?JOIN\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)(?:\s+(?:AS\s+)?(\w+))?' found 0 matches
[SqlMetadataService] Pattern '\bINTO\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)' found 0 matches
[SqlMetadataService] Pattern '\bUPDATE\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)' found 0 matches
[SqlMetadataService] Pattern '\bINSERT\s+INTO\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)' found 0 matches
[SqlMetadataService] Total tables extracted: 1 - users
JOIN Debug: Clean query = 'SELECT * FROM users WHERE age &gt;= 18 AND salary &lt; 100000'
JOIN Debug: Pattern = '(?:INNER\s+|LEFT\s+|RIGHT\s+|FULL\s+|OUTER\s+)?JOIN\s+(\w+)\s+(\w+)\s+ON\s+([^()]+?)(?=\s+(?:INNER|LEFT|RIGHT|FULL|OUTER|WHERE|ORDER|GROUP|LIMIT|$)|$)'
JOIN Debug: Found 0 JOIN matches</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="5982a1eb-79b9-4641-b6b4-d8d7a318d3b1" testId="0a97d66e-327f-ecb2-065a-a2513241b750" testName="ParseQuery_BasicSelectWithWhere_ExtractsConditions" computerName="cursor" duration="00:00:00.0054624" startTime="2025-07-06T11:03:06.6279876+00:00" endTime="2025-07-06T11:03:06.6336977+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="5982a1eb-79b9-4641-b6b4-d8d7a318d3b1">
      <Output>
        <StdOut>[SqlMetadataService] Extracting tables from query: 58 chars
[SqlMetadataService] Clean SQL: SELECT * FROM users u WHERE u.name = 'John' AND u.age &gt; 25...
[SqlMetadataService] Pattern '\bFROM\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)(?:\s+(?:AS\s+)?(\w+))?' found 1 matches
[SqlMetadataService] Match: 'FROM users u'
[SqlMetadataService] Found table: users
[SqlMetadataService] Pattern '\b(?:INNER\s+|LEFT\s+|RIGHT\s+|FULL\s+|OUTER\s+)?JOIN\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)(?:\s+(?:AS\s+)?(\w+))?' found 0 matches
[SqlMetadataService] Pattern '\bINTO\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)' found 0 matches
[SqlMetadataService] Pattern '\bUPDATE\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)' found 0 matches
[SqlMetadataService] Pattern '\bINSERT\s+INTO\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)' found 0 matches
[SqlMetadataService] Total tables extracted: 1 - users</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="9e9d7cd4-1840-43c5-a7ef-e7026300ba49" testId="2e3a2884-35f6-a539-5e71-989f9d7d6414" testName="ExtractWhereConstraints_WithEquality_ShouldExtractCorrectly" computerName="cursor" duration="00:00:00.0090595" startTime="2025-07-06T10:57:02.2266360+00:00" endTime="2025-07-06T10:57:02.2359032+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="9e9d7cd4-1840-43c5-a7ef-e7026300ba49">
      <Output>
        <StdOut>[10:57:02 INF] Extracting comprehensive constraints from SQL query
[10:57:02 INF] Found WHERE clause: u.status = 'ACTIVE' AND u.department = 'HR'
[10:57:02 INF] Found WHERE equality with alias: u.status = 'ACTIVE'
[10:57:02 INF] Found WHERE equality with alias: u.department = 'HR'
[10:57:02 INF] Starting EXISTS constraints extraction with two-phase approach
[10:57:02 INF] Completed EXISTS constraints extraction: 0 NOT EXISTS, 0 EXISTS
[10:57:02 INF] Extracted 2 total constraints: 2 WHERE, 0 JOIN, 0 LIKE, 0 IN, 0 BETWEEN, 0 NULL, 0 EXISTS</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="b00f39e2-ef9a-4139-8c4e-bc163ea300e3" testId="fe50fae3-1b6d-c1e9-9f37-ae217b07f539" testName="TC001_15_ExecuteQueryWithTestDataAsync_ComplexVowisSQL_WithGeminiAI" computerName="cursor" duration="00:00:00.0087716" startTime="2025-07-06T10:57:03.7170340+00:00" endTime="2025-07-06T10:57:03.7268218+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="b00f39e2-ef9a-4139-8c4e-bc163ea300e3">
      <Output>
        <StdOut>[CentralizedLoggingManager] Initialized. Logs directory: /workspace/logs
[CentralizedLoggingManager] Config source: default
[EngineService] Centralized logs directory: /workspace/logs
=== TEST: AI-Enhanced Complex Vowis SQL với Gemini AI ===
Connection: Server=localhost;Port=3306;Database=my_database;Uid=root;Pwd=22092012;Connect Timeout=120;Command Timeout=120;CharSet=utf8mb4;ConnectionReset=false;Connection Lifetime=300;Pooling=true;Min Pool Size=0;Max Pool Size=10;
SQL Length: 1162 characters
Gemini API Key Available: False

=== EXECUTING AI-ENHANCED TEST ===
[EngineService] Starting execution for MySQL
[EngineService] Analyzing query: 1162 chars
[SqlMetadataService] Extracting tables from query: 1162 chars
[SqlMetadataService] Clean SQL: 
        
        SELECT u.id, u.username, u.first_name, u.last_name, u.email, u.date_of_birth, u.salary, u.department, u.hire_date, 
               c.NAME AS company_name, c.code AS company_code, r.N...
[SqlMetadataService] Pattern '\bFROM\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)(?:\s+(?:AS\s+)?(\w+))?' found 1 matches
[SqlMetadataService] Match: 'FROM users u'
[SqlMetadataService] Found table: users
[SqlMetadataService] Pattern '\b(?:INNER\s+|LEFT\s+|RIGHT\s+|FULL\s+|OUTER\s+)?JOIN\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)(?:\s+(?:AS\s+)?(\w+))?' found 3 matches
[SqlMetadataService] Match: 'INNER JOIN companies c'
[SqlMetadataService] Found table: companies
[SqlMetadataService] Match: 'INNER JOIN user_roles ur'
[SqlMetadataService] Found table: user_roles
[SqlMetadataService] Match: 'INNER JOIN roles r'
[SqlMetadataService] Found table: roles
[SqlMetadataService] Pattern '\bINTO\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)' found 0 matches
[SqlMetadataService] Pattern '\bUPDATE\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)' found 0 matches
[SqlMetadataService] Pattern '\bINSERT\s+INTO\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)' found 0 matches
[SqlMetadataService] Total tables extracted: 4 - users, companies, user_roles, roles
[EngineService] Metadata extraction failed: Unable to connect to any of the specified MySQL hosts.
[EngineService] Execution failed: Không thể phân tích database schema: Unable to connect to any of the specified MySQL hosts.
[EngineService] Exception type: InvalidOperationException
[EngineService] Inner exception: Unable to connect to any of the specified MySQL hosts.

=== AI-ENHANCED TEST RESULTS ===
Success: False
Execution Time: 0.00 seconds
Generated Records (INSERT statements): 0
Final Query Results (rows returned): 0
Error: Không thể phân tích database schema: Unable to connect to any of the specified MySQL hosts.
⚠️ Connection error - this is EXPECTED without real MySQL server access</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="d4bd2aaf-7381-45c1-a0b9-05444e39e3c2" testId="32052917-9976-f6c7-cfe6-55ea2ddeb7ed" testName="IntegrationTest_DateAddAndUTF8_ShouldWorkTogether" computerName="cursor" duration="00:00:00.0024322" startTime="2025-07-06T11:03:06.5076902+00:00" endTime="2025-07-06T11:03:06.5101658+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="d4bd2aaf-7381-45c1-a0b9-05444e39e3c2">
      <Output>
        <StdOut>[SqlMetadataService] Extracting tables from query: 343 chars
[SqlMetadataService] Clean SQL: SELECT u.id, CASE WHEN u.is_active = 0 THEN 'Đã nghỉ việc' WHEN ur.expires_at &lt;= DATE_ADD(NOW(), INTERVAL 30 DAYS) THEN 'Sắp hết hạn' ELSE 'Đang hoạt động' END AS trạng_thái FROM users u JOIN user_rol...
[SqlMetadataService] Pattern '\bFROM\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)(?:\s+(?:AS\s+)?(\w+))?' found 1 matches
[SqlMetadataService] Match: 'FROM users u'
[SqlMetadataService] Found table: users
[SqlMetadataService] Pattern '\b(?:INNER\s+|LEFT\s+|RIGHT\s+|FULL\s+|OUTER\s+)?JOIN\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)(?:\s+(?:AS\s+)?(\w+))?' found 1 matches
[SqlMetadataService] Match: 'JOIN user_roles ur'
[SqlMetadataService] Found table: user_roles
[SqlMetadataService] Pattern '\bINTO\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)' found 0 matches
[SqlMetadataService] Pattern '\bUPDATE\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)' found 0 matches
[SqlMetadataService] Pattern '\bINSERT\s+INTO\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)' found 0 matches
[SqlMetadataService] Total tables extracted: 2 - users, user_roles
JOIN Debug: Clean query = 'SELECT u.id, CASE WHEN u.is_active = 0 THEN 'Đã nghỉ việc' WHEN ur.expires_at &lt;= DATE_ADD(NOW(), INTERVAL 30 DAYS) THEN 'Sắp hết hạn' ELSE 'Đang hoạt động' END AS trạng_thái FROM users u JOIN user_roles ur ON u.id = ur.user_id WHERE u.first_name LIKE '%Phương%' AND ur.expires_at &lt;= DATE_ADD(NOW(), INTERVAL 60 DAY) AND c.name LIKE '%CÔNG TY%''
JOIN Debug: Pattern = '(?:INNER\s+|LEFT\s+|RIGHT\s+|FULL\s+|OUTER\s+)?JOIN\s+(\w+)\s+(\w+)\s+ON\s+([^()]+?)(?=\s+(?:INNER|LEFT|RIGHT|FULL|OUTER|WHERE|ORDER|GROUP|LIMIT|$)|$)'
JOIN Debug: Found 1 JOIN matches
JOIN Debug: Match found - Table: 'user_roles', Alias: 'ur', OnClause: 'u.id = ur.user_id'
JOIN Debug: Condition pattern match success: True
Found JOIN: u.id = ur.user_id
✅ Integration test passed - DATE_ADD and UTF-8 work together
   - DATE conditions: 1
   - Vietnamese LIKE patterns: 2</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="234fa921-4594-4527-990c-0278f28c014e" testId="b093390d-92d9-0a60-9313-1f139744ab3d" testName="ParseQuery_FallbackToRegexParser_WhenSqlParserCSFails" computerName="cursor" duration="00:00:00.0005379" startTime="2025-07-06T11:03:06.6415902+00:00" endTime="2025-07-06T11:03:06.6421704+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="234fa921-4594-4527-990c-0278f28c014e">
      <Output>
        <StdOut>[SqlMetadataService] Extracting tables from query: 70 chars
[SqlMetadataService] Clean SQL: SELECT * FROM users WHERE name LIKE 'John' AND invalid_syntax $$$ here...
[SqlMetadataService] Pattern '\bFROM\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)(?:\s+(?:AS\s+)?(\w+))?' found 1 matches
[SqlMetadataService] Match: 'FROM users WHERE'
[SqlMetadataService] Found table: users
[SqlMetadataService] Pattern '\b(?:INNER\s+|LEFT\s+|RIGHT\s+|FULL\s+|OUTER\s+)?JOIN\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)(?:\s+(?:AS\s+)?(\w+))?' found 0 matches
[SqlMetadataService] Pattern '\bINTO\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)' found 0 matches
[SqlMetadataService] Pattern '\bUPDATE\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)' found 0 matches
[SqlMetadataService] Pattern '\bINSERT\s+INTO\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)' found 0 matches
[SqlMetadataService] Total tables extracted: 1 - users
Fallback parser extracted 1 conditions</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="7ec34bfe-e916-486d-93e9-37e6a6975c3f" testId="de22f4a7-8831-63d7-f688-faf32738999d" testName="Test_ConstraintValidator_AcceptsValidVnextCompanyName" computerName="cursor" duration="00:00:00.0007027" startTime="2025-07-06T10:57:02.3789004+00:00" endTime="2025-07-06T10:57:02.3796843+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="7ec34bfe-e916-486d-93e9-37e6a6975c3f">
      <Output>
        <StdOut>[DEBUG] GetApiKey() method called
[DEBUG] ConfigurationManager result: '' (length: 0)
[DEBUG] Environment variable result: '' (length: 0)
[DEBUG] Using HARDCODED API key for testing
[DEBUG] Gemini API Key configured: True
[DEBUG] API Key length: 39
[DEBUG] API Key preview: AIzaSyCsOz...
Validation Result: True
Generated Company Name: 'VNEXT Solutions Ltd'</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="9436e373-3c19-4a92-8063-91fca05a701e" testId="ac906b8e-7608-0616-ce10-5e68b0415e31" testName="TestConnection_RealMySQL_ShouldConnect" computerName="cursor" duration="00:00:00.0046288" startTime="2025-07-06T11:01:04.0058562+00:00" endTime="2025-07-06T11:01:04.0105920+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="9436e373-3c19-4a92-8063-91fca05a701e">
      <Output>
        <StdOut>[CentralizedLoggingManager] Initialized. Logs directory: /workspace/logs
[CentralizedLoggingManager] Config source: default
[EngineService] Centralized logs directory: /workspace/logs
=== TEST: Real MySQL Connection ===
Connection successful: False</StdOut>
        <ErrorInfo>
          <Message>Assert.IsTrue failed. Should connect to real MySQL server</Message>
          <StackTrace>   at SqlTestDataGenerator.Tests.RealMySQLIntegrationTests.TestConnection_RealMySQL_ShouldConnect() in /workspace/SqlTestDataGenerator.Tests/RealMySQLIntegrationTests.cs:line 262
</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="0f1cc5d7-989e-4f14-ba24-7d7d92c32464" testId="a9a3fdfb-fc6c-0289-9351-e1328a7a24c5" testName="ParseQuery_InvalidSQL_FallsBackToRegexParser" computerName="cursor" duration="00:00:00.0027492" startTime="2025-07-06T11:03:06.6225125+00:00" endTime="2025-07-06T11:03:06.6253064+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="0f1cc5d7-989e-4f14-ba24-7d7d92c32464">
      <Output>
        <StdOut>[11:03:06 INF] SqlQueryParserV2: Parsing SQL query with ScriptDom engine
[11:03:06 WRN] ScriptDom parse errors found: 1
[11:03:06 WRN] Parse error at line 1, column 1: Incorrect syntax near 'SELET'.
[11:03:06 INF] Falling back to regex parser due to MySQL syntax incompatibility
[11:03:06 INF] Parsing SQL query to extract data requirements
[SqlMetadataService] Extracting tables from query: 32 chars
[SqlMetadataService] Clean SQL: SELET * FORM users WERE age &gt; 25...
[SqlMetadataService] Pattern '\bFROM\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)(?:\s+(?:AS\s+)?(\w+))?' found 0 matches
[SqlMetadataService] Pattern '\b(?:INNER\s+|LEFT\s+|RIGHT\s+|FULL\s+|OUTER\s+)?JOIN\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)(?:\s+(?:AS\s+)?(\w+))?' found 0 matches
[SqlMetadataService] Pattern '\bINTO\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)' found 0 matches
[SqlMetadataService] Pattern '\bUPDATE\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)' found 0 matches
[SqlMetadataService] Pattern '\bINSERT\s+INTO\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)' found 0 matches
[SqlMetadataService] No tables found with complex patterns, trying simple approach...
[SqlMetadataService] Simple pattern '\bFROM\s+(?:(\w+)|`([^`]+)`)' found 0 matches
[SqlMetadataService] Simple pattern '\bJOIN\s+(?:(\w+)|`([^`]+)`)' found 0 matches
[SqlMetadataService] Simple pattern '\bINTO\s+(?:(\w+)|`([^`]+)`)' found 0 matches
[SqlMetadataService] Simple pattern '\bUPDATE\s+(?:(\w+)|`([^`]+)`)' found 0 matches
[SqlMetadataService] Total tables extracted: 0 - 
[SqlMetadataService] ❌ NO TABLES FOUND! SQL Query: SELET * FORM users WERE age &gt; 25
[SqlMetadataService] Exception in ExtractTablesFromQuery: System.InvalidOperationException: Không thể xác định bảng nào từ SQL query. Vui lòng kiểm tra lại câu truy vấn.
   at SqlTestDataGenerator.Core.Services.SqlMetadataService.ExtractTablesFromQuery(String sqlQuery) in /workspace/SqlTestDataGenerator.Core/Services/SqlMetadataService.cs:line 344
[11:03:06 ERR] ScriptDom parsing failed, falling back to regex parser
System.InvalidOperationException: Lỗi phân tích SQL query: Không thể xác định bảng nào từ SQL query. Vui lòng kiểm tra lại câu truy vấn.
 ---&gt; System.InvalidOperationException: Không thể xác định bảng nào từ SQL query. Vui lòng kiểm tra lại câu truy vấn.
   at SqlTestDataGenerator.Core.Services.SqlMetadataService.ExtractTablesFromQuery(String sqlQuery) in /workspace/SqlTestDataGenerator.Core/Services/SqlMetadataService.cs:line 344
   --- End of inner exception stack trace ---
   at SqlTestDataGenerator.Core.Services.SqlMetadataService.ExtractTablesFromQuery(String sqlQuery) in /workspace/SqlTestDataGenerator.Core/Services/SqlMetadataService.cs:line 352
   at SqlTestDataGenerator.Core.Services.SqlQueryParser.ExtractTableRequirements(String cleanQuery, SqlDataRequirements requirements) in /workspace/SqlTestDataGenerator.Core/Services/SqlQueryParser.cs:line 69
   at SqlTestDataGenerator.Core.Services.SqlQueryParser.ParseQuery(String sqlQuery) in /workspace/SqlTestDataGenerator.Core/Services/SqlQueryParser.cs:line 40
   at SqlTestDataGenerator.Core.Services.SqlQueryParserV2.ParseQuery(String sqlQuery) in /workspace/SqlTestDataGenerator.Core/Services/SqlQueryParserV2.cs:line 69
[11:03:06 INF] Parsing SQL query to extract data requirements
[SqlMetadataService] Extracting tables from query: 32 chars
[SqlMetadataService] Clean SQL: SELET * FORM users WERE age &gt; 25...
[SqlMetadataService] Pattern '\bFROM\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)(?:\s+(?:AS\s+)?(\w+))?' found 0 matches
[SqlMetadataService] Pattern '\b(?:INNER\s+|LEFT\s+|RIGHT\s+|FULL\s+|OUTER\s+)?JOIN\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)(?:\s+(?:AS\s+)?(\w+))?' found 0 matches
[SqlMetadataService] Pattern '\bINTO\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)' found 0 matches
[SqlMetadataService] Pattern '\bUPDATE\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)' found 0 matches
[SqlMetadataService] Pattern '\bINSERT\s+INTO\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)' found 0 matches
[SqlMetadataService] No tables found with complex patterns, trying simple approach...
[SqlMetadataService] Simple pattern '\bFROM\s+(?:(\w+)|`([^`]+)`)' found 0 matches
[SqlMetadataService] Simple pattern '\bJOIN\s+(?:(\w+)|`([^`]+)`)' found 0 matches
[SqlMetadataService] Simple pattern '\bINTO\s+(?:(\w+)|`([^`]+)`)' found 0 matches
[SqlMetadataService] Simple pattern '\bUPDATE\s+(?:(\w+)|`([^`]+)`)' found 0 matches
[SqlMetadataService] Total tables extracted: 0 - 
[SqlMetadataService] ❌ NO TABLES FOUND! SQL Query: SELET * FORM users WERE age &gt; 25
[SqlMetadataService] Exception in ExtractTablesFromQuery: System.InvalidOperationException: Không thể xác định bảng nào từ SQL query. Vui lòng kiểm tra lại câu truy vấn.
   at SqlTestDataGenerator.Core.Services.SqlMetadataService.ExtractTablesFromQuery(String sqlQuery) in /workspace/SqlTestDataGenerator.Core/Services/SqlMetadataService.cs:line 344
[11:03:06 WRN] Fallback regex parser also failed, returning minimal requirements
System.InvalidOperationException: Lỗi phân tích SQL query: Không thể xác định bảng nào từ SQL query. Vui lòng kiểm tra lại câu truy vấn.
 ---&gt; System.InvalidOperationException: Không thể xác định bảng nào từ SQL query. Vui lòng kiểm tra lại câu truy vấn.
   at SqlTestDataGenerator.Core.Services.SqlMetadataService.ExtractTablesFromQuery(String sqlQuery) in /workspace/SqlTestDataGenerator.Core/Services/SqlMetadataService.cs:line 344
   --- End of inner exception stack trace ---
   at SqlTestDataGenerator.Core.Services.SqlMetadataService.ExtractTablesFromQuery(String sqlQuery) in /workspace/SqlTestDataGenerator.Core/Services/SqlMetadataService.cs:line 352
   at SqlTestDataGenerator.Core.Services.SqlQueryParser.ExtractTableRequirements(String cleanQuery, SqlDataRequirements requirements) in /workspace/SqlTestDataGenerator.Core/Services/SqlQueryParser.cs:line 69
   at SqlTestDataGenerator.Core.Services.SqlQueryParser.ParseQuery(String sqlQuery) in /workspace/SqlTestDataGenerator.Core/Services/SqlQueryParser.cs:line 40
   at SqlTestDataGenerator.Core.Services.SqlQueryParserV2.ParseQuery(String sqlQuery) in /workspace/SqlTestDataGenerator.Core/Services/SqlQueryParserV2.cs:line 90</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="c71e9d2d-a23c-4913-8f83-2bab0fc51fbe" testId="4b0fe614-589b-02cc-6add-321c3b0d4dcc" testName="TC016_StringFunctions_WithTextProcessing_ShouldHandleTextData" computerName="cursor" duration="00:00:00.0055193" startTime="2025-07-06T11:01:03.8260645+00:00" endTime="2025-07-06T11:01:03.8317270+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="c71e9d2d-a23c-4913-8f83-2bab0fc51fbe">
      <Output>
        <StdOut>[CentralizedLoggingManager] Initialized. Logs directory: /workspace/logs
[CentralizedLoggingManager] Config source: default
[EngineService] Centralized logs directory: /workspace/logs
=== TC016: String Functions Test ===
Keywords: UPPER, LOWER, CONCAT, SUBSTRING, LOCATE, LENGTH, TRIM, REPLACE, LEFT, RIGHT, REVERSE, LPAD, RPAD, REGEXP, SOUNDEX
[EngineService] Starting execution for MySQL
[EngineService] Analyzing query: 1633 chars
[SqlMetadataService] Extracting tables from query: 1633 chars
[SqlMetadataService] Clean SQL: 
            SELECT u.id, 
                   UPPER(u.username) as username_upper,
                   LOWER(u.email) as email_lower,
                   CONCAT(u.first_name, ' ', u.last_name) as full_n...
[SqlMetadataService] Pattern '\bFROM\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)(?:\s+(?:AS\s+)?(\w+))?' found 2 matches
[SqlMetadataService] Match: 'FROM u.phone'
[SqlMetadataService] Found table: phone
[SqlMetadataService] Match: 'FROM users u'
[SqlMetadataService] Found table: users
[SqlMetadataService] Pattern '\b(?:INNER\s+|LEFT\s+|RIGHT\s+|FULL\s+|OUTER\s+)?JOIN\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)(?:\s+(?:AS\s+)?(\w+))?' found 1 matches
[SqlMetadataService] Match: 'INNER JOIN companies c'
[SqlMetadataService] Found table: companies
[SqlMetadataService] Pattern '\bINTO\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)' found 0 matches
[SqlMetadataService] Pattern '\bUPDATE\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)' found 0 matches
[SqlMetadataService] Pattern '\bINSERT\s+INTO\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)' found 0 matches
[SqlMetadataService] Total tables extracted: 3 - phone, users, companies
[EngineService] Metadata extraction failed: Unable to connect to any of the specified MySQL hosts.
[EngineService] Execution failed: Không thể phân tích database schema: Unable to connect to any of the specified MySQL hosts.
[EngineService] Exception type: InvalidOperationException
[EngineService] Inner exception: Unable to connect to any of the specified MySQL hosts.
Result Success: False
Generated Records: 0
Expected error for string functions: Không thể phân tích database schema: Unable to connect to any of the specified MySQL hosts.</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="c0997b37-9199-4d2e-96c1-5cd893c79060" testId="50802662-e8e6-ff88-cc12-e3bd1b008cfd" testName="TestExtractConstraints_SimpleLikePatterns_ShouldExtractCorrectly" computerName="cursor" duration="00:00:00.0014205" startTime="2025-07-06T10:57:02.2227481+00:00" endTime="2025-07-06T10:57:02.2242491+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="c0997b37-9199-4d2e-96c1-5cd893c79060">
      <Output>
        <StdOut>=== DEBUG LIKE PATTERNS ===
Total LIKE patterns found: 2
Pattern: .name LIKE '%VNEXT%' -&gt; Required: 'VNEXT', Type: CONTAINS
Pattern: .code LIKE 'DD_%' -&gt; Required: 'DD', Type: STARTS_WITH
✅ Simple LIKE patterns extraction test passed</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="4f431dac-65db-4ef3-81d1-01308999e8a5" testId="436739c8-ba41-3070-687c-7515da303711" testName="ParseQuery_SimpleWhereEquality_ShouldExtractCondition" computerName="cursor" duration="00:00:00.0007278" startTime="2025-07-06T11:03:06.5117930+00:00" endTime="2025-07-06T11:03:06.5126308+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="4f431dac-65db-4ef3-81d1-01308999e8a5">
      <Output>
        <StdOut>[SqlMetadataService] Extracting tables from query: 43 chars
[SqlMetadataService] Clean SQL: SELECT * FROM users WHERE status = 'active'...
[SqlMetadataService] Pattern '\bFROM\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)(?:\s+(?:AS\s+)?(\w+))?' found 1 matches
[SqlMetadataService] Match: 'FROM users WHERE'
[SqlMetadataService] Found table: users
[SqlMetadataService] Pattern '\b(?:INNER\s+|LEFT\s+|RIGHT\s+|FULL\s+|OUTER\s+)?JOIN\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)(?:\s+(?:AS\s+)?(\w+))?' found 0 matches
[SqlMetadataService] Pattern '\bINTO\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)' found 0 matches
[SqlMetadataService] Pattern '\bUPDATE\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)' found 0 matches
[SqlMetadataService] Pattern '\bINSERT\s+INTO\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)' found 0 matches
[SqlMetadataService] Total tables extracted: 1 - users
JOIN Debug: Clean query = 'SELECT * FROM users WHERE status = 'active''
JOIN Debug: Pattern = '(?:INNER\s+|LEFT\s+|RIGHT\s+|FULL\s+|OUTER\s+)?JOIN\s+(\w+)\s+(\w+)\s+ON\s+([^()]+?)(?=\s+(?:INNER|LEFT|RIGHT|FULL|OUTER|WHERE|ORDER|GROUP|LIMIT|$)|$)'
JOIN Debug: Found 0 JOIN matches</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="3325aaa0-0437-4cc3-b86e-97b886a7750d" testId="49b5ac08-67b7-9e8d-f8dd-3c80296ab249" testName="ExecuteQueryWithTestDataAsync_EdgeCase_ZeroRecords_MustHandleCorrectly" computerName="cursor" duration="00:00:00.0044904" startTime="2025-07-06T11:03:06.4531070+00:00" endTime="2025-07-06T11:03:06.4576557+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="3325aaa0-0437-4cc3-b86e-97b886a7750d">
      <Output>
        <StdOut>[CentralizedLoggingManager] Initialized. Logs directory: /workspace/logs
[CentralizedLoggingManager] Config source: default
[EngineService] Centralized logs directory: /workspace/logs
=== EDGE CASE TEST: Zero Records ===
[EngineService] Starting execution for MySQL
[EngineService] Analyzing query: 29 chars
[SqlMetadataService] Extracting tables from query: 29 chars
[SqlMetadataService] Clean SQL: SELECT * FROM users WHERE 1=0...
[SqlMetadataService] Pattern '\bFROM\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)(?:\s+(?:AS\s+)?(\w+))?' found 1 matches
[SqlMetadataService] Match: 'FROM users WHERE'
[SqlMetadataService] Found table: users
[SqlMetadataService] Pattern '\b(?:INNER\s+|LEFT\s+|RIGHT\s+|FULL\s+|OUTER\s+)?JOIN\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)(?:\s+(?:AS\s+)?(\w+))?' found 0 matches
[SqlMetadataService] Pattern '\bINTO\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)' found 0 matches
[SqlMetadataService] Pattern '\bUPDATE\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)' found 0 matches
[SqlMetadataService] Pattern '\bINSERT\s+INTO\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)' found 0 matches
[SqlMetadataService] Total tables extracted: 1 - users
[EngineService] Metadata extraction failed: Unable to connect to any of the specified MySQL hosts.
[EngineService] Execution failed: Không thể phân tích database schema: Unable to connect to any of the specified MySQL hosts.
[EngineService] Exception type: InvalidOperationException
[EngineService] Inner exception: Unable to connect to any of the specified MySQL hosts.
Success: False
Generated Records: 0
Result: Không thể phân tích database schema: Unable to connect to any of the specified MySQL hosts.</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="dbb360bd-a42a-4ea4-83cb-83fc313fcc6f" testId="be36ced7-63a2-b405-e092-a295f9f5f466" testName="ExtractTablesFromQuery_ComplexSQL_ShouldHandleAliases" computerName="cursor" duration="00:00:00.0004593" startTime="2025-07-06T10:57:02.1959796+00:00" endTime="2025-07-06T10:57:02.1965128+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="dbb360bd-a42a-4ea4-83cb-83fc313fcc6f">
      <Output>
        <StdOut>[SqlMetadataService] Extracting tables from query: 1479 chars
[SqlMetadataService] Clean SQL: 
        
        SELECT u.id
            ,u.username
            ,u.first_name
            ,u.last_name
            ,u.email
            ,u.date_of_birth
            ,u.salary
            ,u.departme...
[SqlMetadataService] Pattern '\bFROM\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)(?:\s+(?:AS\s+)?(\w+))?' found 1 matches
[SqlMetadataService] Match: 'FROM users u'
[SqlMetadataService] Found table: users
[SqlMetadataService] Pattern '\b(?:INNER\s+|LEFT\s+|RIGHT\s+|FULL\s+|OUTER\s+)?JOIN\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)(?:\s+(?:AS\s+)?(\w+))?' found 3 matches
[SqlMetadataService] Match: 'INNER JOIN companies c'
[SqlMetadataService] Found table: companies
[SqlMetadataService] Match: 'INNER JOIN user_roles ur'
[SqlMetadataService] Found table: user_roles
[SqlMetadataService] Match: 'INNER JOIN roles r'
[SqlMetadataService] Found table: roles
[SqlMetadataService] Pattern '\bINTO\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)' found 0 matches
[SqlMetadataService] Pattern '\bUPDATE\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)' found 0 matches
[SqlMetadataService] Pattern '\bINSERT\s+INTO\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)' found 0 matches
[SqlMetadataService] Total tables extracted: 4 - users, companies, user_roles, roles</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="1aa5916f-b787-4d28-8e0d-ccc45c4266cd" testId="a1c2a851-2b3c-da00-084b-1b2db17868fc" testName="ExtractTablesFromQuery_BusinessSQL_ShouldHandleComplexJoins" computerName="cursor" duration="00:00:00.0007178" startTime="2025-07-06T10:57:02.1004589+00:00" endTime="2025-07-06T10:57:02.1012758+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="1aa5916f-b787-4d28-8e0d-ccc45c4266cd">
      <Output>
        <StdOut>[SqlMetadataService] Extracting tables from query: 860 chars
[SqlMetadataService] Clean SQL: 
            SELECT u.id, u.username, p.profile_name, c.company_name, d.dept_name, r.role_title,
                   a.account_status, s.salary_amount, ur.assigned_date, ur.expires_at
            FROM ...
[SqlMetadataService] Pattern '\bFROM\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)(?:\s+(?:AS\s+)?(\w+))?' found 1 matches
[SqlMetadataService] Match: 'FROM users u'
[SqlMetadataService] Found table: users
[SqlMetadataService] Pattern '\b(?:INNER\s+|LEFT\s+|RIGHT\s+|FULL\s+|OUTER\s+)?JOIN\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)(?:\s+(?:AS\s+)?(\w+))?' found 7 matches
[SqlMetadataService] Match: 'LEFT JOIN user_profiles p'
[SqlMetadataService] Found table: user_profiles
[SqlMetadataService] Match: 'INNER JOIN companies c'
[SqlMetadataService] Found table: companies
[SqlMetadataService] Match: 'LEFT JOIN departments d'
[SqlMetadataService] Found table: departments
[SqlMetadataService] Match: 'INNER JOIN user_roles ur'
[SqlMetadataService] Found table: user_roles
[SqlMetadataService] Match: 'INNER JOIN roles r'
[SqlMetadataService] Found table: roles
[SqlMetadataService] Match: 'LEFT JOIN user_accounts a'
[SqlMetadataService] Found table: user_accounts
[SqlMetadataService] Match: 'LEFT JOIN salary_history s'
[SqlMetadataService] Found table: salary_history
[SqlMetadataService] Pattern '\bINTO\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)' found 0 matches
[SqlMetadataService] Pattern '\bUPDATE\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)' found 0 matches
[SqlMetadataService] Pattern '\bINSERT\s+INTO\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)' found 0 matches
[SqlMetadataService] Total tables extracted: 8 - users, user_profiles, companies, departments, user_roles, roles, user_accounts, salary_history
Business SQL extracted 8 tables: users, user_profiles, companies, departments, user_roles, roles, user_accounts, salary_history</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="f9fe3fb0-d800-44b6-ab2d-de51aed3b3d0" testId="a3ac2347-e7bd-d1ae-5074-a17546db31bc" testName="GenerateBogusData_FourTables_ShouldRespectDependencyOrder" computerName="cursor" duration="00:00:00.0063423" startTime="2025-07-06T10:57:02.0511237+00:00" endTime="2025-07-06T10:57:02.0575545+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="f9fe3fb0-d800-44b6-ab2d-de51aed3b3d0">
      <Output>
        <StdOut>[DEBUG] Table companies has 3 columns:
[DEBUG] Column: id, IsIdentity: True, IsGenerated: False, DefaultValue: ''
[DEBUG] Column: name, IsIdentity: False, IsGenerated: False, DefaultValue: ''
[DEBUG] Column: code, IsIdentity: False, IsGenerated: False, DefaultValue: ''
[DEBUG-T021] Filtered columns for companies: 2 columns (from 3 total)
[DEBUG-T021] Excluded columns: id(Identity:True,Generated:False)
[DEBUG-T021] Included columns: name, code
[DEBUG-T021] Generated SQL for companies: INSERT INTO `companies` (`name`, `code`) VALUES ('Eleonore Cole', 'CODE_34381_001');
[DEBUG-T021] Generated SQL for companies: INSERT INTO `companies` (`name`, `code`) VALUES ('Rodrick Ernser', 'CODE_34628_002');
[DEBUG-T021] Generated SQL for companies: INSERT INTO `companies` (`name`, `code`) VALUES ('Vidal Kessler', 'CODE_34808_003');
[DEBUG] Table roles has 3 columns:
[DEBUG] Column: id, IsIdentity: True, IsGenerated: False, DefaultValue: ''
[DEBUG] Column: name, IsIdentity: False, IsGenerated: False, DefaultValue: ''
[DEBUG] Column: code, IsIdentity: False, IsGenerated: False, DefaultValue: ''
[DEBUG-T021] Filtered columns for roles: 2 columns (from 3 total)
[DEBUG-T021] Excluded columns: id(Identity:True,Generated:False)
[DEBUG-T021] Included columns: name, code
[DEBUG-T021] Generated SQL for roles: INSERT INTO `roles` (`name`, `code`) VALUES ('Gay Gutmann', 'CODE_35208_001');
[DEBUG-T021] Generated SQL for roles: INSERT INTO `roles` (`name`, `code`) VALUES ('Scot McKenzie', 'CODE_35446_002');
[DEBUG-T021] Generated SQL for roles: INSERT INTO `roles` (`name`, `code`) VALUES ('Gage Rowe', 'CODE_35698_003');
[DEBUG] Table users has 7 columns:
[DEBUG] Column: id, IsIdentity: True, IsGenerated: False, DefaultValue: ''
[DEBUG] Column: first_name, IsIdentity: False, IsGenerated: False, DefaultValue: ''
[DEBUG] Column: last_name, IsIdentity: False, IsGenerated: False, DefaultValue: ''
[DEBUG] Column: company_id, IsIdentity: False, IsGenerated: False, DefaultValue: ''
[DEBUG] Column: is_active, IsIdentity: False, IsGenerated: False, DefaultValue: ''
[DEBUG] Column: date_of_birth, IsIdentity: False, IsGenerated: False, DefaultValue: ''
[DEBUG] Column: created_at, IsIdentity: False, IsGenerated: False, DefaultValue: ''
[DEBUG-T021] Filtered columns for users: 6 columns (from 7 total)
[DEBUG-T021] Excluded columns: id(Identity:True,Generated:False)
[DEBUG-T021] Included columns: first_name, last_name, company_id, is_active, date_of_birth, created_at
[DEBUG] Boolean column detected: is_active (bit) -&gt; generating boolean
[DEBUG-T021] Generated SQL for users: INSERT INTO `users` (`first_name`, `last_name`, `company_id`, `is_active`, `date_of_birth`, `created_at`) VALUES ('Myrtice', 'Greenfelder', 2, 1, '1995-05-19', '2025-01-17 09:57:59');
[DEBUG] Boolean column detected: is_active (bit) -&gt; generating boolean
[DEBUG-T021] Generated SQL for users: INSERT INTO `users` (`first_name`, `last_name`, `company_id`, `is_active`, `date_of_birth`, `created_at`) VALUES ('Yesenia', 'Robel', 3, 1, '1991-10-01', '2025-03-09 07:42:08');
[DEBUG] Boolean column detected: is_active (bit) -&gt; generating boolean
[DEBUG-T021] Generated SQL for users: INSERT INTO `users` (`first_name`, `last_name`, `company_id`, `is_active`, `date_of_birth`, `created_at`) VALUES ('Jaeden', 'MacGyver', 1, 1, '1970-12-03', '2024-07-23 11:35:12');
[DEBUG] Table user_roles has 4 columns:
[DEBUG] Column: user_id, IsIdentity: False, IsGenerated: False, DefaultValue: ''
[DEBUG] Column: role_id, IsIdentity: False, IsGenerated: False, DefaultValue: ''
[DEBUG] Column: is_active, IsIdentity: False, IsGenerated: False, DefaultValue: ''
[DEBUG] Column: expires_at, IsIdentity: False, IsGenerated: False, DefaultValue: ''
[DEBUG-T021] Filtered columns for user_roles: 4 columns (from 4 total)
[DEBUG-T021] Excluded columns: 
[DEBUG-T021] Included columns: user_id, role_id, is_active, expires_at
[DEBUG] Boolean column detected: is_active (bit) -&gt; generating boolean
[DATE-FALLBACK] user_roles.expires_at: Generated 2025-08-09 07:18:09 (within 60 days default)
[DEBUG] Generated SQL for user_roles: INSERT INTO `user_roles` (`user_id`, `role_id`, `is_active`, `expires_at`) VALUES (2, 3, 1, '2025-08-09 07:18:09');
[DEBUG] Boolean column detected: is_active (bit) -&gt; generating boolean
[DATE-FALLBACK] user_roles.expires_at: Generated 2025-07-21 02:00:38 (within 60 days default)
[DEBUG] Generated SQL for user_roles: INSERT INTO `user_roles` (`user_id`, `role_id`, `is_active`, `expires_at`) VALUES (3, 1, 1, '2025-07-21 02:00:38');
[DEBUG] Boolean column detected: is_active (bit) -&gt; generating boolean
[DATE-FALLBACK] user_roles.expires_at: Generated 2025-07-08 07:10:56 (within 60 days default)
[DEBUG] Generated SQL for user_roles: INSERT INTO `user_roles` (`user_id`, `role_id`, `is_active`, `expires_at`) VALUES (1, 2, 1, '2025-07-08 07:10:56');
Generated data for tables: companies, roles, users, user_roles
Companies: 3
Roles: 3
Users: 3
UserRoles: 3</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="9f3f9a63-a8c1-4eee-a4c5-622d5f23c4f2" testId="33c5568e-bbee-9fcd-f82b-149fcb93c6af" testName="EngineService_ComplexSQL_ShouldGenerateAndExecute" computerName="cursor" duration="00:00:00.0059349" startTime="2025-07-06T10:57:02.0877405+00:00" endTime="2025-07-06T10:57:02.0938043+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="9f3f9a63-a8c1-4eee-a4c5-622d5f23c4f2">
      <Output>
        <StdOut>[SqlMetadataService] Extracting tables from query: 1230 chars
[SqlMetadataService] Clean SQL: 
            
            SELECT u.id, u.username, u.first_name, u.last_name, u.email, u.date_of_birth, u.salary, u.department, u.hire_date, 
                   c.NAME AS company_name, c.code AS compa...
[SqlMetadataService] Pattern '\bFROM\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)(?:\s+(?:AS\s+)?(\w+))?' found 1 matches
[SqlMetadataService] Match: 'FROM users u'
[SqlMetadataService] Found table: users
[SqlMetadataService] Pattern '\b(?:INNER\s+|LEFT\s+|RIGHT\s+|FULL\s+|OUTER\s+)?JOIN\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)(?:\s+(?:AS\s+)?(\w+))?' found 3 matches
[SqlMetadataService] Match: 'INNER JOIN companies c'
[SqlMetadataService] Found table: companies
[SqlMetadataService] Match: 'INNER JOIN user_roles ur'
[SqlMetadataService] Found table: user_roles
[SqlMetadataService] Match: 'INNER JOIN roles r'
[SqlMetadataService] Found table: roles
[SqlMetadataService] Pattern '\bINTO\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)' found 0 matches
[SqlMetadataService] Pattern '\bUPDATE\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)' found 0 matches
[SqlMetadataService] Pattern '\bINSERT\s+INTO\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)' found 0 matches
[SqlMetadataService] Total tables extracted: 4 - users, companies, user_roles, roles
✅ Complex SQL parsing successful. Tables: users, companies, user_roles, roles</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="ba7c7421-3d0e-4dac-8b53-6d3c0a6e8471" testId="dfaae416-13aa-b907-a01f-1695bbdfaf71" testName="Test_FallbackGeneration_WhenAIUnavailable" computerName="cursor" duration="00:00:00.0007869" startTime="2025-07-06T10:57:03.6007896+00:00" endTime="2025-07-06T10:57:03.6016808+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="ba7c7421-3d0e-4dac-8b53-6d3c0a6e8471">
      <Output>
        <StdOut>[DEBUG] GetApiKey() method called
[DEBUG] ConfigurationManager result: '' (length: 0)
[DEBUG] Environment variable result: '' (length: 0)
[DEBUG] Using HARDCODED API key for testing
[DEBUG] Gemini API Key configured: True
[DEBUG] API Key length: 39
[DEBUG] API Key preview: AIzaSyCsOz...
[FALLBACK] Testing fallback generation when AI unavailable...
[FALLBACK] Generated 3 records using fallback
[FALLBACK] Generated Company Name: 'TestVNEXTData_1'
[FALLBACK] Generated Company Name: 'TestVNEXTData_2'
[FALLBACK] Generated Company Name: 'TestVNEXTData_3'
[FALLBACK] ✅ Fallback generation successful with 3 records</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="487bb06a-4a13-4989-8d1e-84ca5db71da9" testId="f41a6de3-78c5-2b8f-5956-6caff97ebdbf" testName="Test_ConstraintAwareAI_GeneratesValidMultiConstraintData" computerName="cursor" duration="00:00:01.2022398" startTime="2025-07-06T10:57:02.3801840+00:00" endTime="2025-07-06T10:57:03.5825561+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="487bb06a-4a13-4989-8d1e-84ca5db71da9">
      <Output>
        <StdOut>[DEBUG] GetApiKey() method called
[DEBUG] ConfigurationManager result: '' (length: 0)
[DEBUG] Environment variable result: '' (length: 0)
[DEBUG] Using HARDCODED API key for testing
[DEBUG] Gemini API Key configured: True
[DEBUG] API Key length: 39
[DEBUG] API Key preview: AIzaSyCsOz...
Generated 0 valid records</StdOut>
        <ErrorInfo>
          <Message>Assert.IsTrue failed. Should generate at least some valid records</Message>
          <StackTrace>   at SqlTestDataGenerator.Tests.ConstraintAwareGenerationTests.Test_ConstraintAwareAI_GeneratesValidMultiConstraintData() in /workspace/SqlTestDataGenerator.Tests/ConstraintAwareGenerationTests.cs:line 232
</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="d99c1612-5deb-4d8d-862f-9b277773f7c3" testId="f3efa36b-3e8e-e41d-23c1-29c1d865b7b2" testName="GetLogEntries_ShouldReturnEntriesInDescendingOrder" computerName="cursor" duration="00:00:00.0213236" startTime="2025-07-06T11:01:03.9048230+00:00" endTime="2025-07-06T11:01:03.9262720+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="d99c1612-5deb-4d8d-862f-9b277773f7c3">
      <Output>
        <StdOut>[CentralizedLoggingManager] Initialized. Logs directory: /workspace/logs
[CentralizedLoggingManager] Config source: default
[LoggerServiceTests] Using centralized log path: /workspace/logs/test-20250706.log
[GetLogEntries] Log file content: 2025-07-06 11:01:03.893 | INFORMATION [TEST_CONTEXT] | Test info message | Params: {"TestParam":"value"}
2025-07-06 11:01:03.898 | ERROR       [ERROR_CONTEXT] | Test error message | Exception: Test exception
2025-07-06 11:01:03.901 | INFORMATION [METHOD_ENTRY] | Method Entry: TestMethod | Params: {"param1":"value1","param2":42}
2025-07-06 11:01:03.903 | INFORMATION [METHOD_EXIT] | Method Exit: TestMethod | Params: {"result":"success","count":5}
2025-07-06 11:01:03.905 | INFORMATION | First message
2025-07-06 11:01:03.915 | WARNING     | Second message
2025-07-06 11:01:03.925 | ERROR       | Third message</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="52df3dc6-d3d7-419a-835b-a00985e2e456" testId="1144c8a3-62a7-cc5f-27cf-4ae9d2e2115c" testName="IsApiKeyConfigured_WithNoKey_ShouldReturnFalse" computerName="cursor" duration="00:00:00.0004571" startTime="2025-07-06T10:57:02.3678213+00:00" endTime="2025-07-06T10:57:02.3683693+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="52df3dc6-d3d7-419a-835b-a00985e2e456" />
    <UnitTestResult executionId="c185c429-7f78-4e61-830a-3ea0204d53dd" testId="dc686220-fa09-35e9-2ada-0340bb63d269" testName="ParseQuery_JoinConditions_ExtractsJoinRequirements" computerName="cursor" duration="00:00:00.0014329" startTime="2025-07-06T11:03:06.6342559+00:00" endTime="2025-07-06T11:03:06.6357423+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="c185c429-7f78-4e61-830a-3ea0204d53dd">
      <Output>
        <StdOut>[SqlMetadataService] Extracting tables from query: 150 chars
[SqlMetadataService] Clean SQL: SELECT u.name, r.role_name FROM users u INNER JOIN user_roles ur ON u.id = ur.user_id INNER JOIN roles r ON ur.role_id = r.id WHERE u.is_active = TRUE...
[SqlMetadataService] Pattern '\bFROM\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)(?:\s+(?:AS\s+)?(\w+))?' found 1 matches
[SqlMetadataService] Match: 'FROM users u'
[SqlMetadataService] Found table: users
[SqlMetadataService] Pattern '\b(?:INNER\s+|LEFT\s+|RIGHT\s+|FULL\s+|OUTER\s+)?JOIN\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)(?:\s+(?:AS\s+)?(\w+))?' found 2 matches
[SqlMetadataService] Match: 'INNER JOIN user_roles ur'
[SqlMetadataService] Found table: user_roles
[SqlMetadataService] Match: 'INNER JOIN roles r'
[SqlMetadataService] Found table: roles
[SqlMetadataService] Pattern '\bINTO\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)' found 0 matches
[SqlMetadataService] Pattern '\bUPDATE\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)' found 0 matches
[SqlMetadataService] Pattern '\bINSERT\s+INTO\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)' found 0 matches
[SqlMetadataService] Total tables extracted: 3 - users, user_roles, roles
Total WHERE conditions: 1
- u.is_active = TRUE
is_active conditions: 1</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="ca637261-c74c-497f-b704-ef93971d14b2" testId="b81a237f-143b-449c-73ca-baf838b13a21" testName="ExtractDateConstraints_WithYearFunction_ShouldExtractCorrectly" computerName="cursor" duration="00:00:00.0017625" startTime="2025-07-06T10:57:02.2455562+00:00" endTime="2025-07-06T10:57:02.2474213+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="ca637261-c74c-497f-b704-ef93971d14b2">
      <Output>
        <StdOut>[10:57:02 INF] Extracting comprehensive constraints from SQL query
[10:57:02 INF] Found WHERE clause: YEAR(e.birth_date) = 1989 AND e.hire_date &gt;= DATE_ADD(NOW(), INTERVAL 1 YEAR)
[10:57:02 INF] Found WHERE comparison with alias: e.hire_date &gt;= 'DATE_ADD(NOW('
[10:57:02 INF] Found YEAR constraint: YEAR(e.birth_date) = 1989
[10:57:02 INF] Found DATE constraint: e.hire_date &gt;= DATE_ADD(NOW(), INTERVAL 1 YEAR)
[10:57:02 INF] Starting EXISTS constraints extraction with two-phase approach
[10:57:02 INF] Completed EXISTS constraints extraction: 0 NOT EXISTS, 0 EXISTS
[10:57:02 INF] Extracted 3 total constraints: 1 WHERE, 0 JOIN, 0 LIKE, 0 IN, 0 BETWEEN, 0 NULL, 0 EXISTS</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="47fda484-9b14-4f69-b15d-db05cfc22db1" testId="50debf66-da8c-a609-79d1-35e70ddebf83" testName="Test_ProveTC001Fix_VnextConstraintSatisfaction" computerName="cursor" duration="00:00:00.0022494" startTime="2025-07-06T10:57:03.5834219+00:00" endTime="2025-07-06T10:57:03.5858335+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="47fda484-9b14-4f69-b15d-db05cfc22db1">
      <Output>
        <StdOut>[DEBUG] GetApiKey() method called
[DEBUG] ConfigurationManager result: '' (length: 0)
[DEBUG] Environment variable result: '' (length: 0)
[DEBUG] Using HARDCODED API key for testing
[DEBUG] Gemini API Key configured: True
[DEBUG] API Key length: 39
[DEBUG] API Key preview: AIzaSyCsOz...
=== PROVING TC001 VNEXT FIX ===
Constraint: c.NAME LIKE '%VNEXT%'
Expected: Generated company names should contain 'VNEXT'

Generated 0 valid companies:

⚠️ AI generation failed, testing fallback mechanism...
Fallback generated 0 records:</StdOut>
        <ErrorInfo>
          <Message>Assert.IsTrue failed. Fallback should generate at least some records</Message>
          <StackTrace>   at SqlTestDataGenerator.Tests.ConstraintAwareGenerationTests.Test_ProveTC001Fix_VnextConstraintSatisfaction() in /workspace/SqlTestDataGenerator.Tests/ConstraintAwareGenerationTests.cs:line 337
</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="7a6cd104-879d-4e52-b8dc-9c10432fbbaf" testId="8d13d544-5f8f-925e-c535-770dd2454212" testName="ExtractBetweenConstraints_WithDateValues_ShouldExtractCorrectly" computerName="cursor" duration="00:00:00.0027184" startTime="2025-07-06T10:57:02.2662374+00:00" endTime="2025-07-06T10:57:02.2690498+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="7a6cd104-879d-4e52-b8dc-9c10432fbbaf">
      <Output>
        <StdOut>[10:57:02 INF] Extracting comprehensive constraints from SQL query
[10:57:02 INF] Found WHERE clause: o.order_date BETWEEN '2023-01-01' AND '2023-12-31'
[10:57:02 INF] Found BETWEEN constraint: o.order_date BETWEEN '2023-01-01' AND '2023-12-31' - Type: DATE
[10:57:02 INF] Starting EXISTS constraints extraction with two-phase approach
[10:57:02 INF] Completed EXISTS constraints extraction: 0 NOT EXISTS, 0 EXISTS
[10:57:02 INF] Extracted 1 total constraints: 0 WHERE, 0 JOIN, 0 LIKE, 0 IN, 1 BETWEEN, 0 NULL, 0 EXISTS</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="61720804-f4de-4ed3-ad49-b015085adcd2" testId="29c39ae5-9cce-1642-84cb-dfbfca4d141f" testName="ParseQuery_LikeCondition_ExtractsCleanValue" computerName="cursor" duration="00:00:00.0031021" startTime="2025-07-06T11:03:06.6033466+00:00" endTime="2025-07-06T11:03:06.6065137+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="61720804-f4de-4ed3-ad49-b015085adcd2">
      <Output>
        <StdOut>[11:03:06 INF] SqlQueryParserV2: Parsing SQL query with ScriptDom engine
[11:03:06 DBG] Visiting SelectStatement
[11:03:06 DBG] Found table: users with alias: users
[11:03:06 DBG] Extracting WHERE conditions from clause
[11:03:06 DBG] Found LIKE condition: .first_name LIKE Phương
[11:03:06 INF] ScriptDom extracted 1 WHERE conditions and 0 JOIN requirements</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="c7edc20e-0926-4ca9-b29e-015f0c18370a" testId="760b8c6c-883b-dc5b-32da-1ca02fa16c88" testName="ExtractWhereConstraints_WithComparison_ShouldExtractCorrectly" computerName="cursor" duration="00:00:00.0012625" startTime="2025-07-06T10:57:02.2364554+00:00" endTime="2025-07-06T10:57:02.2377958+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="c7edc20e-0926-4ca9-b29e-015f0c18370a">
      <Output>
        <StdOut>[10:57:02 INF] Extracting comprehensive constraints from SQL query
[10:57:02 INF] Found WHERE clause: p.price &gt;= 100 AND p.quantity &lt; 50
[10:57:02 INF] Found WHERE comparison with alias: p.price &gt;= '100'
[10:57:02 INF] Found WHERE comparison with alias: p.quantity &lt; '50'
[10:57:02 INF] Starting EXISTS constraints extraction with two-phase approach
[10:57:02 INF] Completed EXISTS constraints extraction: 0 NOT EXISTS, 0 EXISTS
[10:57:02 INF] Extracted 2 total constraints: 2 WHERE, 0 JOIN, 0 LIKE, 0 IN, 0 BETWEEN, 0 NULL, 0 EXISTS</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="8d661c3a-e878-412f-84e8-dfb441b4c7dd" testId="6c8fe354-0fbf-caad-5153-93da1c924108" testName="ParseQuery_ComplexQuery_ShouldHandleAllConditionTypes" computerName="cursor" duration="00:00:00.0010310" startTime="2025-07-06T11:03:06.5205433+00:00" endTime="2025-07-06T11:03:06.5216121+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="8d661c3a-e878-412f-84e8-dfb441b4c7dd">
      <Output>
        <StdOut>[SqlMetadataService] Extracting tables from query: 183 chars
[SqlMetadataService] Clean SQL: SELECT u.name, c.name FROM users u INNER JOIN companies c ON u.company_id = c.id WHERE u.age &gt;= 18 AND u.status = 'active' AND u.name LIKE '%John%' AND u.department IN ('IT', 'Sales')...
[SqlMetadataService] Pattern '\bFROM\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)(?:\s+(?:AS\s+)?(\w+))?' found 1 matches
[SqlMetadataService] Match: 'FROM users u'
[SqlMetadataService] Found table: users
[SqlMetadataService] Pattern '\b(?:INNER\s+|LEFT\s+|RIGHT\s+|FULL\s+|OUTER\s+)?JOIN\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)(?:\s+(?:AS\s+)?(\w+))?' found 1 matches
[SqlMetadataService] Match: 'INNER JOIN companies c'
[SqlMetadataService] Found table: companies
[SqlMetadataService] Pattern '\bINTO\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)' found 0 matches
[SqlMetadataService] Pattern '\bUPDATE\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)' found 0 matches
[SqlMetadataService] Pattern '\bINSERT\s+INTO\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)' found 0 matches
[SqlMetadataService] Total tables extracted: 2 - users, companies
JOIN Debug: Clean query = 'SELECT u.name, c.name FROM users u INNER JOIN companies c ON u.company_id = c.id WHERE u.age &gt;= 18 AND u.status = 'active' AND u.name LIKE '%John%' AND u.department IN ('IT', 'Sales')'
JOIN Debug: Pattern = '(?:INNER\s+|LEFT\s+|RIGHT\s+|FULL\s+|OUTER\s+)?JOIN\s+(\w+)\s+(\w+)\s+ON\s+([^()]+?)(?=\s+(?:INNER|LEFT|RIGHT|FULL|OUTER|WHERE|ORDER|GROUP|LIMIT|$)|$)'
JOIN Debug: Found 1 JOIN matches
JOIN Debug: Match found - Table: 'companies', Alias: 'c', OnClause: 'u.company_id = c.id'
JOIN Debug: Condition pattern match success: True
Found JOIN: u.company_id = c.id</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="62cb70f6-0b20-4843-9577-68252334d409" testId="914ca81b-0b8a-18f3-24df-f3c71ef9cb98" testName="Debug_AIService_BasicFunctionality" computerName="cursor" duration="00:00:00.0016339" startTime="2025-07-06T10:57:03.5882174+00:00" endTime="2025-07-06T10:57:03.5899663+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="62cb70f6-0b20-4843-9577-68252334d409">
      <Output>
        <StdOut>[DEBUG] GetApiKey() method called
[DEBUG] ConfigurationManager result: '' (length: 0)
[DEBUG] Environment variable result: '' (length: 0)
[DEBUG] Using HARDCODED API key for testing
[DEBUG] Gemini API Key configured: True
[DEBUG] API Key length: 39
[DEBUG] API Key preview: AIzaSyCsOz...
[DEBUG] Testing AI service with VNEXT constraint...
[DEBUG] AI Service available: False
[DEBUG] Generated 1 records
[DEBUG] Record: name='TestVNEXTData_1'
[DEBUG] Test completed. Records generated: 1</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="b85d6f44-ccd7-4d3c-a63f-7ecb8cccfe5c" testId="56223bc0-c4e1-c666-e2df-cb845d303b68" testName="TestExtractConstraints_AllNewPatternsCombined_ShouldExtractAll" computerName="cursor" duration="00:00:00.0018717" startTime="2025-07-06T10:57:03.7129282+00:00" endTime="2025-07-06T10:57:03.7148890+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="b85d6f44-ccd7-4d3c-a63f-7ecb8cccfe5c">
      <Output>
        <StdOut>=== ALL NEW PATTERNS COMBINED TEST RESULTS ===
Total Constraints: 8
IN Clause: 2
BETWEEN: 2
NULL: 2
LIKE: 1
JOIN: 1
✅ All new patterns combined extraction test passed
\ud83c\udf89 ENHANCED CONSTRAINT EXTRACTION SUCCESSFUL!</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="7c99807c-d933-454a-a151-f5be229ff4d6" testId="cff95060-9a70-96c1-ba36-b42d05db42bf" testName="ExecuteQueryWithTestDataAsync_MultiTable_MustGenerateCorrectDistribution" computerName="cursor" duration="00:00:00.0066202" startTime="2025-07-06T11:03:06.4409022+00:00" endTime="2025-07-06T11:03:06.4475890+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="7c99807c-d933-454a-a151-f5be229ff4d6">
      <Output>
        <StdOut>[CentralizedLoggingManager] Initialized. Logs directory: /workspace/logs
[CentralizedLoggingManager] Config source: default
[EngineService] Centralized logs directory: /workspace/logs
=== STRICT MULTI-TABLE TEST: Expected Records = 20 ===
Tables: users, companies, user_roles, roles
[EngineService] Starting execution for MySQL
[EngineService] Analyzing query: 357 chars
[SqlMetadataService] Extracting tables from query: 357 chars
[SqlMetadataService] Clean SQL: 
            SELECT u.id, u.username, u.email, 
                   c.name as company_name, 
                   r.name as role_name
            FROM users u
            INNER JOIN companies c ON u.comp...
[SqlMetadataService] Pattern '\bFROM\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)(?:\s+(?:AS\s+)?(\w+))?' found 1 matches
[SqlMetadataService] Match: 'FROM users u'
[SqlMetadataService] Found table: users
[SqlMetadataService] Pattern '\b(?:INNER\s+|LEFT\s+|RIGHT\s+|FULL\s+|OUTER\s+)?JOIN\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)(?:\s+(?:AS\s+)?(\w+))?' found 3 matches
[SqlMetadataService] Match: 'INNER JOIN companies c'
[SqlMetadataService] Found table: companies
[SqlMetadataService] Match: 'INNER JOIN user_roles ur'
[SqlMetadataService] Found table: user_roles
[SqlMetadataService] Match: 'INNER JOIN roles r'
[SqlMetadataService] Found table: roles
[SqlMetadataService] Pattern '\bINTO\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)' found 0 matches
[SqlMetadataService] Pattern '\bUPDATE\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)' found 0 matches
[SqlMetadataService] Pattern '\bINSERT\s+INTO\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)' found 0 matches
[SqlMetadataService] Total tables extracted: 4 - users, companies, user_roles, roles
[EngineService] Metadata extraction failed: Unable to connect to any of the specified MySQL hosts.
[EngineService] Execution failed: Không thể phân tích database schema: Unable to connect to any of the specified MySQL hosts.
[EngineService] Exception type: InvalidOperationException
[EngineService] Inner exception: Unable to connect to any of the specified MySQL hosts.
Success: False
Generated Records: 0
Generated INSERT Statements: 0</StdOut>
        <ErrorInfo>
          <Message>Assert.Fail failed. Multi-table test FAILED: Không thể phân tích database schema: Unable to connect to any of the specified MySQL hosts.</Message>
          <StackTrace>   at SqlTestDataGenerator.Tests.RecordCountStrictVerificationTests.ExecuteQueryWithTestDataAsync_MultiTable_MustGenerateCorrectDistribution() in /workspace/SqlTestDataGenerator.Tests/RecordCountStrictVerificationTests.cs:line 138
</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="dde74f9c-d44d-4084-a8df-b9c853e0d6c3" testId="fb448c11-0f7f-5b00-42aa-f078814d3bca" testName="ParseDateConditions_DateAddWithMonth_ShouldParseCorrectly" computerName="cursor" duration="00:00:00.0006053" startTime="2025-07-06T11:03:06.4951395+00:00" endTime="2025-07-06T11:03:06.4957849+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="dde74f9c-d44d-4084-a8df-b9c853e0d6c3">
      <Output>
        <StdOut>[SqlMetadataService] Extracting tables from query: 84 chars
[SqlMetadataService] Clean SQL: SELECT * FROM user_roles ur WHERE ur.expires_at &gt;= DATE_ADD(NOW(), INTERVAL 1 MONTH)...
[SqlMetadataService] Pattern '\bFROM\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)(?:\s+(?:AS\s+)?(\w+))?' found 1 matches
[SqlMetadataService] Match: 'FROM user_roles ur'
[SqlMetadataService] Found table: user_roles
[SqlMetadataService] Pattern '\b(?:INNER\s+|LEFT\s+|RIGHT\s+|FULL\s+|OUTER\s+)?JOIN\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)(?:\s+(?:AS\s+)?(\w+))?' found 0 matches
[SqlMetadataService] Pattern '\bINTO\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)' found 0 matches
[SqlMetadataService] Pattern '\bUPDATE\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)' found 0 matches
[SqlMetadataService] Pattern '\bINSERT\s+INTO\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)' found 0 matches
[SqlMetadataService] Total tables extracted: 1 - user_roles
JOIN Debug: Clean query = 'SELECT * FROM user_roles ur WHERE ur.expires_at &gt;= DATE_ADD(NOW(), INTERVAL 1 MONTH)'
JOIN Debug: Pattern = '(?:INNER\s+|LEFT\s+|RIGHT\s+|FULL\s+|OUTER\s+)?JOIN\s+(\w+)\s+(\w+)\s+ON\s+([^()]+?)(?=\s+(?:INNER|LEFT|RIGHT|FULL|OUTER|WHERE|ORDER|GROUP|LIMIT|$)|$)'
JOIN Debug: Found 0 JOIN matches</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="e60ca16f-c137-4ebb-9417-6270f9e1ec5e" testId="ff704aa0-e144-9fd1-6bac-09fc4a255f36" testName="GenerateBogusData_DateConstraints_ShouldGenerateDateValues" computerName="cursor" duration="00:00:00.0029580" startTime="2025-07-06T10:57:02.0839574+00:00" endTime="2025-07-06T10:57:02.0870335+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="e60ca16f-c137-4ebb-9417-6270f9e1ec5e">
      <Output>
        <StdOut>[DEBUG] Table users has 3 columns:
[DEBUG] Column: id, IsIdentity: True, IsGenerated: False, DefaultValue: ''
[DEBUG] Column: first_name, IsIdentity: False, IsGenerated: False, DefaultValue: ''
[DEBUG] Column: date_of_birth, IsIdentity: False, IsGenerated: False, DefaultValue: ''
[DEBUG-T021] Filtered columns for users: 2 columns (from 3 total)
[DEBUG-T021] Excluded columns: id(Identity:True,Generated:False)
[DEBUG-T021] Included columns: first_name, date_of_birth
[DEBUG-T021] Generated SQL for users: INSERT INTO `users` (`first_name`, `date_of_birth`) VALUES ('Katrina', '1998-02-13');
[DEBUG-T021] Generated SQL for users: INSERT INTO `users` (`first_name`, `date_of_birth`) VALUES ('Jenifer', '1963-09-27');
[DEBUG-T021] Generated SQL for users: INSERT INTO `users` (`first_name`, `date_of_birth`) VALUES ('Marcus', '1969-09-18');
[DEBUG-T021] Generated SQL for users: INSERT INTO `users` (`first_name`, `date_of_birth`) VALUES ('Jessy', '1997-11-24');
[DEBUG-T021] Generated SQL for users: INSERT INTO `users` (`first_name`, `date_of_birth`) VALUES ('Orval', '2005-01-16');
[DEBUG-T021] Generated SQL for users: INSERT INTO `users` (`first_name`, `date_of_birth`) VALUES ('Elaina', '1988-06-29');
[DEBUG-T021] Generated SQL for users: INSERT INTO `users` (`first_name`, `date_of_birth`) VALUES ('Isabelle', '1980-05-14');
[DEBUG-T021] Generated SQL for users: INSERT INTO `users` (`first_name`, `date_of_birth`) VALUES ('Estell', '1964-02-12');
[DEBUG-T021] Generated SQL for users: INSERT INTO `users` (`first_name`, `date_of_birth`) VALUES ('Reid', '1981-10-20');
[DEBUG-T021] Generated SQL for users: INSERT INTO `users` (`first_name`, `date_of_birth`) VALUES ('Khalil', '1967-06-08');
User statement: INSERT INTO `users` (`first_name`, `date_of_birth`) VALUES ('Katrina', '1998-02-13');
User statement: INSERT INTO `users` (`first_name`, `date_of_birth`) VALUES ('Jenifer', '1963-09-27');
User statement: INSERT INTO `users` (`first_name`, `date_of_birth`) VALUES ('Marcus', '1969-09-18');
Note: For business-specific data (e.g., Phương, 1989, VNEXT), AI generation would be needed</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="6948ef7b-cbac-4fbe-9364-78c4204ca75a" testId="1c090018-b67e-4cd0-3181-0f61bd7ea682" testName="ParseQuery_WhereEqualityWithTableAlias_ShouldExtractCondition" computerName="cursor" duration="00:00:00.0006957" startTime="2025-07-06T11:03:06.5127563+00:00" endTime="2025-07-06T11:03:06.5134887+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="6948ef7b-cbac-4fbe-9364-78c4204ca75a">
      <Output>
        <StdOut>[SqlMetadataService] Extracting tables from query: 47 chars
[SqlMetadataService] Clean SQL: SELECT * FROM users u WHERE u.status = 'active'...
[SqlMetadataService] Pattern '\bFROM\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)(?:\s+(?:AS\s+)?(\w+))?' found 1 matches
[SqlMetadataService] Match: 'FROM users u'
[SqlMetadataService] Found table: users
[SqlMetadataService] Pattern '\b(?:INNER\s+|LEFT\s+|RIGHT\s+|FULL\s+|OUTER\s+)?JOIN\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)(?:\s+(?:AS\s+)?(\w+))?' found 0 matches
[SqlMetadataService] Pattern '\bINTO\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)' found 0 matches
[SqlMetadataService] Pattern '\bUPDATE\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)' found 0 matches
[SqlMetadataService] Pattern '\bINSERT\s+INTO\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)' found 0 matches
[SqlMetadataService] Total tables extracted: 1 - users
JOIN Debug: Clean query = 'SELECT * FROM users u WHERE u.status = 'active''
JOIN Debug: Pattern = '(?:INNER\s+|LEFT\s+|RIGHT\s+|FULL\s+|OUTER\s+)?JOIN\s+(\w+)\s+(\w+)\s+ON\s+([^()]+?)(?=\s+(?:INNER|LEFT|RIGHT|FULL|OUTER|WHERE|ORDER|GROUP|LIMIT|$)|$)'
JOIN Debug: Found 0 JOIN matches</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="88b443d0-c82b-44d8-8e05-30cb6c84e699" testId="46c9deed-d042-bb83-cb94-fc7b86558a4f" testName="TestExtractConstraints_NullChecks_ShouldExtractNullConstraints" computerName="cursor" duration="00:00:00.0015289" startTime="2025-07-06T11:01:03.9342079+00:00" endTime="2025-07-06T11:01:03.9358183+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="88b443d0-c82b-44d8-8e05-30cb6c84e699">
      <Output>
        <StdOut>=== NULL CHECK TEST RESULTS ===
Total Constraints: 3
❌ NULL constraints found: 0 (Expected: 0 until implemented)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="a4cfa5c0-32c2-410c-b3c5-f94a9a151164" testId="7d12d01e-dee5-0e97-3f0b-9d5358bf1a9d" testName="ExtractTablesFromQuery_SQLWithComments_ShouldIgnoreComments" computerName="cursor" duration="00:00:00.0001384" startTime="2025-07-06T10:57:02.2000802+00:00" endTime="2025-07-06T10:57:02.2003129+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="a4cfa5c0-32c2-410c-b3c5-f94a9a151164">
      <Output>
        <StdOut>[SqlMetadataService] Extracting tables from query: 297 chars
[SqlMetadataService] Clean SQL: 
            
            SELECT u.id , u.name
            FROM users u 
            
            INNER JOIN companies c ON u.company_id = c.id...
[SqlMetadataService] Pattern '\bFROM\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)(?:\s+(?:AS\s+)?(\w+))?' found 1 matches
[SqlMetadataService] Match: 'FROM users u'
[SqlMetadataService] Found table: users
[SqlMetadataService] Pattern '\b(?:INNER\s+|LEFT\s+|RIGHT\s+|FULL\s+|OUTER\s+)?JOIN\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)(?:\s+(?:AS\s+)?(\w+))?' found 1 matches
[SqlMetadataService] Match: 'INNER JOIN companies c'
[SqlMetadataService] Found table: companies
[SqlMetadataService] Pattern '\bINTO\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)' found 0 matches
[SqlMetadataService] Pattern '\bUPDATE\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)' found 0 matches
[SqlMetadataService] Pattern '\bINSERT\s+INTO\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)' found 0 matches
[SqlMetadataService] Total tables extracted: 2 - users, companies</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="1c57dc5b-2064-4528-b9f7-ddef3e258189" testId="cfa4458e-912b-84e4-7950-bc08d42037b2" testName="TestExtractConstraints_BetweenOperators_ShouldExtractRanges" computerName="cursor" duration="00:00:00.0017010" startTime="2025-07-06T11:01:03.9322084+00:00" endTime="2025-07-06T11:01:03.9339787+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="1c57dc5b-2064-4528-b9f7-ddef3e258189">
      <Output>
        <StdOut>=== BETWEEN OPERATORS TEST RESULTS ===
Total Constraints: 2
❌ BETWEEN constraints found: 0 (Expected: 0 until implemented)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="3e385a55-e3fb-4917-bc96-f9ea261e5ba6" testId="de2148e8-fb9e-8b47-4b81-491d8235a8ac" testName="TestConnection_AlternativeMySQL_ShouldConnect" computerName="cursor" duration="00:02:02.4230333" startTime="2025-07-06T11:01:04.0108141+00:00" endTime="2025-07-06T11:03:06.4339677+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="3e385a55-e3fb-4917-bc96-f9ea261e5ba6">
      <Output>
        <StdOut>[CentralizedLoggingManager] Initialized. Logs directory: /workspace/logs
[CentralizedLoggingManager] Config source: default
[EngineService] Centralized logs directory: /workspace/logs
=== TESTING ALTERNATIVE MYSQL CONNECTIONS ===

Testing: Server=mysql-test.aivencloud.com;Port=3306;Databas...
Result: ❌ FAILED

Testing: Server=roundhouse.proxy.rlwy.net;Port=3306;Databas...
Result: ❌ FAILED

Testing: Server=aws.connect.psdb.cloud;Database=testdb;Uid=...
Result: ❌ FAILED

Testing: Server=db4free.net;Port=3306;Database=testdbname;U...
Result: ❌ FAILED

Testing: Server=sql.freedb.tech;Port=3306;Database=freedb_t...
Result: ❌ FAILED

Testing: Server=sql.freedb.tech;Port=3306;Database=freedb_D...
Result: ✅ SUCCESS
\ud83c\udf89 FOUND WORKING MYSQL: Server=sql.freedb.tech;Port=3306;Database=freedb_DBTest;Uid=freedb_TestAdmin;Pwd="Vt5B&amp;Mx6Jcu#jeN";
✅ Working MySQL connection found!
\ud83d\udccb Use this in your application: Server=sql.freedb.tech;Port=3306;Database=freedb_DBTest;Uid=freedb_TestAdmin;Pwd="Vt5B&amp;Mx6Jcu#jeN";
Connection test completed. Found working connection: True</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="9d420289-682a-4f0f-b978-2e85f67dc643" testId="cb5bffe8-1b8a-0d8d-5a3f-e1ad0ad5499c" testName="TC011_Subqueries_WithExistsAndIn_ShouldHandleComplexLogic" computerName="cursor" duration="00:00:00.0047711" startTime="2025-07-06T11:01:03.7991635+00:00" endTime="2025-07-06T11:01:03.8040285+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="9d420289-682a-4f0f-b978-2e85f67dc643">
      <Output>
        <StdOut>[CentralizedLoggingManager] Initialized. Logs directory: /workspace/logs
[CentralizedLoggingManager] Config source: default
[EngineService] Centralized logs directory: /workspace/logs
=== TC011: Subqueries Test ===
Keywords: EXISTS, IN, NOT IN, BETWEEN, Subqueries
[EngineService] Starting execution for MySQL
[EngineService] Analyzing query: 670 chars
[SqlMetadataService] Extracting tables from query: 670 chars
[SqlMetadataService] Clean SQL: 
            SELECT u.id, u.username, u.email, u.salary
            FROM users u
            WHERE EXISTS (
                SELECT 1 FROM user_roles ur 
                WHERE ur.user_id = u.id AND ur....
[SqlMetadataService] Pattern '\bFROM\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)(?:\s+(?:AS\s+)?(\w+))?' found 4 matches
[SqlMetadataService] Match: 'FROM users u'
[SqlMetadataService] Found table: users
[SqlMetadataService] Match: 'FROM user_roles ur'
[SqlMetadataService] Found table: user_roles
[SqlMetadataService] Match: 'FROM companies c'
[SqlMetadataService] Found table: companies
[SqlMetadataService] Match: 'FROM user_roles ur2'
[SqlMetadataService] Found table: user_roles
[SqlMetadataService] Pattern '\b(?:INNER\s+|LEFT\s+|RIGHT\s+|FULL\s+|OUTER\s+)?JOIN\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)(?:\s+(?:AS\s+)?(\w+))?' found 1 matches
[SqlMetadataService] Match: 'INNER JOIN roles r'
[SqlMetadataService] Found table: roles
[SqlMetadataService] Pattern '\bINTO\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)' found 0 matches
[SqlMetadataService] Pattern '\bUPDATE\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)' found 0 matches
[SqlMetadataService] Pattern '\bINSERT\s+INTO\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)' found 0 matches
[SqlMetadataService] Total tables extracted: 4 - users, user_roles, companies, roles
[EngineService] Metadata extraction failed: Unable to connect to any of the specified MySQL hosts.
[EngineService] Execution failed: Không thể phân tích database schema: Unable to connect to any of the specified MySQL hosts.
[EngineService] Exception type: InvalidOperationException
[EngineService] Inner exception: Unable to connect to any of the specified MySQL hosts.
Result Success: False
Generated Records: 0
Expected error for subquery: Không thể phân tích database schema: Unable to connect to any of the specified MySQL hosts.</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="31853410-f566-44c6-9211-05539b730e3c" testId="e42d574f-37e1-f5cf-4f56-2ca52ebfaa46" testName="ExecuteQueryWithTestDataAsync_Performance_ShouldCompleteWithinTimeout" computerName="cursor" duration="00:00:00.0055017" startTime="2025-07-06T10:57:02.1889702+00:00" endTime="2025-07-06T10:57:02.1945850+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="31853410-f566-44c6-9211-05539b730e3c">
      <Output>
        <StdOut>[CentralizedLoggingManager] Initialized. Logs directory: /workspace/logs
[CentralizedLoggingManager] Config source: default
[EngineService] Centralized logs directory: /workspace/logs
[EngineService] Starting execution for MySQL
[EngineService] Analyzing query: 698 chars
[SqlMetadataService] Extracting tables from query: 698 chars
[SqlMetadataService] Clean SQL: 
            SELECT u.id, u.username, u.email, u.created_at,
                   c.name, c.code, c.address,
                   r.name as role_name, r.level,
                   ur.assigned_at, ur.expire...
[SqlMetadataService] Pattern '\bFROM\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)(?:\s+(?:AS\s+)?(\w+))?' found 1 matches
[SqlMetadataService] Match: 'FROM users u'
[SqlMetadataService] Found table: users
[SqlMetadataService] Pattern '\b(?:INNER\s+|LEFT\s+|RIGHT\s+|FULL\s+|OUTER\s+)?JOIN\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)(?:\s+(?:AS\s+)?(\w+))?' found 4 matches
[SqlMetadataService] Match: 'INNER JOIN companies c'
[SqlMetadataService] Found table: companies
[SqlMetadataService] Match: 'LEFT JOIN departments d'
[SqlMetadataService] Found table: departments
[SqlMetadataService] Match: 'INNER JOIN user_roles ur'
[SqlMetadataService] Found table: user_roles
[SqlMetadataService] Match: 'INNER JOIN roles r'
[SqlMetadataService] Found table: roles
[SqlMetadataService] Pattern '\bINTO\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)' found 0 matches
[SqlMetadataService] Pattern '\bUPDATE\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)' found 0 matches
[SqlMetadataService] Pattern '\bINSERT\s+INTO\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)' found 0 matches
[SqlMetadataService] Total tables extracted: 5 - users, companies, departments, user_roles, roles
[EngineService] Metadata extraction failed: Unable to connect to any of the specified MySQL hosts.
[EngineService] Execution failed: Không thể phân tích database schema: Unable to connect to any of the specified MySQL hosts.
[EngineService] Exception type: InvalidOperationException
[EngineService] Inner exception: Unable to connect to any of the specified MySQL hosts.
✅ Performance test completed in 0.00s
Result success: False
Error (if any): Không thể phân tích database schema: Unable to connect to any of the specified MySQL hosts.</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="774ddf02-0583-4a6b-b061-3eb0a5cbd7eb" testId="f718a06e-91df-1e49-9317-91d0e283ac3b" testName="IsApiKeyConfigured_WithValidKey_ShouldReturnTrue" computerName="cursor" duration="00:00:00.0004733" startTime="2025-07-06T10:57:02.3658360+00:00" endTime="2025-07-06T10:57:02.3663841+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="774ddf02-0583-4a6b-b061-3eb0a5cbd7eb" />
    <UnitTestResult executionId="d0030a3e-76b6-4cc9-9976-bed626863931" testId="866b0d3a-b4e9-b29d-5399-970cdfc928ee" testName="ExtractAllConstraints_WithCommentsAndWhitespace_ShouldCleanAndExtract" computerName="cursor" duration="00:00:00.0008627" startTime="2025-07-06T10:57:02.2948098+00:00" endTime="2025-07-06T10:57:02.2957480+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="d0030a3e-76b6-4cc9-9976-bed626863931">
      <Output>
        <StdOut>[10:57:02 INF] Extracting comprehensive constraints from SQL query
[10:57:02 INF] Found WHERE clause: u.status = 'ACTIVE' AND u.age &gt;= 18
[10:57:02 INF] Found WHERE equality with alias: u.status = 'ACTIVE'
[10:57:02 INF] Found WHERE comparison with alias: u.age &gt;= '18'
[10:57:02 INF] Starting EXISTS constraints extraction with two-phase approach
[10:57:02 INF] Completed EXISTS constraints extraction: 0 NOT EXISTS, 0 EXISTS
[10:57:02 INF] Extracted 2 total constraints: 2 WHERE, 0 JOIN, 0 LIKE, 0 IN, 0 BETWEEN, 0 NULL, 0 EXISTS</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="dd430bea-b873-453e-a041-b1871df79548" testId="0c9b3b0d-f01b-6247-7450-dcba24b5eb70" testName="TestExtractConstraints_InClauseStringList_ShouldExtractValues" computerName="cursor" duration="00:00:00.0017853" startTime="2025-07-06T10:57:03.7013606+00:00" endTime="2025-07-06T10:57:03.7033702+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="dd430bea-b873-453e-a041-b1871df79548">
      <Output>
        <StdOut>=== IN CLAUSE STRING LIST TEST RESULTS ===
Total Constraints: 2
IN Clause Constraints: 2
IN: u.department IN (HR, IT, Finance) - Type: STRING_LIST
IN: u.status IN (ACTIVE, PENDING) - Type: STRING_LIST
✅ IN clause string list extraction test passed</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="9100e40c-2b61-4cb0-bb0b-ee867cf6b4ed" testId="8599cba4-e5d8-56d3-7d02-da5179df2128" testName="ExtractTablesFromQuery_MalformedSQL_ShouldHandleGracefully" computerName="cursor" duration="00:00:00.0002258" startTime="2025-07-06T10:57:02.2054838+00:00" endTime="2025-07-06T10:57:02.2058063+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="9100e40c-2b61-4cb0-bb0b-ee867cf6b4ed">
      <Output>
        <StdOut>[SqlMetadataService] Extracting tables from query: 170 chars
[SqlMetadataService] Clean SQL: 
            SELECT u.id FROM users u
            INNE JOIN companies 
            LEFT JOI roles r ON 
            WHERE u.id = ...
[SqlMetadataService] Pattern '\bFROM\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)(?:\s+(?:AS\s+)?(\w+))?' found 1 matches
[SqlMetadataService] Match: 'FROM users u'
[SqlMetadataService] Found table: users
[SqlMetadataService] Pattern '\b(?:INNER\s+|LEFT\s+|RIGHT\s+|FULL\s+|OUTER\s+)?JOIN\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)(?:\s+(?:AS\s+)?(\w+))?' found 1 matches
[SqlMetadataService] Match: 'JOIN companies 
            LEFT'
[SqlMetadataService] Found table: companies
[SqlMetadataService] Pattern '\bINTO\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)' found 0 matches
[SqlMetadataService] Pattern '\bUPDATE\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)' found 0 matches
[SqlMetadataService] Pattern '\bINSERT\s+INTO\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)' found 0 matches
[SqlMetadataService] Total tables extracted: 2 - users, companies</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="3a3fdaa7-526d-4cf8-88ed-5375b190a20e" testId="bc5324e6-bb6a-ee73-021c-bdeb249f570a" testName="TestSimpleWorkflow_GenericQuery" computerName="cursor" duration="00:00:00.0076102" startTime="2025-07-06T11:03:06.4800762+00:00" endTime="2025-07-06T11:03:06.4878503+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="3a3fdaa7-526d-4cf8-88ed-5375b190a20e">
      <Output>
        <StdOut>=== SIMPLE WORKFLOW TEST SETUP ===
[CentralizedLoggingManager] Initialized. Logs directory: /workspace/logs
[CentralizedLoggingManager] Config source: default
[EngineService] Centralized logs directory: /workspace/logs
=== SIMPLE WORKFLOW TEST CLEANUP ===</StdOut>
        <ErrorInfo>
          <Message>Initialization method SqlTestDataGenerator.Tests.SimpleWorkflowTest.Setup threw exception. MySqlConnector.MySqlException: Unable to connect to any of the specified MySQL hosts..
TestCleanup method SqlTestDataGenerator.Tests.SimpleWorkflowTest.Cleanup threw exception. MySqlConnector.MySqlException: Unable to connect to any of the specified MySQL hosts..</Message>
          <StackTrace>    at MySqlConnector.Core.ServerSession.OpenTcpSocketAsync(ConnectionSettings cs, ILoadBalancer loadBalancer, Activity activity, IOBehavior ioBehavior, CancellationToken cancellationToken) in /_/src/MySqlConnector/Core/ServerSession.cs:line 1063
   at MySqlConnector.Core.ServerSession.ConnectAsync(ConnectionSettings cs, MySqlConnection connection, Int64 startingTimestamp, ILoadBalancer loadBalancer, Activity activity, IOBehavior ioBehavior, CancellationToken cancellationToken) in /_/src/MySqlConnector/Core/ServerSession.cs:line 425
   at MySqlConnector.Core.ConnectionPool.ConnectSessionAsync(MySqlConnection connection, Action`4 logMessage, Int64 startingTimestamp, Activity activity, IOBehavior ioBehavior, CancellationToken cancellationToken) in /_/src/MySqlConnector/Core/ConnectionPool.cs:line 428
   at MySqlConnector.Core.ConnectionPool.ConnectSessionAsync(MySqlConnection connection, Action`4 logMessage, Int64 startingTimestamp, Activity activity, IOBehavior ioBehavior, CancellationToken cancellationToken) in /_/src/MySqlConnector/Core/ConnectionPool.cs:line 433
   at MySqlConnector.Core.ConnectionPool.GetSessionAsync(MySqlConnection connection, Int64 startingTimestamp, Int32 timeoutMilliseconds, Activity activity, IOBehavior ioBehavior, CancellationToken cancellationToken) in /_/src/MySqlConnector/Core/ConnectionPool.cs:line 111
   at MySqlConnector.Core.ConnectionPool.GetSessionAsync(MySqlConnection connection, Int64 startingTimestamp, Int32 timeoutMilliseconds, Activity activity, IOBehavior ioBehavior, CancellationToken cancellationToken) in /_/src/MySqlConnector/Core/ConnectionPool.cs:line 144
   at MySqlConnector.MySqlConnection.CreateSessionAsync(ConnectionPool pool, Int64 startingTimestamp, Activity activity, Nullable`1 ioBehavior, CancellationToken cancellationToken) in /_/src/MySqlConnector/MySqlConnection.cs:line 919
   at MySqlConnector.MySqlConnection.OpenAsync(Nullable`1 ioBehavior, CancellationToken cancellationToken) in /_/src/MySqlConnector/MySqlConnection.cs:line 419
   at SqlTestDataGenerator.Tests.SimpleWorkflowTest.CreateSimpleTestDatabase() in /workspace/SqlTestDataGenerator.Tests/SimpleWorkflowTest.cs:line 134
   at SqlTestDataGenerator.Tests.SimpleWorkflowTest.Setup() in /workspace/SqlTestDataGenerator.Tests/SimpleWorkflowTest.cs:line 30

TestCleanup Stack Trace
   at MySqlConnector.Core.ServerSession.OpenTcpSocketAsync(ConnectionSettings cs, ILoadBalancer loadBalancer, Activity activity, IOBehavior ioBehavior, CancellationToken cancellationToken) in /_/src/MySqlConnector/Core/ServerSession.cs:line 1063
   at MySqlConnector.Core.ServerSession.ConnectAsync(ConnectionSettings cs, MySqlConnection connection, Int64 startingTimestamp, ILoadBalancer loadBalancer, Activity activity, IOBehavior ioBehavior, CancellationToken cancellationToken) in /_/src/MySqlConnector/Core/ServerSession.cs:line 425
   at MySqlConnector.Core.ConnectionPool.ConnectSessionAsync(MySqlConnection connection, Action`4 logMessage, Int64 startingTimestamp, Activity activity, IOBehavior ioBehavior, CancellationToken cancellationToken) in /_/src/MySqlConnector/Core/ConnectionPool.cs:line 428
   at MySqlConnector.Core.ConnectionPool.ConnectSessionAsync(MySqlConnection connection, Action`4 logMessage, Int64 startingTimestamp, Activity activity, IOBehavior ioBehavior, CancellationToken cancellationToken) in /_/src/MySqlConnector/Core/ConnectionPool.cs:line 433
   at MySqlConnector.Core.ConnectionPool.GetSessionAsync(MySqlConnection connection, Int64 startingTimestamp, Int32 timeoutMilliseconds, Activity activity, IOBehavior ioBehavior, CancellationToken cancellationToken) in /_/src/MySqlConnector/Core/ConnectionPool.cs:line 111
   at MySqlConnector.Core.ConnectionPool.GetSessionAsync(MySqlConnection connection, Int64 startingTimestamp, Int32 timeoutMilliseconds, Activity activity, IOBehavior ioBehavior, CancellationToken cancellationToken) in /_/src/MySqlConnector/Core/ConnectionPool.cs:line 144
   at MySqlConnector.MySqlConnection.CreateSessionAsync(ConnectionPool pool, Int64 startingTimestamp, Activity activity, Nullable`1 ioBehavior, CancellationToken cancellationToken) in /_/src/MySqlConnector/MySqlConnection.cs:line 919
   at MySqlConnector.MySqlConnection.OpenAsync(Nullable`1 ioBehavior, CancellationToken cancellationToken) in /_/src/MySqlConnector/MySqlConnection.cs:line 419
   at SqlTestDataGenerator.Tests.SimpleWorkflowTest.CleanupSimpleTestData() in /workspace/SqlTestDataGenerator.Tests/SimpleWorkflowTest.cs:line 159
   at SqlTestDataGenerator.Tests.SimpleWorkflowTest.Cleanup() in /workspace/SqlTestDataGenerator.Tests/SimpleWorkflowTest.cs:line 39
</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="c5b387f3-c181-432e-b60e-6c6713db41b4" testId="b3b940d3-9e45-ea47-3b09-97145cecb2a3" testName="TC012_WindowFunctions_WithPartitionBy_ShouldGenerateRankedData" computerName="cursor" duration="00:00:00.0047210" startTime="2025-07-06T11:01:03.8042641+00:00" endTime="2025-07-06T11:01:03.8090809+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="c5b387f3-c181-432e-b60e-6c6713db41b4">
      <Output>
        <StdOut>[CentralizedLoggingManager] Initialized. Logs directory: /workspace/logs
[CentralizedLoggingManager] Config source: default
[EngineService] Centralized logs directory: /workspace/logs
=== TC012: Window Functions Test ===
Keywords: ROW_NUMBER, RANK, DENSE_RANK, LAG, LEAD, PARTITION BY, OVER
[EngineService] Starting execution for MySQL
[EngineService] Analyzing query: 721 chars
[SqlMetadataService] Extracting tables from query: 721 chars
[SqlMetadataService] Clean SQL: 
            SELECT u.id, u.username, u.salary, c.name as company_name,
                   ROW_NUMBER() OVER (PARTITION BY u.company_id ORDER BY u.salary DESC) as salary_rank,
                   RANK(...
[SqlMetadataService] Pattern '\bFROM\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)(?:\s+(?:AS\s+)?(\w+))?' found 1 matches
[SqlMetadataService] Match: 'FROM users u'
[SqlMetadataService] Found table: users
[SqlMetadataService] Pattern '\b(?:INNER\s+|LEFT\s+|RIGHT\s+|FULL\s+|OUTER\s+)?JOIN\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)(?:\s+(?:AS\s+)?(\w+))?' found 1 matches
[SqlMetadataService] Match: 'INNER JOIN companies c'
[SqlMetadataService] Found table: companies
[SqlMetadataService] Pattern '\bINTO\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)' found 0 matches
[SqlMetadataService] Pattern '\bUPDATE\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)' found 0 matches
[SqlMetadataService] Pattern '\bINSERT\s+INTO\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)' found 0 matches
[SqlMetadataService] Total tables extracted: 2 - users, companies
[EngineService] Metadata extraction failed: Unable to connect to any of the specified MySQL hosts.
[EngineService] Execution failed: Không thể phân tích database schema: Unable to connect to any of the specified MySQL hosts.
[EngineService] Exception type: InvalidOperationException
[EngineService] Inner exception: Unable to connect to any of the specified MySQL hosts.
Result Success: False
Generated Records: 0
Expected error for window functions: Không thể phân tích database schema: Unable to connect to any of the specified MySQL hosts.</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="95dc5c83-df82-4fdb-81d4-ac23e703bd5f" testId="4faffafa-f6dd-cf6d-8efc-478e6d6bdbf6" testName="TC001_AI_ExecuteQueryWithTestDataAsync_ComplexVowisSQL_WithGeminiAI" computerName="cursor" duration="00:00:00.0114892" startTime="2025-07-06T11:01:03.7642284+00:00" endTime="2025-07-06T11:01:03.7758779+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="95dc5c83-df82-4fdb-81d4-ac23e703bd5f">
      <Output>
        <StdOut>[CentralizedLoggingManager] Initialized. Logs directory: /workspace/logs
[CentralizedLoggingManager] Config source: default
[EngineService] Centralized logs directory: /workspace/logs
=== TEST: AI-Enhanced Complex Vowis SQL với Gemini ===
Connection: Server=localhost;Port=3306;Database=my_database;Uid=root;Pwd=22092012;Connect Timeout=120;Command Timeout=120;CharSet=utf8mb4;ConnectionReset=false;Connection Lifetime=300;Pooling=true;Min Pool Size=0;Max Pool Size=10;
SQL Length: 1162 characters
Successfully read API key from app.config file directly
Environment API Key: Not Found
Config API Key: Found
Final API Key: AIzaSyCsOzujfOGEBwBv...
Gemini API Key Available: True
[CentralizedLoggingManager] Initialized. Logs directory: /workspace/logs
[CentralizedLoggingManager] Config source: default
[EngineService] Centralized logs directory: /workspace/logs

=== EXECUTING AI-ENHANCED TEST ===
[EngineService] Starting execution for MySQL
[EngineService] Analyzing query: 1162 chars
[SqlMetadataService] Extracting tables from query: 1162 chars
[SqlMetadataService] Clean SQL: 
        
        SELECT u.id, u.username, u.first_name, u.last_name, u.email, u.date_of_birth, u.salary, u.department, u.hire_date, 
               c.NAME AS company_name, c.code AS company_code, r.N...
[SqlMetadataService] Pattern '\bFROM\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)(?:\s+(?:AS\s+)?(\w+))?' found 1 matches
[SqlMetadataService] Match: 'FROM users u'
[SqlMetadataService] Found table: users
[SqlMetadataService] Pattern '\b(?:INNER\s+|LEFT\s+|RIGHT\s+|FULL\s+|OUTER\s+)?JOIN\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)(?:\s+(?:AS\s+)?(\w+))?' found 3 matches
[SqlMetadataService] Match: 'INNER JOIN companies c'
[SqlMetadataService] Found table: companies
[SqlMetadataService] Match: 'INNER JOIN user_roles ur'
[SqlMetadataService] Found table: user_roles
[SqlMetadataService] Match: 'INNER JOIN roles r'
[SqlMetadataService] Found table: roles
[SqlMetadataService] Pattern '\bINTO\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)' found 0 matches
[SqlMetadataService] Pattern '\bUPDATE\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)' found 0 matches
[SqlMetadataService] Pattern '\bINSERT\s+INTO\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)' found 0 matches
[SqlMetadataService] Total tables extracted: 4 - users, companies, user_roles, roles
[EngineService] Metadata extraction failed: Unable to connect to any of the specified MySQL hosts.
[EngineService] Execution failed: Không thể phân tích database schema: Unable to connect to any of the specified MySQL hosts.
[EngineService] Exception type: InvalidOperationException
[EngineService] Inner exception: Unable to connect to any of the specified MySQL hosts.

=== AI TEST RESULTS ===
Success: False
Execution Time: 0.00 seconds
Generated Records (INSERT statements): 0
Final Query Results (rows returned): 0
Error: Không thể phân tích database schema: Unable to connect to any of the specified MySQL hosts.
\ud83d\udca5 UNEXPECTED ERROR occurred:
Error: Không thể phân tích database schema: Unable to connect to any of the specified MySQL hosts.</StdOut>
        <ErrorInfo>
          <Message>Assert.Fail failed. AI-enhanced SQL test failed with unexpected error: Không thể phân tích database schema: Unable to connect to any of the specified MySQL hosts.</Message>
          <StackTrace>   at SqlTestDataGenerator.Tests.ExecuteQueryWithTestDataAsyncDemoTests.TC001_AI_ExecuteQueryWithTestDataAsync_ComplexVowisSQL_WithGeminiAI() in /workspace/SqlTestDataGenerator.Tests/ExecuteQueryWithTestDataAsyncDemoTests.cs:line 766
</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="b0488d8b-2067-4700-9532-9277b5a54154" testId="f388ddf8-0caa-9128-127b-a49ab07dbc5a" testName="ExtractTablesFromQuery_NullSQL_ShouldReturnEmptyList" computerName="cursor" duration="00:00:00.0000834" startTime="2025-07-06T10:57:02.1994982+00:00" endTime="2025-07-06T10:57:02.1996501+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="b0488d8b-2067-4700-9532-9277b5a54154">
      <Output>
        <StdOut>[SqlMetadataService] Extracting tables from query: 0 chars
[SqlMetadataService] SQL query is null or empty</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="3d3ce53b-2182-4682-8820-1c84bddfd083" testId="a2a23d28-9ccb-7b78-624f-a33453cfdb3c" testName="TC013_CommonTableExpressions_WithRecursive_ShouldHandleCTE" computerName="cursor" duration="00:00:00.0046595" startTime="2025-07-06T11:01:03.8093054+00:00" endTime="2025-07-06T11:01:03.8140623+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="3d3ce53b-2182-4682-8820-1c84bddfd083">
      <Output>
        <StdOut>[CentralizedLoggingManager] Initialized. Logs directory: /workspace/logs
[CentralizedLoggingManager] Config source: default
[EngineService] Centralized logs directory: /workspace/logs
=== TC013: CTE Test ===
Keywords: WITH, CTE, Multiple CTEs, Recursive patterns
[EngineService] Starting execution for MySQL
[EngineService] Analyzing query: 999 chars
[SqlMetadataService] Extracting tables from query: 999 chars
[SqlMetadataService] Clean SQL: 
            WITH CompanyStats AS (
                SELECT c.id, c.name, c.industry,
                       COUNT(u.id) as employee_count,
                       AVG(u.salary) as avg_salary
          ...
[SqlMetadataService] Pattern '\bFROM\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)(?:\s+(?:AS\s+)?(\w+))?' found 4 matches
[SqlMetadataService] Match: 'FROM companies c'
[SqlMetadataService] Found table: companies
[SqlMetadataService] Match: 'FROM users u'
[SqlMetadataService] Found table: users
[SqlMetadataService] Match: 'FROM users WHERE'
[SqlMetadataService] Found table: users
[SqlMetadataService] Match: 'FROM CompanyStats cs'
[SqlMetadataService] Found table: CompanyStats
[SqlMetadataService] Pattern '\b(?:INNER\s+|LEFT\s+|RIGHT\s+|FULL\s+|OUTER\s+)?JOIN\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)(?:\s+(?:AS\s+)?(\w+))?' found 2 matches
[SqlMetadataService] Match: 'LEFT JOIN users u'
[SqlMetadataService] Found table: users
[SqlMetadataService] Match: 'INNER JOIN HighPerformers hp'
[SqlMetadataService] Found table: HighPerformers
[SqlMetadataService] Pattern '\bINTO\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)' found 0 matches
[SqlMetadataService] Pattern '\bUPDATE\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)' found 0 matches
[SqlMetadataService] Pattern '\bINSERT\s+INTO\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)' found 0 matches
[SqlMetadataService] Total tables extracted: 4 - companies, users, CompanyStats, HighPerformers
[EngineService] Metadata extraction failed: Unable to connect to any of the specified MySQL hosts.
[EngineService] Execution failed: Không thể phân tích database schema: Unable to connect to any of the specified MySQL hosts.
[EngineService] Exception type: InvalidOperationException
[EngineService] Inner exception: Unable to connect to any of the specified MySQL hosts.
Result Success: False
Generated Records: 0
Expected error for CTE: Không thể phân tích database schema: Unable to connect to any of the specified MySQL hosts.</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="a4be48b4-5598-4809-bc3c-bd7bd05b7670" testId="c3d5ba8f-0448-b059-a097-c2b045cc8185" testName="GetOpenAiApiKey_WithPlaceholderKey_ShouldReturnEmpty" computerName="cursor" duration="00:00:00.0004103" startTime="2025-07-06T10:57:02.3649028+00:00" endTime="2025-07-06T10:57:02.3653862+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="a4be48b4-5598-4809-bc3c-bd7bd05b7670" />
    <UnitTestResult executionId="b05640f5-afcb-4459-85ac-694645e65bb9" testId="68ffb8d5-c832-0bdb-ccdf-f2c0712818bc" testName="Debug_StepByStep_FallbackGeneration" computerName="cursor" duration="00:00:00.0016167" startTime="2025-07-06T10:57:03.6060155+00:00" endTime="2025-07-06T10:57:03.6078148+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="b05640f5-afcb-4459-85ac-694645e65bb9">
      <Output>
        <StdOut>[DEBUG] GetApiKey() method called
[DEBUG] ConfigurationManager result: '' (length: 0)
[DEBUG] Environment variable result: '' (length: 0)
[DEBUG] Using HARDCODED API key for testing
[DEBUG] Gemini API Key configured: True
[DEBUG] API Key length: 39
[DEBUG] API Key preview: AIzaSyCsOz...
=== STEP-BY-STEP FALLBACK DEBUG ===
✅ Step 1: Created fallback AI service
✅ Step 2: Created table schema
✅ Step 3: Created VNEXT constraint
✅ Step 4: Created generation context
✅ Step 5: Generated single value: 'TestVNEXTData_1'
✅ Step 6: Validation result: True
✅ Step 7: Testing full record generation...
✅ Step 8: Generated 1 valid records
   - Generated: 'TestVNEXTData_1'
   - Contains VNEXT: True
\ud83c\udfaf DEBUG COMPLETED SUCCESSFULLY!</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="f4e3e9bb-2d04-4a10-833f-669f41d91f8d" testId="1aa96349-b7cc-39a6-ef2d-1bc94162083b" testName="ParseQuery_EmptyQuery_ReturnsEmptyRequirements" computerName="cursor" duration="00:00:00.0002018" startTime="2025-07-06T11:03:06.6428879+00:00" endTime="2025-07-06T11:03:06.6431443+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="f4e3e9bb-2d04-4a10-833f-669f41d91f8d" />
    <UnitTestResult executionId="f691ef88-2838-4a5b-83bf-ab71c317a606" testId="8297bd83-583e-3f19-5a11-4d86695f0918" testName="TestLocalMySQL_ShouldConnect" computerName="cursor" duration="00:00:00.0181936" startTime="2025-07-06T10:57:03.6247570+00:00" endTime="2025-07-06T10:57:03.6432541+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="f691ef88-2838-4a5b-83bf-ab71c317a606">
      <Output>
        <StdOut>[CentralizedLoggingManager] Initialized. Logs directory: /workspace/logs
[CentralizedLoggingManager] Config source: default
[EngineService] Centralized logs directory: /workspace/logs
=== TESTING LOCAL MYSQL CONNECTIONS ===

Testing: Server=localhost;Port=3306;Database=my_database;Uid=root;Pwd=22092012;Connect Timeout=120;Command Timeout=120;CharSet=utf8mb4;Connection Lifetime=300;
Result: ❌ FAILED

Testing: Server=localhost;Port=3306;Database=test;Uid=root;Pwd=;CharSet=utf8mb4;
Result: ❌ FAILED

Testing: Server=localhost;Port=3306;Database=test;Uid=root;Pwd=root;CharSet=utf8mb4;
Result: ❌ FAILED

Testing: Server=127.0.0.1;Port=3306;Database=test;Uid=root;Pwd=;CharSet=utf8mb4;
Result: ❌ FAILED

Testing: Server=127.0.0.1;Port=3306;Database=mysql;Uid=root;Pwd=;CharSet=utf8mb4;
Result: ❌ FAILED
❌ No local MySQL connection found</StdOut>
        <ErrorInfo>
          <Message>Assert.IsTrue failed. Should find at least one working local MySQL connection</Message>
          <StackTrace>   at SqlTestDataGenerator.Tests.DatabaseConnectionTest.TestLocalMySQL_ShouldConnect() in /workspace/SqlTestDataGenerator.Tests/DatabaseConnectionTest.cs:line 68
</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="74cb33d1-9303-4377-a6dc-42611bb7964d" testId="23cc72f6-1284-a2ea-98e9-9489eed12fa1" testName="ExecuteQueryWithTestDataAsync_SmallRecordCount_ShouldRespectMinimumRecords" computerName="cursor" duration="00:00:00.0045791" startTime="2025-07-06T11:03:06.4703445+00:00" endTime="2025-07-06T11:03:06.4750118+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="74cb33d1-9303-4377-a6dc-42611bb7964d">
      <Output>
        <StdOut>[CentralizedLoggingManager] Initialized. Logs directory: /workspace/logs
[CentralizedLoggingManager] Config source: default
[EngineService] Centralized logs directory: /workspace/logs
[EngineService] Starting execution for MySQL
[EngineService] Analyzing query: 71 chars
[SqlMetadataService] Extracting tables from query: 71 chars
[SqlMetadataService] Clean SQL: SELECT c.id, c.name, c.code FROM companies c WHERE c.name LIKE '%Test%'...
[SqlMetadataService] Pattern '\bFROM\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)(?:\s+(?:AS\s+)?(\w+))?' found 1 matches
[SqlMetadataService] Match: 'FROM companies c'
[SqlMetadataService] Found table: companies
[SqlMetadataService] Pattern '\b(?:INNER\s+|LEFT\s+|RIGHT\s+|FULL\s+|OUTER\s+)?JOIN\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)(?:\s+(?:AS\s+)?(\w+))?' found 0 matches
[SqlMetadataService] Pattern '\bINTO\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)' found 0 matches
[SqlMetadataService] Pattern '\bUPDATE\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)' found 0 matches
[SqlMetadataService] Pattern '\bINSERT\s+INTO\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)' found 0 matches
[SqlMetadataService] Total tables extracted: 1 - companies
[EngineService] Metadata extraction failed: Unable to connect to any of the specified MySQL hosts.
[EngineService] Execution failed: Không thể phân tích database schema: Unable to connect to any of the specified MySQL hosts.
[EngineService] Exception type: InvalidOperationException
[EngineService] Inner exception: Unable to connect to any of the specified MySQL hosts.</StdOut>
        <ErrorInfo>
          <Message>Assert.IsTrue failed. Execution should succeed. Error: Không thể phân tích database schema: Unable to connect to any of the specified MySQL hosts.</Message>
          <StackTrace>   at SqlTestDataGenerator.Tests.RecordCountVerificationTests.ExecuteQueryWithTestDataAsync_SmallRecordCount_ShouldRespectMinimumRecords() in /workspace/SqlTestDataGenerator.Tests/RecordCountVerificationTests.cs:line 86
</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="5988d45e-8023-4583-91ca-02e2fc15c8fb" testId="4c428cc8-3af4-6e55-220b-111a2265bce0" testName="ExecuteQueryWithTestDataAsync_RealMySQL_VowisBusinessSQL_ShouldWork" computerName="cursor" duration="00:00:00.0049881" startTime="2025-07-06T11:01:04.0005372+00:00" endTime="2025-07-06T11:01:04.0056368+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="5988d45e-8023-4583-91ca-02e2fc15c8fb">
      <Output>
        <StdOut>[CentralizedLoggingManager] Initialized. Logs directory: /workspace/logs
[CentralizedLoggingManager] Config source: default
[EngineService] Centralized logs directory: /workspace/logs
=== TEST: Vowis Business SQL với Real MySQL ===
Vietnamese business requirements test
[EngineService] Starting execution for MySQL
[EngineService] Analyzing query: 1244 chars
[SqlMetadataService] Extracting tables from query: 1244 chars
[SqlMetadataService] Clean SQL: 
            
            SELECT u.id, u.username, u.first_name, u.last_name, u.email, u.date_of_birth, u.salary,
                   c.NAME AS company_name, c.code AS company_code, 
                  ...
[SqlMetadataService] Pattern '\bFROM\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)(?:\s+(?:AS\s+)?(\w+))?' found 1 matches
[SqlMetadataService] Match: 'FROM users u'
[SqlMetadataService] Found table: users
[SqlMetadataService] Pattern '\b(?:INNER\s+|LEFT\s+|RIGHT\s+|FULL\s+|OUTER\s+)?JOIN\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)(?:\s+(?:AS\s+)?(\w+))?' found 3 matches
[SqlMetadataService] Match: 'INNER JOIN companies c'
[SqlMetadataService] Found table: companies
[SqlMetadataService] Match: 'INNER JOIN user_roles ur'
[SqlMetadataService] Found table: user_roles
[SqlMetadataService] Match: 'INNER JOIN roles r'
[SqlMetadataService] Found table: roles
[SqlMetadataService] Pattern '\bINTO\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)' found 0 matches
[SqlMetadataService] Pattern '\bUPDATE\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)' found 0 matches
[SqlMetadataService] Pattern '\bINSERT\s+INTO\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)' found 0 matches
[SqlMetadataService] Total tables extracted: 4 - users, companies, user_roles, roles
[EngineService] Metadata extraction failed: Unable to connect to any of the specified MySQL hosts.
[EngineService] Execution failed: Không thể phân tích database schema: Unable to connect to any of the specified MySQL hosts.
[EngineService] Exception type: InvalidOperationException
[EngineService] Inner exception: Unable to connect to any of the specified MySQL hosts.

Vowis Business SQL Result:
Success: False
Generated Records: 0
Execution Time: 0.00s
Error: Không thể phân tích database schema: Unable to connect to any of the specified MySQL hosts.</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="44b599c2-8f45-451b-bf3d-979af130eabf" testId="8e2e17a0-7a7d-b886-35e3-73304fb181bd" testName="ParseDateConditions_DateAddWithDay_ShouldParseCorrectly" computerName="cursor" duration="00:00:00.0055711" startTime="2025-07-06T11:03:06.4884429+00:00" endTime="2025-07-06T11:03:06.4941465+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="44b599c2-8f45-451b-bf3d-979af130eabf">
      <Output>
        <StdOut>[SqlMetadataService] Extracting tables from query: 83 chars
[SqlMetadataService] Clean SQL: SELECT * FROM user_roles ur WHERE ur.expires_at &lt;= DATE_ADD(NOW(), INTERVAL 30 DAY)...
[SqlMetadataService] Pattern '\bFROM\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)(?:\s+(?:AS\s+)?(\w+))?' found 1 matches
[SqlMetadataService] Match: 'FROM user_roles ur'
[SqlMetadataService] Found table: user_roles
[SqlMetadataService] Pattern '\b(?:INNER\s+|LEFT\s+|RIGHT\s+|FULL\s+|OUTER\s+)?JOIN\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)(?:\s+(?:AS\s+)?(\w+))?' found 0 matches
[SqlMetadataService] Pattern '\bINTO\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)' found 0 matches
[SqlMetadataService] Pattern '\bUPDATE\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)' found 0 matches
[SqlMetadataService] Pattern '\bINSERT\s+INTO\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)' found 0 matches
[SqlMetadataService] Total tables extracted: 1 - user_roles
JOIN Debug: Clean query = 'SELECT * FROM user_roles ur WHERE ur.expires_at &lt;= DATE_ADD(NOW(), INTERVAL 30 DAY)'
JOIN Debug: Pattern = '(?:INNER\s+|LEFT\s+|RIGHT\s+|FULL\s+|OUTER\s+)?JOIN\s+(\w+)\s+(\w+)\s+ON\s+([^()]+?)(?=\s+(?:INNER|LEFT|RIGHT|FULL|OUTER|WHERE|ORDER|GROUP|LIMIT|$)|$)'
JOIN Debug: Found 0 JOIN matches
✅ Parsed: ur.expires_at DATE_WITHIN 30_DAY</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="78cea21e-842b-434b-b51f-da27e80777f4" testId="3da2210e-7b6e-efa8-78ab-3f603d2cd027" testName="ExtractInClauseConstraints_WithoutTableAlias_ShouldExtractCorrectly" computerName="cursor" duration="00:00:00.0013350" startTime="2025-07-06T10:57:02.2607815+00:00" endTime="2025-07-06T10:57:02.2622141+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="78cea21e-842b-434b-b51f-da27e80777f4">
      <Output>
        <StdOut>[10:57:02 INF] Extracting comprehensive constraints from SQL query
[10:57:02 INF] Found WHERE clause: status IN ('active', 'pending', 'discontinued')
[10:57:02 INF] Found IN clause: .status IN (active, pending, discontinued) - Type: STRING_LIST
[10:57:02 INF] Starting EXISTS constraints extraction with two-phase approach
[10:57:02 INF] Completed EXISTS constraints extraction: 0 NOT EXISTS, 0 EXISTS
[10:57:02 INF] Extracted 1 total constraints: 0 WHERE, 0 JOIN, 0 LIKE, 1 IN, 0 BETWEEN, 0 NULL, 0 EXISTS</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="4f3a43ee-4682-4209-af7f-9de608ec73f3" testId="421a5565-ddc6-10fa-8d73-07739fee5ff0" testName="ParseQuery_WithJoin_ExtractsJoinRequirements" computerName="cursor" duration="00:00:00.0046505" startTime="2025-07-06T11:03:06.6096374+00:00" endTime="2025-07-06T11:03:06.6143329+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="4f3a43ee-4682-4209-af7f-9de608ec73f3">
      <Output>
        <StdOut>[11:03:06 INF] SqlQueryParserV2: Parsing SQL query with ScriptDom engine
[11:03:06 DBG] Visiting SelectStatement
[11:03:06 DBG] Found table: users with alias: u
[11:03:06 DBG] Found table: user_roles with alias: ur
[11:03:06 DBG] Found table: roles with alias: r
[11:03:06 DBG] Extracting WHERE conditions from clause
[11:03:06 DBG] Found comparison condition: u.is_active = 1
[11:03:06 DBG] Visiting QualifiedJoin: Inner
[11:03:06 DBG] Processing JOIN SearchCondition type: BooleanComparisonExpression
[11:03:06 DBG] Found comparison in JOIN: Equals
[11:03:06 DBG] Extracted JOIN condition: ur.role_id = r.id
[11:03:06 DBG] Visiting QualifiedJoin: Inner
[11:03:06 DBG] Processing JOIN SearchCondition type: BooleanComparisonExpression
[11:03:06 DBG] Found comparison in JOIN: Equals
[11:03:06 DBG] Extracted JOIN condition: u.id = ur.user_id
[11:03:06 INF] ScriptDom extracted 1 WHERE conditions and 2 JOIN requirements</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="99541d1a-9d81-483d-85b0-ca5369b57ef9" testId="2961e15a-0a3d-3b2e-3f18-6eafe65af0cf" testName="ParseQuery_MultipleConditionsWithAnd_ExtractsAllConditions" computerName="cursor" duration="00:00:00.0010341" startTime="2025-07-06T11:03:06.6262304+00:00" endTime="2025-07-06T11:03:06.6273238+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="99541d1a-9d81-483d-85b0-ca5369b57ef9">
      <Output>
        <StdOut>[11:03:06 INF] SqlQueryParserV2: Parsing SQL query with ScriptDom engine
[11:03:06 DBG] Visiting SelectStatement
[11:03:06 DBG] Found table: users with alias: users
[11:03:06 DBG] Extracting WHERE conditions from clause
[11:03:06 DBG] Found comparison condition: .age &gt; 25
[11:03:06 DBG] Found comparison condition: .department = IT
[11:03:06 DBG] Found comparison condition: .salary &gt;= 50000
[11:03:06 DBG] Found comparison condition: .is_active = 1
[11:03:06 INF] ScriptDom extracted 4 WHERE conditions and 0 JOIN requirements</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="9a0bacab-9184-4593-936d-737279a895e7" testId="1cb42ef4-060e-402a-1304-dbbc4f14f5c3" testName="GetConstraintsForTable_WithMultipleConstraintTypes_ShouldReturnCorrectConstraints" computerName="cursor" duration="00:00:00.0022352" startTime="2025-07-06T10:57:02.2962432+00:00" endTime="2025-07-06T10:57:02.2985545+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="9a0bacab-9184-4593-936d-737279a895e7">
      <Output>
        <StdOut>[10:57:02 INF] Extracting comprehensive constraints from SQL query
[10:57:02 INF] Found WHERE clause: e.department IN ('HR', 'IT') AND e.salary BETWEEN 50000 AND 100000 AND e.manager_id IS NOT NULL
[10:57:02 INF] Found IN clause: e.department IN (HR, IT) - Type: STRING_LIST
[10:57:02 INF] Found BETWEEN constraint: e.salary BETWEEN '50000' AND '100000' - Type: NUMERIC
[10:57:02 INF] Found NOT NULL constraint: e.manager_id IS NOT NULL
[10:57:02 INF] Starting EXISTS constraints extraction with two-phase approach
[10:57:02 INF] Completed EXISTS constraints extraction: 0 NOT EXISTS, 0 EXISTS
[10:57:02 INF] Extracted 3 total constraints: 0 WHERE, 0 JOIN, 0 LIKE, 1 IN, 1 BETWEEN, 1 NULL, 0 EXISTS</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="45fe73aa-b22c-4da0-a6f2-8e6a1221b5cb" testId="90be9f3f-f7e8-5087-dcab-84ab99d22feb" testName="TestDailyResetTimeCalculation" computerName="cursor" duration="00:00:00.0003504" startTime="2025-07-06T10:57:03.6220615+00:00" endTime="2025-07-06T10:57:03.6225512+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="45fe73aa-b22c-4da0-a6f2-8e6a1221b5cb">
      <Output>
        <StdOut>✅ Daily Reset Time Test Passed
\ud83d\udd5b Current Time: 2025-07-06 10:57:03 UTC
\ud83d\udd04 Reset Time: 2025-07-07 00:00:00 UTC
⏱️ Hours Until Reset: 13.05</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="c874f550-6b8c-4105-802f-a88945a09c90" testId="4d0c6d38-bd12-6bbb-d3b6-600299f706cd" testName="ExtractDateConstraints_ComplexDateAddQuery_ShouldParseAll" computerName="cursor" duration="00:00:00.0014121" startTime="2025-07-06T11:03:06.4977047+00:00" endTime="2025-07-06T11:03:06.4991595+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="c874f550-6b8c-4105-802f-a88945a09c90" />
    <UnitTestResult executionId="df281ceb-d6cf-4e6b-80dd-8e657ed03935" testId="4f82a6c9-7939-1c4e-f9ef-b71164866bfd" testName="TestJoinRegexPattern" computerName="cursor" duration="00:00:00.0007400" startTime="2025-07-06T11:03:06.5223978+00:00" endTime="2025-07-06T11:03:06.5231740+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="df281ceb-d6cf-4e6b-80dd-8e657ed03935">
      <Output>
        <StdOut>Clean SQL: 'SELECT u.name, c.name FROM users u INNER JOIN companies c ON u.company_id = c.id'
JOIN matches found: 0
JOIN condition match success: True
Alias1: 'u'
Column1: 'company_id'
Alias2: 'c'
Column2: 'id'
SQL: SELECT u.name, c.name FROM users u INNER JOIN companies c ON u.company_id = c.id
Complex pattern match: False
Simple pattern match: True
Basic pattern match: True
Table: companies
Alias: c
ON condition: u.company_id = c.id</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="61a83ddb-14c9-4018-a090-686e983bd438" testId="14d87284-5071-f880-5b2b-ddbe92bfcff3" testName="TestExtractConstraints_BooleanConstraints_ShouldExtractCorrectly" computerName="cursor" duration="00:00:00.0013518" startTime="2025-07-06T10:57:02.2247334+00:00" endTime="2025-07-06T10:57:02.2261622+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="61a83ddb-14c9-4018-a090-686e983bd438">
      <Output>
        <StdOut>✅ Boolean constraints extraction test passed</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="3307442d-792d-463c-895d-d7a4843f0a72" testId="3aedb538-9959-6d5e-04af-0c2cfee7284b" testName="GenerateBogusData_EdgeCase_SmallRecordCount_ShouldWork" computerName="cursor" duration="00:00:00.0081715" startTime="2025-07-06T10:57:03.6922886+00:00" endTime="2025-07-06T10:57:03.7005804+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="3307442d-792d-463c-895d-d7a4843f0a72">
      <Output>
        <StdOut>=== Testing 1 records ===
[DEBUG] Table companies has 2 columns:
[DEBUG] Column: id, IsIdentity: True, IsGenerated: False, DefaultValue: ''
[DEBUG] Column: name, IsIdentity: False, IsGenerated: False, DefaultValue: ''
[DEBUG-T021] Filtered columns for companies: 1 columns (from 2 total)
[DEBUG-T021] Excluded columns: id(Identity:True,Generated:False)
[DEBUG-T021] Included columns: name
[DEBUG-T021] Generated SQL for companies: INSERT INTO `companies` (`name`) VALUES ('Darius Stiedemann');
[DEBUG] Table roles has 2 columns:
[DEBUG] Column: id, IsIdentity: True, IsGenerated: False, DefaultValue: ''
[DEBUG] Column: name, IsIdentity: False, IsGenerated: False, DefaultValue: ''
[DEBUG-T021] Filtered columns for roles: 1 columns (from 2 total)
[DEBUG-T021] Excluded columns: id(Identity:True,Generated:False)
[DEBUG-T021] Included columns: name
[DEBUG-T021] Generated SQL for roles: INSERT INTO `roles` (`name`) VALUES ('Demetrius Lesch');
[DEBUG] Table users has 3 columns:
[DEBUG] Column: id, IsIdentity: True, IsGenerated: False, DefaultValue: ''
[DEBUG] Column: username, IsIdentity: False, IsGenerated: False, DefaultValue: ''
[DEBUG] Column: company_id, IsIdentity: False, IsGenerated: False, DefaultValue: ''
[DEBUG-T021] Filtered columns for users: 2 columns (from 3 total)
[DEBUG-T021] Excluded columns: id(Identity:True,Generated:False)
[DEBUG-T021] Included columns: username, company_id
[DEBUG-T021] Generated SQL for users: INSERT INTO `users` (`username`, `company_id`) VALUES ('Dayna.Johnson48', 1);
[DEBUG] Table user_roles has 4 columns:
[DEBUG] Column: user_id, IsIdentity: False, IsGenerated: False, DefaultValue: ''
[DEBUG] Column: role_id, IsIdentity: False, IsGenerated: False, DefaultValue: ''
[DEBUG] Column: assigned_by, IsIdentity: False, IsGenerated: False, DefaultValue: ''
[DEBUG] Column: is_active, IsIdentity: False, IsGenerated: False, DefaultValue: ''
[DEBUG-T021] Filtered columns for user_roles: 4 columns (from 4 total)
[DEBUG-T021] Excluded columns: 
[DEBUG-T021] Included columns: user_id, role_id, assigned_by, is_active
[DEBUG] Generated SQL for user_roles: INSERT INTO `user_roles` (`user_id`, `role_id`, `assigned_by`, `is_active`) VALUES (1, 1, 1, 25);
Combinations: 1-1

=== Testing 2 records ===
[DEBUG] Table companies has 2 columns:
[DEBUG] Column: id, IsIdentity: True, IsGenerated: False, DefaultValue: ''
[DEBUG] Column: name, IsIdentity: False, IsGenerated: False, DefaultValue: ''
[DEBUG-T021] Filtered columns for companies: 1 columns (from 2 total)
[DEBUG-T021] Excluded columns: id(Identity:True,Generated:False)
[DEBUG-T021] Included columns: name
[DEBUG-T021] Generated SQL for companies: INSERT INTO `companies` (`name`) VALUES ('Vilma Johnson');
[DEBUG-T021] Generated SQL for companies: INSERT INTO `companies` (`name`) VALUES ('Abigail Stracke');
[DEBUG] Table roles has 2 columns:
[DEBUG] Column: id, IsIdentity: True, IsGenerated: False, DefaultValue: ''
[DEBUG] Column: name, IsIdentity: False, IsGenerated: False, DefaultValue: ''
[DEBUG-T021] Filtered columns for roles: 1 columns (from 2 total)
[DEBUG-T021] Excluded columns: id(Identity:True,Generated:False)
[DEBUG-T021] Included columns: name
[DEBUG-T021] Generated SQL for roles: INSERT INTO `roles` (`name`) VALUES ('Sabina Gibson');
[DEBUG-T021] Generated SQL for roles: INSERT INTO `roles` (`name`) VALUES ('Patsy Dickinson');
[DEBUG] Table users has 3 columns:
[DEBUG] Column: id, IsIdentity: True, IsGenerated: False, DefaultValue: ''
[DEBUG] Column: username, IsIdentity: False, IsGenerated: False, DefaultValue: ''
[DEBUG] Column: company_id, IsIdentity: False, IsGenerated: False, DefaultValue: ''
[DEBUG-T021] Filtered columns for users: 2 columns (from 3 total)
[DEBUG-T021] Excluded columns: id(Identity:True,Generated:False)
[DEBUG-T021] Included columns: username, company_id
[DEBUG-T021] Generated SQL for users: INSERT INTO `users` (`username`, `company_id`) VALUES ('Javonte.Bahringer', 2);
[DEBUG-T021] Generated SQL for users: INSERT INTO `users` (`username`, `company_id`) VALUES ('Susan_Hackett', 1);
[DEBUG] Table user_roles has 4 columns:
[DEBUG] Column: user_id, IsIdentity: False, IsGenerated: False, DefaultValue: ''
[DEBUG] Column: role_id, IsIdentity: False, IsGenerated: False, DefaultValue: ''
[DEBUG] Column: assigned_by, IsIdentity: False, IsGenerated: False, DefaultValue: ''
[DEBUG] Column: is_active, IsIdentity: False, IsGenerated: False, DefaultValue: ''
[DEBUG-T021] Filtered columns for user_roles: 4 columns (from 4 total)
[DEBUG-T021] Excluded columns: 
[DEBUG-T021] Included columns: user_id, role_id, assigned_by, is_active
[DEBUG] Generated SQL for user_roles: INSERT INTO `user_roles` (`user_id`, `role_id`, `assigned_by`, `is_active`) VALUES (2, 2, 1, 48);
[DEBUG] Generated SQL for user_roles: INSERT INTO `user_roles` (`user_id`, `role_id`, `assigned_by`, `is_active`) VALUES (1, 1, 2, 99);
Combinations: 2-2, 1-1

=== Testing 3 records ===
[DEBUG] Table companies has 2 columns:
[DEBUG] Column: id, IsIdentity: True, IsGenerated: False, DefaultValue: ''
[DEBUG] Column: name, IsIdentity: False, IsGenerated: False, DefaultValue: ''
[DEBUG-T021] Filtered columns for companies: 1 columns (from 2 total)
[DEBUG-T021] Excluded columns: id(Identity:True,Generated:False)
[DEBUG-T021] Included columns: name
[DEBUG-T021] Generated SQL for companies: INSERT INTO `companies` (`name`) VALUES ('Shaina Wunsch');
[DEBUG-T021] Generated SQL for companies: INSERT INTO `companies` (`name`) VALUES ('Sibyl Huel');
[DEBUG-T021] Generated SQL for companies: INSERT INTO `companies` (`name`) VALUES ('Amelia Boyer');
[DEBUG] Table roles has 2 columns:
[DEBUG] Column: id, IsIdentity: True, IsGenerated: False, DefaultValue: ''
[DEBUG] Column: name, IsIdentity: False, IsGenerated: False, DefaultValue: ''
[DEBUG-T021] Filtered columns for roles: 1 columns (from 2 total)
[DEBUG-T021] Excluded columns: id(Identity:True,Generated:False)
[DEBUG-T021] Included columns: name
[DEBUG-T021] Generated SQL for roles: INSERT INTO `roles` (`name`) VALUES ('Amina Witting');
[DEBUG-T021] Generated SQL for roles: INSERT INTO `roles` (`name`) VALUES ('Turner Connelly');
[DEBUG-T021] Generated SQL for roles: INSERT INTO `roles` (`name`) VALUES ('Althea Franecki');
[DEBUG] Table users has 3 columns:
[DEBUG] Column: id, IsIdentity: True, IsGenerated: False, DefaultValue: ''
[DEBUG] Column: username, IsIdentity: False, IsGenerated: False, DefaultValue: ''
[DEBUG] Column: company_id, IsIdentity: False, IsGenerated: False, DefaultValue: ''
[DEBUG-T021] Filtered columns for users: 2 columns (from 3 total)
[DEBUG-T021] Excluded columns: id(Identity:True,Generated:False)
[DEBUG-T021] Included columns: username, company_id
[DEBUG-T021] Generated SQL for users: INSERT INTO `users` (`username`, `company_id`) VALUES ('Tyra31', 2);
[DEBUG-T021] Generated SQL for users: INSERT INTO `users` (`username`, `company_id`) VALUES ('Jettie_Robel24', 3);
[DEBUG-T021] Generated SQL for users: INSERT INTO `users` (`username`, `company_id`) VALUES ('Jillian53', 1);
[DEBUG] Table user_roles has 4 columns:
[DEBUG] Column: user_id, IsIdentity: False, IsGenerated: False, DefaultValue: ''
[DEBUG] Column: role_id, IsIdentity: False, IsGenerated: False, DefaultValue: ''
[DEBUG] Column: assigned_by, IsIdentity: False, IsGenerated: False, DefaultValue: ''
[DEBUG] Column: is_active, IsIdentity: False, IsGenerated: False, DefaultValue: ''
[DEBUG-T021] Filtered columns for user_roles: 4 columns (from 4 total)
[DEBUG-T021] Excluded columns: 
[DEBUG-T021] Included columns: user_id, role_id, assigned_by, is_active
[DEBUG] Generated SQL for user_roles: INSERT INTO `user_roles` (`user_id`, `role_id`, `assigned_by`, `is_active`) VALUES (2, 3, 1, 17);
[DEBUG] Generated SQL for user_roles: INSERT INTO `user_roles` (`user_id`, `role_id`, `assigned_by`, `is_active`) VALUES (3, 1, 2, 47);
[DEBUG] Generated SQL for user_roles: INSERT INTO `user_roles` (`user_id`, `role_id`, `assigned_by`, `is_active`) VALUES (1, 2, 3, 25);
Combinations: 2-3, 3-1, 1-2

=== Testing 5 records ===
[DEBUG] Table companies has 2 columns:
[DEBUG] Column: id, IsIdentity: True, IsGenerated: False, DefaultValue: ''
[DEBUG] Column: name, IsIdentity: False, IsGenerated: False, DefaultValue: ''
[DEBUG-T021] Filtered columns for companies: 1 columns (from 2 total)
[DEBUG-T021] Excluded columns: id(Identity:True,Generated:False)
[DEBUG-T021] Included columns: name
[DEBUG-T021] Generated SQL for companies: INSERT INTO `companies` (`name`) VALUES ('Meagan Tremblay');
[DEBUG-T021] Generated SQL for companies: INSERT INTO `companies` (`name`) VALUES ('Loren Treutel');
[DEBUG-T021] Generated SQL for companies: INSERT INTO `companies` (`name`) VALUES ('Rowena King');
[DEBUG-T021] Generated SQL for companies: INSERT INTO `companies` (`name`) VALUES ('Clifton Raynor');
[DEBUG-T021] Generated SQL for companies: INSERT INTO `companies` (`name`) VALUES ('Lois Brekke');
[DEBUG] Table roles has 2 columns:
[DEBUG] Column: id, IsIdentity: True, IsGenerated: False, DefaultValue: ''
[DEBUG] Column: name, IsIdentity: False, IsGenerated: False, DefaultValue: ''
[DEBUG-T021] Filtered columns for roles: 1 columns (from 2 total)
[DEBUG-T021] Excluded columns: id(Identity:True,Generated:False)
[DEBUG-T021] Included columns: name
[DEBUG-T021] Generated SQL for roles: INSERT INTO `roles` (`name`) VALUES ('Maya O''Kon');
[DEBUG-T021] Generated SQL for roles: INSERT INTO `roles` (`name`) VALUES ('Kamille Nienow');
[DEBUG-T021] Generated SQL for roles: INSERT INTO `roles` (`name`) VALUES ('Vincent Wiegand');
[DEBUG-T021] Generated SQL for roles: INSERT INTO `roles` (`name`) VALUES ('Jeanie Lindgren');
[DEBUG-T021] Generated SQL for roles: INSERT INTO `roles` (`name`) VALUES ('Ruben Gusikowski');
[DEBUG] Table users has 3 columns:
[DEBUG] Column: id, IsIdentity: True, IsGenerated: False, DefaultValue: ''
[DEBUG] Column: username, IsIdentity: False, IsGenerated: False, DefaultValue: ''
[DEBUG] Column: company_id, IsIdentity: False, IsGenerated: False, DefaultValue: ''
[DEBUG-T021] Filtered columns for users: 2 columns (from 3 total)
[DEBUG-T021] Excluded columns: id(Identity:True,Generated:False)
[DEBUG-T021] Included columns: username, company_id
[DEBUG-T021] Generated SQL for users: INSERT INTO `users` (`username`, `company_id`) VALUES ('Bessie.Bernhard', 2);
[DEBUG-T021] Generated SQL for users: INSERT INTO `users` (`username`, `company_id`) VALUES ('Geraldine38', 3);
[DEBUG-T021] Generated SQL for users: INSERT INTO `users` (`username`, `company_id`) VALUES ('Maiya.Heller71', 4);
[DEBUG-T021] Generated SQL for users: INSERT INTO `users` (`username`, `company_id`) VALUES ('Cara.Hirthe69', 5);
[DEBUG-T021] Generated SQL for users: INSERT INTO `users` (`username`, `company_id`) VALUES ('Rae_Von', 1);
[DEBUG] Table user_roles has 4 columns:
[DEBUG] Column: user_id, IsIdentity: False, IsGenerated: False, DefaultValue: ''
[DEBUG] Column: role_id, IsIdentity: False, IsGenerated: False, DefaultValue: ''
[DEBUG] Column: assigned_by, IsIdentity: False, IsGenerated: False, DefaultValue: ''
[DEBUG] Column: is_active, IsIdentity: False, IsGenerated: False, DefaultValue: ''
[DEBUG-T021] Filtered columns for user_roles: 4 columns (from 4 total)
[DEBUG-T021] Excluded columns: 
[DEBUG-T021] Included columns: user_id, role_id, assigned_by, is_active
[DEBUG] Generated SQL for user_roles: INSERT INTO `user_roles` (`user_id`, `role_id`, `assigned_by`, `is_active`) VALUES (2, 3, 5, 35);
[DEBUG] Generated SQL for user_roles: INSERT INTO `user_roles` (`user_id`, `role_id`, `assigned_by`, `is_active`) VALUES (3, 4, 1, 99);
[DEBUG] Generated SQL for user_roles: INSERT INTO `user_roles` (`user_id`, `role_id`, `assigned_by`, `is_active`) VALUES (4, 5, 2, 71);
[DEBUG] Generated SQL for user_roles: INSERT INTO `user_roles` (`user_id`, `role_id`, `assigned_by`, `is_active`) VALUES (5, 1, 3, 80);
[DEBUG] Generated SQL for user_roles: INSERT INTO `user_roles` (`user_id`, `role_id`, `assigned_by`, `is_active`) VALUES (1, 2, 4, 32);
Combinations: 2-3, 3-4, 4-5, 5-1, 1-2
✅ SUCCESS: All edge cases handled correctly</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="8caf1976-5b48-4b6b-a661-1bb4066ec1b0" testId="c14fc3b8-bc44-a128-3b0c-52c2da94b6d9" testName="ExtractExistsConstraints_WithMultipleExists_ShouldExtractCorrectly" computerName="cursor" duration="00:00:00.0012224" startTime="2025-07-06T10:57:02.2826753+00:00" endTime="2025-07-06T10:57:02.2839757+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="8caf1976-5b48-4b6b-a661-1bb4066ec1b0">
      <Output>
        <StdOut>[10:57:02 INF] Extracting comprehensive constraints from SQL query
[10:57:02 INF] Found WHERE clause: EXISTS (SELECT 1 FROM orders o WHERE o.customer_id = c.id) AND NOT EXISTS (SELECT 1 FROM complaints comp WHERE comp.customer_id = c.id)
[10:57:02 INF] Starting EXISTS constraints extraction with two-phase approach
[10:57:02 INF] Found NOT EXISTS constraint: NOT EXISTS (SELECT 1 FROM complaints comp WHERE comp.customer_id = c.id)
[10:57:02 INF] Found EXISTS constraint: EXISTS (SELECT 1 FROM orders o WHERE o.customer_id = c.id)
[10:57:02 INF] Completed EXISTS constraints extraction: 1 NOT EXISTS, 1 EXISTS
[10:57:02 INF] Extracted 2 total constraints: 0 WHERE, 0 JOIN, 0 LIKE, 0 IN, 0 BETWEEN, 0 NULL, 2 EXISTS</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="516a48bd-fa6a-4735-8053-75307369c926" testId="2fa55c7d-005e-6918-5d22-2aa304fbd3ea" testName="ParseQuery_InCondition_ExtractsValues" computerName="cursor" duration="00:00:00.0008454" startTime="2025-07-06T11:03:06.6378493+00:00" endTime="2025-07-06T11:03:06.6387419+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="516a48bd-fa6a-4735-8053-75307369c926">
      <Output>
        <StdOut>[SqlMetadataService] Extracting tables from query: 77 chars
[SqlMetadataService] Clean SQL: SELECT * FROM orders o WHERE o.status IN ('pending', 'processing', 'shipped')...
[SqlMetadataService] Pattern '\bFROM\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)(?:\s+(?:AS\s+)?(\w+))?' found 1 matches
[SqlMetadataService] Match: 'FROM orders o'
[SqlMetadataService] Found table: orders
[SqlMetadataService] Pattern '\b(?:INNER\s+|LEFT\s+|RIGHT\s+|FULL\s+|OUTER\s+)?JOIN\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)(?:\s+(?:AS\s+)?(\w+))?' found 0 matches
[SqlMetadataService] Pattern '\bINTO\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)' found 0 matches
[SqlMetadataService] Pattern '\bUPDATE\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)' found 0 matches
[SqlMetadataService] Pattern '\bINSERT\s+INTO\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)' found 0 matches
[SqlMetadataService] Total tables extracted: 1 - orders</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="63e5be95-1b31-4cb9-ba63-a6cb6079beac" testId="13133e83-ddb6-06e7-5855-8b90ef2b579a" testName="ConvertToMySQLSyntax_CaseStatementWithDatetime_ShouldConvert" computerName="cursor" duration="00:00:00.0001622" startTime="2025-07-06T11:01:03.9506190+00:00" endTime="2025-07-06T11:01:03.9508439+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="63e5be95-1b31-4cb9-ba63-a6cb6079beac">
      <Output>
        <StdOut>✅ CASE statement converted successfully
Result:

            SELECT CASE
                WHEN u.is_active = 0 THEN 'Đã nghỉ việc'
                WHEN ur.expires_at IS NOT NULL AND ur.expires_at &lt;= DATE_ADD(NOW(), INTERVAL 30 DAY) THEN 'Sắp hết hạn vai trò'
                ELSE 'Đang làm việc'
            END AS work_status</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="08ddf405-5fd1-453e-b3d5-6762f72690b4" testId="423c4f37-64a8-ef35-39db-e60b85768eb5" testName="ExtractInClauseConstraints_WithSubquery_ShouldExtractCorrectly" computerName="cursor" duration="00:00:00.0009948" startTime="2025-07-06T10:57:02.2589969+00:00" endTime="2025-07-06T10:57:02.2600687+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="08ddf405-5fd1-453e-b3d5-6762f72690b4">
      <Output>
        <StdOut>[10:57:02 INF] Extracting comprehensive constraints from SQL query
[10:57:02 INF] Found WHERE clause: o.customer_id IN ( SELECT customer_id FROM customers WHERE region = 'North' )
[10:57:02 INF] Found WHERE equality without alias: region = 'North'
[10:57:02 INF] Found IN subquery: o.customer_id IN (SELECT customer_id FROM customers WHERE region = 'North')
[10:57:02 INF] Starting EXISTS constraints extraction with two-phase approach
[10:57:02 INF] Completed EXISTS constraints extraction: 0 NOT EXISTS, 0 EXISTS
[10:57:02 INF] Extracted 2 total constraints: 1 WHERE, 0 JOIN, 0 LIKE, 1 IN, 0 BETWEEN, 0 NULL, 0 EXISTS</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="2012193f-5435-46be-b374-80c63f0c36a4" testId="2acdce03-4502-c064-9941-04cc0d8bb0ed" testName="TC014_CaseStatements_WithNestedConditions_ShouldGenerateBusinessLogic" computerName="cursor" duration="00:00:00.0049877" startTime="2025-07-06T11:01:03.8142959+00:00" endTime="2025-07-06T11:01:03.8194046+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="2012193f-5435-46be-b374-80c63f0c36a4">
      <Output>
        <StdOut>[CentralizedLoggingManager] Initialized. Logs directory: /workspace/logs
[CentralizedLoggingManager] Config source: default
[EngineService] Centralized logs directory: /workspace/logs
=== TC014: CASE Statements Test ===
Keywords: CASE WHEN THEN ELSE, DATEDIFF, COALESCE, NULLIF, Complex Business Logic
[EngineService] Starting execution for MySQL
[EngineService] Analyzing query: 1510 chars
[SqlMetadataService] Extracting tables from query: 1510 chars
[SqlMetadataService] Clean SQL: 
            SELECT u.id, u.username, u.salary, u.hire_date,
                   c.name as company_name,
                   CASE 
                       WHEN u.salary &gt;= 80000 THEN 'Senior Level'
     ...
[SqlMetadataService] Pattern '\bFROM\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)(?:\s+(?:AS\s+)?(\w+))?' found 1 matches
[SqlMetadataService] Match: 'FROM users u'
[SqlMetadataService] Found table: users
[SqlMetadataService] Pattern '\b(?:INNER\s+|LEFT\s+|RIGHT\s+|FULL\s+|OUTER\s+)?JOIN\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)(?:\s+(?:AS\s+)?(\w+))?' found 2 matches
[SqlMetadataService] Match: 'LEFT JOIN companies c'
[SqlMetadataService] Found table: companies
[SqlMetadataService] Match: 'LEFT JOIN user_roles ur'
[SqlMetadataService] Found table: user_roles
[SqlMetadataService] Pattern '\bINTO\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)' found 0 matches
[SqlMetadataService] Pattern '\bUPDATE\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)' found 0 matches
[SqlMetadataService] Pattern '\bINSERT\s+INTO\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)' found 0 matches
[SqlMetadataService] Total tables extracted: 3 - users, companies, user_roles
[EngineService] Metadata extraction failed: Unable to connect to any of the specified MySQL hosts.
[EngineService] Execution failed: Không thể phân tích database schema: Unable to connect to any of the specified MySQL hosts.
[EngineService] Exception type: InvalidOperationException
[EngineService] Inner exception: Unable to connect to any of the specified MySQL hosts.
Result Success: False
Generated Records: 0
Expected error for CASE statements: Không thể phân tích database schema: Unable to connect to any of the specified MySQL hosts.</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="de1a4c6d-4792-449e-babf-1976f6a10246" testId="f44ee653-06d8-88fd-5d52-7ca3b54ee5e5" testName="LogMethodEntry_ShouldLogWithCorrectContext" computerName="cursor" duration="00:00:00.0019066" startTime="2025-07-06T11:01:03.9007705+00:00" endTime="2025-07-06T11:01:03.9027683+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="de1a4c6d-4792-449e-babf-1976f6a10246">
      <Output>
        <StdOut>[CentralizedLoggingManager] Initialized. Logs directory: /workspace/logs
[CentralizedLoggingManager] Config source: default
[LoggerServiceTests] Using centralized log path: /workspace/logs/test-20250706.log</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="4ccd8eaf-6722-453b-bc79-231ff114341e" testId="d35ae7fa-bd41-8e33-426d-126198b0fc12" testName="ParseQuery_ComplexVietnameseSQL_ShouldHandleAllElements" computerName="cursor" duration="00:00:00.0032146" startTime="2025-07-06T11:03:06.5032844+00:00" endTime="2025-07-06T11:03:06.5065514+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="4ccd8eaf-6722-453b-bc79-231ff114341e">
      <Output>
        <StdOut>[SqlMetadataService] Extracting tables from query: 873 chars
[SqlMetadataService] Clean SQL: SELECT u.id, u.username, u.first_name, u.last_name, u.email, u.date_of_birth, u.salary, u.department, u.hire_date, c.NAME AS company_name, c.code AS company_code, r.NAME AS role_name, r.code AS role_c...
[SqlMetadataService] Pattern '\bFROM\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)(?:\s+(?:AS\s+)?(\w+))?' found 1 matches
[SqlMetadataService] Match: 'FROM users u'
[SqlMetadataService] Found table: users
[SqlMetadataService] Pattern '\b(?:INNER\s+|LEFT\s+|RIGHT\s+|FULL\s+|OUTER\s+)?JOIN\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)(?:\s+(?:AS\s+)?(\w+))?' found 3 matches
[SqlMetadataService] Match: 'INNER JOIN companies c'
[SqlMetadataService] Found table: companies
[SqlMetadataService] Match: 'INNER JOIN user_roles ur'
[SqlMetadataService] Found table: user_roles
[SqlMetadataService] Match: 'INNER JOIN roles r'
[SqlMetadataService] Found table: roles
[SqlMetadataService] Pattern '\bINTO\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)' found 0 matches
[SqlMetadataService] Pattern '\bUPDATE\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)' found 0 matches
[SqlMetadataService] Pattern '\bINSERT\s+INTO\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)' found 0 matches
[SqlMetadataService] Total tables extracted: 4 - users, companies, user_roles, roles
JOIN Debug: Clean query = 'SELECT u.id, u.username, u.first_name, u.last_name, u.email, u.date_of_birth, u.salary, u.department, u.hire_date, c.NAME AS company_name, c.code AS company_code, r.NAME AS role_name, r.code AS role_code, ur.expires_at AS role_expires, CASE WHEN u.is_active = 0 THEN 'Đã nghỉ việc' WHEN ur.expires_at IS NOT NULL AND ur.expires_at &lt;= DATE_ADD(NOW(), INTERVAL 30 DAY) THEN 'Sắp hết hạn vai trò' ELSE 'Đang làm việc' END AS work_status FROM users u INNER JOIN companies c ON u.company_id = c.id INNER JOIN user_roles ur ON u.id = ur.user_id AND ur.is_active = TRUE INNER JOIN roles r ON ur.role_id = r.id WHERE (u.first_name LIKE '%Phương%' OR u.last_name LIKE '%Phương%') AND YEAR(u.date_of_birth) = 1989 AND c.NAME LIKE '%VNEXT%' AND r.code LIKE '%DD%' AND (u.is_active = 0 OR ur.expires_at &lt;= DATE_ADD(NOW(), INTERVAL 60 DAY)) ORDER BY ur.expires_at ASC, u.created_at DESC'
JOIN Debug: Pattern = '(?:INNER\s+|LEFT\s+|RIGHT\s+|FULL\s+|OUTER\s+)?JOIN\s+(\w+)\s+(\w+)\s+ON\s+([^()]+?)(?=\s+(?:INNER|LEFT|RIGHT|FULL|OUTER|WHERE|ORDER|GROUP|LIMIT|$)|$)'
JOIN Debug: Found 3 JOIN matches
JOIN Debug: Match found - Table: 'companies', Alias: 'c', OnClause: 'u.company_id = c.id'
JOIN Debug: Condition pattern match success: True
Found JOIN: u.company_id = c.id
JOIN Debug: Match found - Table: 'user_roles', Alias: 'ur', OnClause: 'u.id = ur.user_id AND ur.is_active = TRUE'
JOIN Debug: Condition pattern match success: True
Found JOIN: u.id = ur.user_id
JOIN Debug: Match found - Table: 'roles', Alias: 'r', OnClause: 'ur.role_id = r.id'
JOIN Debug: Condition pattern match success: True
Found JOIN: ur.role_id = r.id
✅ Complex VOWIS query parsed successfully:
   - WHERE conditions: 8
   - JOIN requirements: 3
   - DATE conditions: 1
   - LIKE patterns: 4</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="8c508bc5-de7c-481e-925b-1ce8b1d98989" testId="051de0c9-b5ab-37e8-a17e-4a0a2016e964" testName="TestExtractConstraints_FunctionCalls_ShouldExtractFunctionConstraints" computerName="cursor" duration="00:00:00.0017293" startTime="2025-07-06T11:01:03.9360024+00:00" endTime="2025-07-06T11:01:03.9377991+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="8c508bc5-de7c-481e-925b-1ce8b1d98989">
      <Output>
        <StdOut>=== FUNCTION CALLS TEST RESULTS ===
Total Constraints: 0
❌ Function-based constraints: 0</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="f1c5e0cf-85a8-42dc-9bbf-ecba1809deac" testId="b921dbe5-c96f-5732-982c-eb4ed8e2a56f" testName="ParseQuery_WithJoinAdditionalConditions_ExtractsBothJoinAndWhere" computerName="cursor" duration="00:00:00.0011981" startTime="2025-07-06T11:03:06.6211315+00:00" endTime="2025-07-06T11:03:06.6223743+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="f1c5e0cf-85a8-42dc-9bbf-ecba1809deac">
      <Output>
        <StdOut>[11:03:06 INF] SqlQueryParserV2: Parsing SQL query with ScriptDom engine
[11:03:06 DBG] Visiting SelectStatement
[11:03:06 DBG] Found table: user_roles with alias: ur
[11:03:06 DBG] Found table: users with alias: u
[11:03:06 DBG] Extracting WHERE conditions from clause
[11:03:06 DBG] Found comparison condition: u.department = IT
[11:03:06 DBG] Visiting QualifiedJoin: Inner
[11:03:06 DBG] Processing JOIN SearchCondition type: BooleanBinaryExpression
[11:03:06 DBG] Found AND expression in JOIN - analyzing both sides
[11:03:06 DBG] Found comparison in JOIN: Equals
[11:03:06 DBG] Extracted JOIN condition: ur.user_id = u.id
[11:03:06 DBG] Found comparison in JOIN: Equals
[11:03:06 DBG] Extracted JOIN additional condition: ur.is_active = TRUE
[11:03:06 INF] ScriptDom extracted 2 WHERE conditions and 1 JOIN requirements</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="c8be61e6-e95c-48ab-97e0-e299a25df061" testId="ebcc226a-d4d6-e04f-6a23-b323c4d35009" testName="ExecuteQueryWithTestDataAsync_EmptySQL_ShouldHandleGracefully" computerName="cursor" duration="00:00:00.0054152" startTime="2025-07-06T10:57:02.1829673+00:00" endTime="2025-07-06T10:57:02.1885145+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="c8be61e6-e95c-48ab-97e0-e299a25df061">
      <Output>
        <StdOut>[CentralizedLoggingManager] Initialized. Logs directory: /workspace/logs
[CentralizedLoggingManager] Config source: default
[EngineService] Centralized logs directory: /workspace/logs
[EngineService] Starting execution for MySQL
[EngineService] Analyzing query: 0 chars
[SqlMetadataService] Extracting tables from query: 0 chars
[SqlMetadataService] SQL query is null or empty
[EngineService] Metadata extraction failed: Unable to connect to any of the specified MySQL hosts.
[EngineService] Execution failed: Không thể phân tích database schema: Unable to connect to any of the specified MySQL hosts.
[EngineService] Exception type: InvalidOperationException
[EngineService] Inner exception: Unable to connect to any of the specified MySQL hosts.
✅ Empty SQL error handling test completed</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="f7cf297a-2db3-4a18-9b4f-5885ba287750" testId="68f3e440-4885-c4c9-72f3-92ff5e100405" testName="TestExtractConstraints_EmptyWhere_ShouldHandleGracefully" computerName="cursor" duration="00:00:00.0008683" startTime="2025-07-06T11:01:03.9431476+00:00" endTime="2025-07-06T11:01:03.9440837+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="f7cf297a-2db3-4a18-9b4f-5885ba287750">
      <Output>
        <StdOut>=== EMPTY WHERE TEST RESULTS ===
Total Constraints: 0</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="224dabf3-19f4-493e-82d2-334ce1e76a98" testId="2d90bc88-284c-4518-b015-0b8170209597" testName="ParseQuery_EmptyQuery_ReturnsEmptyRequirements" computerName="cursor" duration="00:00:00.0001655" startTime="2025-07-06T11:03:06.6254583+00:00" endTime="2025-07-06T11:03:06.6256737+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="224dabf3-19f4-493e-82d2-334ce1e76a98">
      <Output>
        <StdOut>[11:03:06 INF] SqlQueryParserV2: Parsing SQL query with ScriptDom engine</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="b516cfef-c764-4d0a-b940-9398d78e072d" testId="87d98090-fa30-9a96-a551-3b4155dfeb29" testName="ExecuteQueryWithTestDataAsync_ComplexSQL_MySQL_ShouldGenerateAndExecute" computerName="cursor" duration="00:00:00.0393029" startTime="2025-07-06T10:57:02.1188868+00:00" endTime="2025-07-06T10:57:02.1583197+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="b516cfef-c764-4d0a-b940-9398d78e072d">
      <Output>
        <StdOut>[CentralizedLoggingManager] Initialized. Logs directory: /workspace/logs
[CentralizedLoggingManager] Config source: default
[EngineService] Centralized logs directory: /workspace/logs
[EngineService] Starting execution for MySQL
[EngineService] Analyzing query: 1230 chars
[SqlMetadataService] Extracting tables from query: 1230 chars
[SqlMetadataService] Clean SQL: 
            
            SELECT u.id, u.username, u.first_name, u.last_name, u.email, u.date_of_birth, u.salary, u.department, u.hire_date, 
                   c.NAME AS company_name, c.code AS compa...
[SqlMetadataService] Pattern '\bFROM\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)(?:\s+(?:AS\s+)?(\w+))?' found 1 matches
[SqlMetadataService] Match: 'FROM users u'
[SqlMetadataService] Found table: users
[SqlMetadataService] Pattern '\b(?:INNER\s+|LEFT\s+|RIGHT\s+|FULL\s+|OUTER\s+)?JOIN\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)(?:\s+(?:AS\s+)?(\w+))?' found 3 matches
[SqlMetadataService] Match: 'INNER JOIN companies c'
[SqlMetadataService] Found table: companies
[SqlMetadataService] Match: 'INNER JOIN user_roles ur'
[SqlMetadataService] Found table: user_roles
[SqlMetadataService] Match: 'INNER JOIN roles r'
[SqlMetadataService] Found table: roles
[SqlMetadataService] Pattern '\bINTO\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)' found 0 matches
[SqlMetadataService] Pattern '\bUPDATE\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)' found 0 matches
[SqlMetadataService] Pattern '\bINSERT\s+INTO\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)' found 0 matches
[SqlMetadataService] Total tables extracted: 4 - users, companies, user_roles, roles
[EngineService] Metadata extraction failed: Unable to connect to any of the specified MySQL hosts.
[EngineService] Execution failed: Không thể phân tích database schema: Unable to connect to any of the specified MySQL hosts.
[EngineService] Exception type: InvalidOperationException
[EngineService] Inner exception: Unable to connect to any of the specified MySQL hosts.
✅ Complex SQL parsing and engine workflow validation completed</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="c4327f57-fcf4-4610-9e9b-19e3b2d67063" testId="740c4fe7-4711-43c3-3c3e-334cc4c70bd0" testName="TC009_Union_Operations_ShouldHandleMultipleSelects" computerName="cursor" duration="00:00:00.0047752" startTime="2025-07-06T11:01:03.7889097+00:00" endTime="2025-07-06T11:01:03.7937943+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="c4327f57-fcf4-4610-9e9b-19e3b2d67063">
      <Output>
        <StdOut>[CentralizedLoggingManager] Initialized. Logs directory: /workspace/logs
[CentralizedLoggingManager] Config source: default
[EngineService] Centralized logs directory: /workspace/logs
=== TC009: UNION Test ===
Keywords: UNION, UNION ALL, COUNT, AVG, GROUP BY logic
[EngineService] Starting execution for MySQL
[EngineService] Analyzing query: 454 chars
[SqlMetadataService] Extracting tables from query: 454 chars
[SqlMetadataService] Clean SQL: 
            SELECT 'Active' as status, COUNT(*) as count, AVG(salary) as avg_salary
            FROM users 
            WHERE is_active = 1
            UNION ALL
            SELECT 'Inactive' as stat...
[SqlMetadataService] Pattern '\bFROM\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)(?:\s+(?:AS\s+)?(\w+))?' found 3 matches
[SqlMetadataService] Match: 'FROM users 
            WHERE'
[SqlMetadataService] Found table: users
[SqlMetadataService] Match: 'FROM users 
            WHERE'
[SqlMetadataService] Found table: users
[SqlMetadataService] Match: 'FROM users
            ORDER'
[SqlMetadataService] Found table: users
[SqlMetadataService] Pattern '\b(?:INNER\s+|LEFT\s+|RIGHT\s+|FULL\s+|OUTER\s+)?JOIN\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)(?:\s+(?:AS\s+)?(\w+))?' found 0 matches
[SqlMetadataService] Pattern '\bINTO\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)' found 0 matches
[SqlMetadataService] Pattern '\bUPDATE\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)' found 0 matches
[SqlMetadataService] Pattern '\bINSERT\s+INTO\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)' found 0 matches
[SqlMetadataService] Total tables extracted: 1 - users
[EngineService] Metadata extraction failed: Unable to connect to any of the specified MySQL hosts.
[EngineService] Execution failed: Không thể phân tích database schema: Unable to connect to any of the specified MySQL hosts.
[EngineService] Exception type: InvalidOperationException
[EngineService] Inner exception: Unable to connect to any of the specified MySQL hosts.
Result Success: False
Generated Records: 0
Expected error for UNION query: Không thể phân tích database schema: Unable to connect to any of the specified MySQL hosts.</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="ca6346b8-aab2-4d96-bda4-f26ee40f5234" testId="1e311d18-bf3e-0cda-a43b-18e57c0d874e" testName="ParseDateConditions_ReverseDateAdd_ShouldParseCorrectly" computerName="cursor" duration="00:00:00.0006844" startTime="2025-07-06T11:03:06.4967747+00:00" endTime="2025-07-06T11:03:06.4975027+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="ca6346b8-aab2-4d96-bda4-f26ee40f5234">
      <Output>
        <StdOut>[SqlMetadataService] Extracting tables from query: 83 chars
[SqlMetadataService] Clean SQL: SELECT * FROM user_roles ur WHERE DATE_ADD(NOW(), INTERVAL 30 DAY) &gt;= ur.expires_at...
[SqlMetadataService] Pattern '\bFROM\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)(?:\s+(?:AS\s+)?(\w+))?' found 1 matches
[SqlMetadataService] Match: 'FROM user_roles ur'
[SqlMetadataService] Found table: user_roles
[SqlMetadataService] Pattern '\b(?:INNER\s+|LEFT\s+|RIGHT\s+|FULL\s+|OUTER\s+)?JOIN\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)(?:\s+(?:AS\s+)?(\w+))?' found 0 matches
[SqlMetadataService] Pattern '\bINTO\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)' found 0 matches
[SqlMetadataService] Pattern '\bUPDATE\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)' found 0 matches
[SqlMetadataService] Pattern '\bINSERT\s+INTO\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)' found 0 matches
[SqlMetadataService] Total tables extracted: 1 - user_roles
JOIN Debug: Clean query = 'SELECT * FROM user_roles ur WHERE DATE_ADD(NOW(), INTERVAL 30 DAY) &gt;= ur.expires_at'
JOIN Debug: Pattern = '(?:INNER\s+|LEFT\s+|RIGHT\s+|FULL\s+|OUTER\s+)?JOIN\s+(\w+)\s+(\w+)\s+ON\s+([^()]+?)(?=\s+(?:INNER|LEFT|RIGHT|FULL|OUTER|WHERE|ORDER|GROUP|LIMIT|$)|$)'
JOIN Debug: Found 0 JOIN matches</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="d392a566-5d50-420a-990e-c011697c5cba" testId="821e93c5-ab9f-adf8-f7bc-0ff221a7796a" testName="CreateTables_FromSqlScript_ShouldSucceed" computerName="cursor" duration="00:00:00.0025588" startTime="2025-07-06T10:57:03.6097108+00:00" endTime="2025-07-06T10:57:03.6124927+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="d392a566-5d50-420a-990e-c011697c5cba">
      <Output>
        <StdOut>❌ Error creating tables: Could not find file '/workspace/create_tables.sql'.
Stack trace:    at Interop.ThrowExceptionForIoErrno(ErrorInfo errorInfo, String path, Boolean isDirError)
   at Microsoft.Win32.SafeHandles.SafeFileHandle.Open(String path, OpenFlags flags, Int32 mode, Boolean failForSymlink, Boolean&amp; wasSymlink, Func`4 createOpenException)
   at Microsoft.Win32.SafeHandles.SafeFileHandle.Open(String fullPath, FileMode mode, FileAccess access, FileShare share, FileOptions options, Int64 preallocationSize, UnixFileMode openPermissions, Int64&amp; fileLength, UnixFileMode&amp; filePermissions, Boolean failForSymlink, Boolean&amp; wasSymlink, Func`4 createOpenException)
   at System.IO.Strategies.OSFileStreamStrategy..ctor(String path, FileMode mode, FileAccess access, FileShare share, FileOptions options, Int64 preallocationSize, Nullable`1 unixCreateMode)
   at System.IO.FileStream..ctor(String path, FileMode mode, FileAccess access, FileShare share, Int32 bufferSize, FileOptions options, Int64 preallocationSize)
   at System.IO.File.AsyncStreamReader(String path, Encoding encoding)
   at System.IO.File.InternalReadAllTextAsync(String path, Encoding encoding, CancellationToken cancellationToken)
   at SqlTestDataGenerator.Tests.CreateMySQLTablesTest.CreateTables_FromSqlScript_ShouldSucceed() in /workspace/SqlTestDataGenerator.Tests/CreateMySQLTablesTest.cs:line 22</StdOut>
        <ErrorInfo>
          <Message>Test method SqlTestDataGenerator.Tests.CreateMySQLTablesTest.CreateTables_FromSqlScript_ShouldSucceed threw exception: &#xD;
System.IO.FileNotFoundException: Could not find file '/workspace/create_tables.sql'.</Message>
          <StackTrace>    at Interop.ThrowExceptionForIoErrno(ErrorInfo errorInfo, String path, Boolean isDirError)
   at Microsoft.Win32.SafeHandles.SafeFileHandle.Open(String path, OpenFlags flags, Int32 mode, Boolean failForSymlink, Boolean&amp; wasSymlink, Func`4 createOpenException)
   at Microsoft.Win32.SafeHandles.SafeFileHandle.Open(String fullPath, FileMode mode, FileAccess access, FileShare share, FileOptions options, Int64 preallocationSize, UnixFileMode openPermissions, Int64&amp; fileLength, UnixFileMode&amp; filePermissions, Boolean failForSymlink, Boolean&amp; wasSymlink, Func`4 createOpenException)
   at System.IO.Strategies.OSFileStreamStrategy..ctor(String path, FileMode mode, FileAccess access, FileShare share, FileOptions options, Int64 preallocationSize, Nullable`1 unixCreateMode)
   at System.IO.FileStream..ctor(String path, FileMode mode, FileAccess access, FileShare share, Int32 bufferSize, FileOptions options, Int64 preallocationSize)
   at System.IO.File.AsyncStreamReader(String path, Encoding encoding)
   at System.IO.File.InternalReadAllTextAsync(String path, Encoding encoding, CancellationToken cancellationToken)
   at SqlTestDataGenerator.Tests.CreateMySQLTablesTest.CreateTables_FromSqlScript_ShouldSucceed() in /workspace/SqlTestDataGenerator.Tests/CreateMySQLTablesTest.cs:line 22
</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="81bd9eba-ae32-497b-99b6-741993812fef" testId="1c9b3d7e-c6b0-eec5-53ac-d68181425b43" testName="TC_Debug_CheckMySQLDataGeneration" computerName="cursor" duration="00:00:00.0067872" startTime="2025-07-06T11:01:03.7762056+00:00" endTime="2025-07-06T11:01:03.7831380+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="81bd9eba-ae32-497b-99b6-741993812fef">
      <Output>
        <StdOut>[CentralizedLoggingManager] Initialized. Logs directory: /workspace/logs
[CentralizedLoggingManager] Config source: default
[EngineService] Centralized logs directory: /workspace/logs
=== DEBUG TEST: MySQL Data Generation ===
[EngineService] Starting execution for MySQL
[EngineService] Analyzing query: 368 chars
[SqlMetadataService] Extracting tables from query: 368 chars
[SqlMetadataService] Clean SQL: 
            SELECT u.first_name, u.last_name, u.date_of_birth, c.name as company_name, r.code as role_code
            FROM users u
            INNER JOIN companies c ON u.company_id = c.id
         ...
[SqlMetadataService] Pattern '\bFROM\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)(?:\s+(?:AS\s+)?(\w+))?' found 1 matches
[SqlMetadataService] Match: 'FROM users u'
[SqlMetadataService] Found table: users
[SqlMetadataService] Pattern '\b(?:INNER\s+|LEFT\s+|RIGHT\s+|FULL\s+|OUTER\s+)?JOIN\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)(?:\s+(?:AS\s+)?(\w+))?' found 3 matches
[SqlMetadataService] Match: 'INNER JOIN companies c'
[SqlMetadataService] Found table: companies
[SqlMetadataService] Match: 'INNER JOIN user_roles ur'
[SqlMetadataService] Found table: user_roles
[SqlMetadataService] Match: 'INNER JOIN roles r'
[SqlMetadataService] Found table: roles
[SqlMetadataService] Pattern '\bINTO\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)' found 0 matches
[SqlMetadataService] Pattern '\bUPDATE\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)' found 0 matches
[SqlMetadataService] Pattern '\bINSERT\s+INTO\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)' found 0 matches
[SqlMetadataService] Total tables extracted: 4 - users, companies, user_roles, roles
[EngineService] Metadata extraction failed: Unable to connect to any of the specified MySQL hosts.
[EngineService] Execution failed: Không thể phân tích database schema: Unable to connect to any of the specified MySQL hosts.
[EngineService] Exception type: InvalidOperationException
[EngineService] Inner exception: Unable to connect to any of the specified MySQL hosts.

=== DEBUG RESULTS ===
Success: False
Generated Records: 0
Generated INSERTs: 0
Final Query Results: 0
Debug test info: Không thể phân tích database schema: Unable to connect to any of the specified MySQL hosts.</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="34ed5804-9f78-42fd-84fb-506509e3e640" testId="84550a56-94ea-5c8e-aade-b9aebae6e28a" testName="LoadUserSettings_WithValidFile_ShouldReturnSettings" computerName="cursor" duration="00:00:00.0100046" startTime="2025-07-06T10:57:02.3422681+00:00" endTime="2025-07-06T10:57:02.3523735+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="34ed5804-9f78-42fd-84fb-506509e3e640" />
    <UnitTestResult executionId="7ab6060f-0213-4f19-ae0e-016930acc0df" testId="7e2bc572-ab64-60fb-b05f-959acda39dc2" testName="TC_FULL_WORKFLOW_001_ComplexSQL_GenerateExportCommit" computerName="cursor" duration="00:00:00.0078194" startTime="2025-07-06T11:01:03.8821722+00:00" endTime="2025-07-06T11:01:03.8901961+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="7ab6060f-0213-4f19-ae0e-016930acc0df">
      <Output>
        <StdOut>=== FullWorkflow Integration Test Setup ===
[CentralizedLoggingManager] Initialized. Logs directory: /workspace/logs
[CentralizedLoggingManager] Config source: default
[EngineService] Centralized logs directory: /workspace/logs
✅ Created export directory: sql-exports
\ud83d\ude80 TC_FULL_WORKFLOW_001: Testing complete Generate → Export → Commit workflow
\ud83d\udcdd Testing with SQL: 1300 characters
\ud83c\udfaf Target records: 8

=== PHASE 1: Generate Test Data &amp; Export to File ===
[EngineService] Starting execution for MySQL
[EngineService] Analyzing query: 1300 chars
[SqlMetadataService] Extracting tables from query: 1300 chars
[SqlMetadataService] Clean SQL: 
            
            SELECT 
                u.id, u.username, u.first_name, u.last_name, u.email,
                u.date_of_birth, u.salary, u.department, u.hire_date,
                c.name as ...
[SqlMetadataService] Pattern '\bFROM\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)(?:\s+(?:AS\s+)?(\w+))?' found 1 matches
[SqlMetadataService] Match: 'FROM users u'
[SqlMetadataService] Found table: users
[SqlMetadataService] Pattern '\b(?:INNER\s+|LEFT\s+|RIGHT\s+|FULL\s+|OUTER\s+)?JOIN\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)(?:\s+(?:AS\s+)?(\w+))?' found 3 matches
[SqlMetadataService] Match: 'JOIN companies c'
[SqlMetadataService] Found table: companies
[SqlMetadataService] Match: 'JOIN user_roles ur'
[SqlMetadataService] Found table: user_roles
[SqlMetadataService] Match: 'JOIN roles r'
[SqlMetadataService] Found table: roles
[SqlMetadataService] Pattern '\bINTO\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)' found 0 matches
[SqlMetadataService] Pattern '\bUPDATE\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)' found 0 matches
[SqlMetadataService] Pattern '\bINSERT\s+INTO\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)' found 0 matches
[SqlMetadataService] Total tables extracted: 4 - users, companies, user_roles, roles
[EngineService] Metadata extraction failed: Unable to connect to any of the specified MySQL hosts.
[EngineService] Execution failed: Không thể phân tích database schema: Unable to connect to any of the specified MySQL hosts.
[EngineService] Exception type: InvalidOperationException
[EngineService] Inner exception: Unable to connect to any of the specified MySQL hosts.
=== FullWorkflow Integration Test Cleanup ===</StdOut>
        <ErrorInfo>
          <Message>Assert.IsTrue failed. Generation should succeed. Error: Không thể phân tích database schema: Unable to connect to any of the specified MySQL hosts.</Message>
          <StackTrace>   at SqlTestDataGenerator.Tests.FullWorkflowIntegrationTests.TC_FULL_WORKFLOW_001_ComplexSQL_GenerateExportCommit() in /workspace/SqlTestDataGenerator.Tests/FullWorkflowIntegrationTests.cs:line 103
</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="abf324ca-e315-4504-a1b5-352f6e24ef03" testId="32e944a3-567c-3548-b7a9-d08caf3da627" testName="GenerateBogusData_Performance_ShouldHandleLargeDataGeneration" computerName="cursor" duration="00:00:00.0125122" startTime="2025-07-06T10:57:02.1058018+00:00" endTime="2025-07-06T10:57:02.1184522+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="abf324ca-e315-4504-a1b5-352f6e24ef03">
      <Output>
        <StdOut>[DEBUG] Table companies has 6 columns:
[DEBUG] Column: id, IsIdentity: True, IsGenerated: False, DefaultValue: ''
[DEBUG] Column: name, IsIdentity: False, IsGenerated: False, DefaultValue: ''
[DEBUG] Column: code, IsIdentity: False, IsGenerated: False, DefaultValue: ''
[DEBUG] Column: address, IsIdentity: False, IsGenerated: False, DefaultValue: ''
[DEBUG] Column: status, IsIdentity: False, IsGenerated: False, DefaultValue: ''
[DEBUG] Column: created_at, IsIdentity: False, IsGenerated: False, DefaultValue: ''
[DEBUG-T021] Filtered columns for companies: 5 columns (from 6 total)
[DEBUG-T021] Excluded columns: id(Identity:True,Generated:False)
[DEBUG-T021] Included columns: name, code, address, status, created_at
[DEBUG-T021] Generated SQL for companies: INSERT INTO `companies` (`name`, `code`, `address`, `status`, `created_at`) VALUES ('Veda Hilpert', 'CODE_76510_001', '632 Mayra Forge', 'Pending', '2024-08-29 12:52:02');
[DEBUG-T021] Generated SQL for companies: INSERT INTO `companies` (`name`, `code`, `address`, `status`, `created_at`) VALUES ('Catalina Abernathy', 'CODE_77079_002', '86484 Robel Falls', 'Pending', '2024-11-19 18:55:48');
[DEBUG-T021] Generated SQL for companies: INSERT INTO `companies` (`name`, `code`, `address`, `status`, `created_at`) VALUES ('Hardy Hahn', 'CODE_77496_003', '3429 Estel Falls', 'Active', '2025-06-03 15:44:54');
[DEBUG-T021] Generated SQL for companies: INSERT INTO `companies` (`name`, `code`, `address`, `status`, `created_at`) VALUES ('Casey O''Conner', 'CODE_77890_004', '054 Krystel Greens', 'Inactive', '2025-04-28 19:02:05');
[DEBUG-T021] Generated SQL for companies: INSERT INTO `companies` (`name`, `code`, `address`, `status`, `created_at`) VALUES ('Martine Kerluke', 'CODE_78279_005', '8693 Clement Turnpike', 'Pending', '2024-07-18 23:41:51');
[DEBUG-T021] Generated SQL for companies: INSERT INTO `companies` (`name`, `code`, `address`, `status`, `created_at`) VALUES ('Mathew O''Conner', 'CODE_78666_006', '83948 Samson Ramp', 'Active', '2024-08-08 22:42:56');
[DEBUG-T021] Generated SQL for companies: INSERT INTO `companies` (`name`, `code`, `address`, `status`, `created_at`) VALUES ('Granville Yundt', 'CODE_79039_007', '003 Jast Terrace', 'Inactive', '2025-01-04 22:23:26');
[DEBUG-T021] Generated SQL for companies: INSERT INTO `companies` (`name`, `code`, `address`, `status`, `created_at`) VALUES ('Toni Franecki', 'CODE_79453_008', '62738 Braulio Knoll', 'Active', '2024-12-13 20:49:56');
[DEBUG-T021] Generated SQL for companies: INSERT INTO `companies` (`name`, `code`, `address`, `status`, `created_at`) VALUES ('Kobe Weimann', 'CODE_79858_009', '509 Heidenreich Green', 'Completed', '2025-05-22 04:16:27');
[DEBUG-T021] Generated SQL for companies: INSERT INTO `companies` (`name`, `code`, `address`, `status`, `created_at`) VALUES ('Jade Leannon', 'CODE_80228_010', '6934 Bernier Fields', 'Active', '2025-03-27 04:51:42');
[DEBUG-T021] Generated SQL for companies: INSERT INTO `companies` (`name`, `code`, `address`, `status`, `created_at`) VALUES ('Jovanny Moen', 'CODE_80601_011', '99184 Pascale Union', 'Inactive', '2024-10-29 01:09:54');
[DEBUG-T021] Generated SQL for companies: INSERT INTO `companies` (`name`, `code`, `address`, `status`, `created_at`) VALUES ('Tom Kuphal', 'CODE_81370_012', '1410 Saul Tunnel', 'Completed', '2024-08-15 22:59:09');
[DEBUG-T021] Generated SQL for companies: INSERT INTO `companies` (`name`, `code`, `address`, `status`, `created_at`) VALUES ('Marjory Metz', 'CODE_81866_013', '99771 Silas Ramp', 'Pending', '2024-10-22 09:35:56');
[DEBUG-T021] Generated SQL for companies: INSERT INTO `companies` (`name`, `code`, `address`, `status`, `created_at`) VALUES ('Rahul Ebert', 'CODE_82322_014', '51974 West Circles', 'Inactive', '2024-07-14 07:01:41');
[DEBUG-T021] Generated SQL for companies: INSERT INTO `companies` (`name`, `code`, `address`, `status`, `created_at`) VALUES ('Caitlyn Nolan', 'CODE_82985_015', '278 Lelah Trail', 'Active', '2024-12-04 03:26:31');
[DEBUG-T021] Generated SQL for companies: INSERT INTO `companies` (`name`, `code`, `address`, `status`, `created_at`) VALUES ('Joey Denesik', 'CODE_83669_016', '824 Jerde Summit', 'Inactive', '2025-05-10 20:42:04');
[DEBUG-T021] Generated SQL for companies: INSERT INTO `companies` (`name`, `code`, `address`, `status`, `created_at`) VALUES ('Ottis Price', 'CODE_84165_017', '7108 Arely Islands', 'Active', '2025-04-07 22:18:22');
[DEBUG-T021] Generated SQL for companies: INSERT INTO `companies` (`name`, `code`, `address`, `status`, `created_at`) VALUES ('Susana Durgan', 'CODE_84548_018', '758 Celestino Bridge', 'Active', '2024-07-13 23:24:30');
[DEBUG-T021] Generated SQL for companies: INSERT INTO `companies` (`name`, `code`, `address`, `status`, `created_at`) VALUES ('Celestine Larson', 'CODE_84906_019', '559 Prohaska Ford', 'Completed', '2025-06-03 23:23:05');
[DEBUG-T021] Generated SQL for companies: INSERT INTO `companies` (`name`, `code`, `address`, `status`, `created_at`) VALUES ('Rosanna Kihn', 'CODE_85265_020', '8527 Maryjane Point', 'Pending', '2024-12-27 08:53:37');
[DEBUG-T021] Generated SQL for companies: INSERT INTO `companies` (`name`, `code`, `address`, `status`, `created_at`) VALUES ('Kaitlin Hyatt', 'CODE_85685_021', '450 Kunde Grove', 'Active', '2025-04-14 10:23:01');
[DEBUG-T021] Generated SQL for companies: INSERT INTO `companies` (`name`, `code`, `address`, `status`, `created_at`) VALUES ('Harry Torp', 'CODE_86049_022', '84898 Catherine Springs', 'Active', '2024-10-24 15:16:07');
[DEBUG-T021] Generated SQL for companies: INSERT INTO `companies` (`name`, `code`, `address`, `status`, `created_at`) VALUES ('Rasheed Douglas', 'CODE_86412_023', '9572 Lucious Islands', 'Pending', '2025-02-19 09:48:32');
[DEBUG-T021] Generated SQL for companies: INSERT INTO `companies` (`name`, `code`, `address`, `status`, `created_at`) VALUES ('Mae Toy', 'CODE_86777_024', '0169 Smitham Shores', 'Pending', '2024-10-30 12:57:03');
[DEBUG-T021] Generated SQL for companies: INSERT INTO `companies` (`name`, `code`, `address`, `status`, `created_at`) VALUES ('Jaquan Cartwright', 'CODE_87131_025', '77181 Conroy Forges', 'Active', '2024-12-22 12:31:19');
[DEBUG-T021] Generated SQL for companies: INSERT INTO `companies` (`name`, `code`, `address`, `status`, `created_at`) VALUES ('Omer Cartwright', 'CODE_87631_026', '5764 Cleo Square', 'Pending', '2024-09-18 22:21:12');
[DEBUG-T021] Generated SQL for companies: INSERT INTO `companies` (`name`, `code`, `address`, `status`, `created_at`) VALUES ('Javier Legros', 'CODE_88032_027', '5992 Denesik Greens', 'Active', '2024-10-30 21:00:23');
[DEBUG-T021] Generated SQL for companies: INSERT INTO `companies` (`name`, `code`, `address`, `status`, `created_at`) VALUES ('Hulda Ferry', 'CODE_88402_028', '00274 Gutkowski Camp', 'Inactive', '2024-07-26 15:15:53');
[DEBUG-T021] Generated SQL for companies: INSERT INTO `companies` (`name`, `code`, `address`, `status`, `created_at`) VALUES ('Monserrate Hintz', 'CODE_88754_029', '07518 Haylie Knoll', 'Inactive', '2024-08-19 12:14:20');
[DEBUG-T021] Generated SQL for companies: INSERT INTO `companies` (`name`, `code`, `address`, `status`, `created_at`) VALUES ('Lesly Herman', 'CODE_89116_030', '16836 Parker Stravenue', 'Pending', '2025-07-06 03:04:13');
[DEBUG-T021] Generated SQL for companies: INSERT INTO `companies` (`name`, `code`, `address`, `status`, `created_at`) VALUES ('Jarrett Beier', 'CODE_89479_031', '0778 Moen Wall', 'Inactive', '2025-05-29 02:43:44');
[DEBUG-T021] Generated SQL for companies: INSERT INTO `companies` (`name`, `code`, `address`, `status`, `created_at`) VALUES ('Marjolaine Mraz', 'CODE_89814_032', '564 Fritsch Court', 'Inactive', '2024-10-17 17:17:30');
[DEBUG-T021] Generated SQL for companies: INSERT INTO `companies` (`name`, `code`, `address`, `status`, `created_at`) VALUES ('Dayton Schmeler', 'CODE_90165_033', '40940 Wayne Burgs', 'Active', '2025-01-20 23:29:21');
[DEBUG-T021] Generated SQL for companies: INSERT INTO `companies` (`name`, `code`, `address`, `status`, `created_at`) VALUES ('Gene Abbott', 'CODE_90574_034', '1976 Kemmer Hill', 'Inactive', '2025-05-27 13:18:24');
[DEBUG-T021] Generated SQL for companies: INSERT INTO `companies` (`name`, `code`, `address`, `status`, `created_at`) VALUES ('Mikel McClure', 'CODE_91344_035', '1342 Mohr Stravenue', 'Inactive', '2025-05-07 16:33:15');
[DEBUG-T021] Generated SQL for companies: INSERT INTO `companies` (`name`, `code`, `address`, `status`, `created_at`) VALUES ('Suzanne Abernathy', 'CODE_92018_036', '1845 Margarett Walks', 'Inactive', '2025-04-06 20:31:46');
[DEBUG-T021] Generated SQL for companies: INSERT INTO `companies` (`name`, `code`, `address`, `status`, `created_at`) VALUES ('Quinten Waelchi', 'CODE_92582_037', '35769 Langosh Field', 'Completed', '2024-12-26 04:33:26');
[DEBUG-T021] Generated SQL for companies: INSERT INTO `companies` (`name`, `code`, `address`, `status`, `created_at`) VALUES ('Juston Turner', 'CODE_92952_038', '772 Nikolaus Dam', 'Active', '2025-02-07 06:49:15');
[DEBUG-T021] Generated SQL for companies: INSERT INTO `companies` (`name`, `code`, `address`, `status`, `created_at`) VALUES ('Rigoberto Crona', 'CODE_93328_039', '520 Bernier Landing', 'Inactive', '2024-10-07 00:00:31');
[DEBUG-T021] Generated SQL for companies: INSERT INTO `companies` (`name`, `code`, `address`, `status`, `created_at`) VALUES ('Harley Hand', 'CODE_93686_040', '28298 Rodriguez Corner', 'Inactive', '2024-10-17 10:43:53');
[DEBUG-T021] Generated SQL for companies: INSERT INTO `companies` (`name`, `code`, `address`, `status`, `created_at`) VALUES ('Monte Muller', 'CODE_94031_041', '31179 Hamill Rest', 'Inactive', '2025-01-09 17:56:24');
[DEBUG-T021] Generated SQL for companies: INSERT INTO `companies` (`name`, `code`, `address`, `status`, `created_at`) VALUES ('Rodger McLaughlin', 'CODE_94383_042', '2434 Conner Tunnel', 'Active', '2025-07-04 12:25:45');
[DEBUG-T021] Generated SQL for companies: INSERT INTO `companies` (`name`, `code`, `address`, `status`, `created_at`) VALUES ('Rene Ziemann', 'CODE_94751_043', '99195 Barton Shoal', 'Inactive', '2025-01-08 18:34:10');
[DEBUG-T021] Generated SQL for companies: INSERT INTO `companies` (`name`, `code`, `address`, `status`, `created_at`) VALUES ('Albertha Jones', 'CODE_95091_044', '79535 Breitenberg Ville', 'Completed', '2025-06-19 00:28:34');
[DEBUG-T021] Generated SQL for companies: INSERT INTO `companies` (`name`, `code`, `address`, `status`, `created_at`) VALUES ('Alfred West', 'CODE_95437_045', '9220 Maggio Villages', 'Completed', '2025-02-14 09:11:49');
[DEBUG-T021] Generated SQL for companies: INSERT INTO `companies` (`name`, `code`, `address`, `status`, `created_at`) VALUES ('Freida Legros', 'CODE_95781_046', '215 Upton Ports', 'Pending', '2024-07-06 20:45:30');
[DEBUG-T021] Generated SQL for companies: INSERT INTO `companies` (`name`, `code`, `address`, `status`, `created_at`) VALUES ('Johan Farrell', 'CODE_96175_047', '6179 Ferry Highway', 'Active', '2024-11-28 00:12:50');
[DEBUG-T021] Generated SQL for companies: INSERT INTO `companies` (`name`, `code`, `address`, `status`, `created_at`) VALUES ('Gay Schaefer', 'CODE_96554_048', '9460 Mayer Cliffs', 'Inactive', '2024-12-28 23:09:17');
[DEBUG-T021] Generated SQL for companies: INSERT INTO `companies` (`name`, `code`, `address`, `status`, `created_at`) VALUES ('Brendon Kling', 'CODE_96922_049', '19866 Leffler Village', 'Inactive', '2024-12-03 15:34:49');
[DEBUG-T021] Generated SQL for companies: INSERT INTO `companies` (`name`, `code`, `address`, `status`, `created_at`) VALUES ('Virgil Ernser', 'CODE_97408_050', '0869 McGlynn Brooks', 'Active', '2024-10-24 10:11:32');
[DEBUG] Table roles has 6 columns:
[DEBUG] Column: id, IsIdentity: True, IsGenerated: False, DefaultValue: ''
[DEBUG] Column: name, IsIdentity: False, IsGenerated: False, DefaultValue: ''
[DEBUG] Column: code, IsIdentity: False, IsGenerated: False, DefaultValue: ''
[DEBUG] Column: level, IsIdentity: False, IsGenerated: False, DefaultValue: ''
[DEBUG] Column: description, IsIdentity: False, IsGenerated: False, DefaultValue: ''
[DEBUG] Column: created_at, IsIdentity: False, IsGenerated: False, DefaultValue: ''
[DEBUG-T021] Filtered columns for roles: 5 columns (from 6 total)
[DEBUG-T021] Excluded columns: id(Identity:True,Generated:False)
[DEBUG-T021] Included columns: name, code, level, description, created_at
[DEBUG-T021] Generated SQL for roles: INSERT INTO `roles` (`name`, `code`, `level`, `description`, `created_at`) VALUES ('Gordon Considine', 'CODE_98122_001', 2, 'Placeat ut ea.', '2025-04-04 01:28:22');
[DEBUG-T021] Generated SQL for roles: INSERT INTO `roles` (`name`, `code`, `level`, `description`, `created_at`) VALUES ('Mathias Gerhold', 'CODE_98439_002', 1, 'Nulla hic dolor.', '2024-07-11 14:15:33');
[DEBUG-T021] Generated SQL for roles: INSERT INTO `roles` (`name`, `code`, `level`, `description`, `created_at`) VALUES ('Demarcus Stamm', 'CODE_98689_003', 8, 'Vero sapiente sint.', '2025-04-23 08:16:14');
[DEBUG-T021] Generated SQL for roles: INSERT INTO `roles` (`name`, `code`, `level`, `description`, `created_at`) VALUES ('Kaitlyn Mitchell', 'CODE_98931_004', 1, 'Qui deleniti rerum.', '2025-06-17 23:59:10');
[DEBUG-T021] Generated SQL for roles: INSERT INTO `roles` (`name`, `code`, `level`, `description`, `created_at`) VALUES ('Jenifer Ryan', 'CODE_99161_005', 3, 'Tempora iure sapiente.', '2025-04-28 23:01:05');
[DEBUG-T021] Generated SQL for roles: INSERT INTO `roles` (`name`, `code`, `level`, `description`, `created_at`) VALUES ('Leif Cummings', 'CODE_99407_006', 3, 'Delectus dolorum iure.', '2024-12-20 13:27:02');
[DEBUG-T021] Generated SQL for roles: INSERT INTO `roles` (`name`, `code`, `level`, `description`, `created_at`) VALUES ('Natalie Zieme', 'CODE_99627_007', 6, 'Adipisci molestiae ipsam.', '2024-07-09 11:02:56');
[DEBUG-T021] Generated SQL for roles: INSERT INTO `roles` (`name`, `code`, `level`, `description`, `created_at`) VALUES ('Sven Pollich', 'CODE_99874_008', 3, 'Id similique hic.', '2025-06-10 03:36:26');
[DEBUG-T021] Generated SQL for roles: INSERT INTO `roles` (`name`, `code`, `level`, `description`, `created_at`) VALUES ('Sage Hand', 'CODE_106_009', 2, 'Et nemo molestias.', '2024-09-20 19:44:36');
[DEBUG-T021] Generated SQL for roles: INSERT INTO `roles` (`name`, `code`, `level`, `description`, `created_at`) VALUES ('Amalia Ruecker', 'CODE_397_010', 3, 'Quia deleniti quos.', '2025-03-05 06:58:50');
[DEBUG-T021] Generated SQL for roles: INSERT INTO `roles` (`name`, `code`, `level`, `description`, `created_at`) VALUES ('Kaycee Rolfson', 'CODE_665_011', 10, 'Adipisci beatae quis.', '2025-05-14 19:41:38');
[DEBUG-T021] Generated SQL for roles: INSERT INTO `roles` (`name`, `code`, `level`, `description`, `created_at`) VALUES ('Aubrey Bernhard', 'CODE_1208_012', 5, 'Tempore qui explicabo.', '2024-11-05 14:51:37');
[DEBUG-T021] Generated SQL for roles: INSERT INTO `roles` (`name`, `code`, `level`, `description`, `created_at`) VALUES ('Novella Johnson', 'CODE_1805_013', 6, 'Aut commodi possimus.', '2025-06-16 13:21:58');
[DEBUG-T021] Generated SQL for roles: INSERT INTO `roles` (`name`, `code`, `level`, `description`, `created_at`) VALUES ('Jacinto King', 'CODE_2290_014', 1, 'Sequi dolor atque.', '2025-02-05 01:47:36');
[DEBUG-T021] Generated SQL for roles: INSERT INTO `roles` (`name`, `code`, `level`, `description`, `created_at`) VALUES ('Davion Schimmel', 'CODE_2735_015', 3, 'Ipsum quasi necessitatibus.', '2025-05-24 02:49:44');
[DEBUG-T021] Generated SQL for roles: INSERT INTO `roles` (`name`, `code`, `level`, `description`, `created_at`) VALUES ('Zachary Muller', 'CODE_3023_016', 7, 'Voluptatem nam ut.', '2025-05-15 09:37:24');
[DEBUG-T021] Generated SQL for roles: INSERT INTO `roles` (`name`, `code`, `level`, `description`, `created_at`) VALUES ('Derrick Powlowski', 'CODE_3270_017', 8, 'Consectetur vitae sapiente.', '2024-10-26 21:09:50');
[DEBUG-T021] Generated SQL for roles: INSERT INTO `roles` (`name`, `code`, `level`, `description`, `created_at`) VALUES ('Kara Kerluke', 'CODE_3502_018', 10, 'Eaque quod corporis.', '2025-06-24 17:23:43');
[DEBUG-T021] Generated SQL for roles: INSERT INTO `roles` (`name`, `code`, `level`, `description`, `created_at`) VALUES ('Shirley Lehner', 'CODE_3728_019', 6, 'Quo doloribus assumenda.', '2024-11-25 18:27:20');
[DEBUG-T021] Generated SQL for roles: INSERT INTO `roles` (`name`, `code`, `level`, `description`, `created_at`) VALUES ('Jadon Hauck', 'CODE_3971_020', 3, 'Aut totam quaerat.', '2024-09-01 07:19:28');
[DEBUG-T021] Generated SQL for roles: INSERT INTO `roles` (`name`, `code`, `level`, `description`, `created_at`) VALUES ('Vinnie Wolf', 'CODE_4219_021', 2, 'Consequuntur similique qui.', '2025-06-01 09:03:20');
[DEBUG-T021] Generated SQL for roles: INSERT INTO `roles` (`name`, `code`, `level`, `description`, `created_at`) VALUES ('Dasia Dicki', 'CODE_4456_022', 7, 'Asperiores itaque aut.', '2024-11-13 16:05:58');
[DEBUG-T021] Generated SQL for roles: INSERT INTO `roles` (`name`, `code`, `level`, `description`, `created_at`) VALUES ('Colt Rutherford', 'CODE_4701_023', 4, 'Autem accusantium ut.', '2024-12-08 03:30:10');
[DEBUG-T021] Generated SQL for roles: INSERT INTO `roles` (`name`, `code`, `level`, `description`, `created_at`) VALUES ('Weldon Krajcik', 'CODE_4979_024', 8, 'Dolores sunt labore.', '2024-10-15 03:25:23');
[DEBUG-T021] Generated SQL for roles: INSERT INTO `roles` (`name`, `code`, `level`, `description`, `created_at`) VALUES ('Crystal Grady', 'CODE_5247_025', 2, 'Voluptatum facilis est.', '2025-05-02 01:08:16');
[DEBUG-T021] Generated SQL for roles: INSERT INTO `roles` (`name`, `code`, `level`, `description`, `created_at`) VALUES ('Amina Lynch', 'CODE_5477_026', 8, 'Minus aperiam nihil.', '2025-03-15 16:49:43');
[DEBUG-T021] Generated SQL for roles: INSERT INTO `roles` (`name`, `code`, `level`, `description`, `created_at`) VALUES ('Vicky Williamson', 'CODE_5719_027', 2, 'Enim qui qui.', '2025-01-25 21:25:59');
[DEBUG-T021] Generated SQL for roles: INSERT INTO `roles` (`name`, `code`, `level`, `description`, `created_at`) VALUES ('Michel Hyatt', 'CODE_5943_028', 10, 'A quia quibusdam.', '2024-09-15 23:37:18');
[DEBUG-T021] Generated SQL for roles: INSERT INTO `roles` (`name`, `code`, `level`, `description`, `created_at`) VALUES ('Gene Adams', 'CODE_6186_029', 3, 'Id corporis fuga.', '2025-01-02 13:30:36');
[DEBUG-T021] Generated SQL for roles: INSERT INTO `roles` (`name`, `code`, `level`, `description`, `created_at`) VALUES ('Gideon Marquardt', 'CODE_6410_030', 9, 'Quo quidem est.', '2025-06-30 19:03:54');
[DEBUG-T021] Generated SQL for roles: INSERT INTO `roles` (`name`, `code`, `level`, `description`, `created_at`) VALUES ('Jude Padberg', 'CODE_6640_031', 9, 'Repudiandae dolorum occaecati.', '2024-12-27 20:04:54');
[DEBUG-T021] Generated SQL for roles: INSERT INTO `roles` (`name`, `code`, `level`, `description`, `created_at`) VALUES ('Armani Rath', 'CODE_6862_032', 8, 'Rerum et ratione.', '2025-06-05 06:45:14');
[DEBUG-T021] Generated SQL for roles: INSERT INTO `roles` (`name`, `code`, `level`, `description`, `created_at`) VALUES ('Shana Abbott', 'CODE_7093_033', 3, 'Consequatur iste quisquam.', '2024-09-18 02:17:58');
[DEBUG-T021] Generated SQL for roles: INSERT INTO `roles` (`name`, `code`, `level`, `description`, `created_at`) VALUES ('Giovanna Schiller', 'CODE_7322_034', 10, 'Pariatur doloribus molestiae.', '2024-08-17 01:56:30');
[DEBUG-T021] Generated SQL for roles: INSERT INTO `roles` (`name`, `code`, `level`, `description`, `created_at`) VALUES ('Raleigh Gorczany', 'CODE_7548_035', 3, 'Ad at ad.', '2024-08-10 06:11:31');
[DEBUG-T021] Generated SQL for roles: INSERT INTO `roles` (`name`, `code`, `level`, `description`, `created_at`) VALUES ('Jarvis Schmeler', 'CODE_7776_036', 3, 'Quo explicabo saepe.', '2025-05-05 22:20:09');
[DEBUG-T021] Generated SQL for roles: INSERT INTO `roles` (`name`, `code`, `level`, `description`, `created_at`) VALUES ('Marcelina Langosh', 'CODE_8038_037', 10, 'Corrupti sed libero.', '2025-04-06 06:10:05');
[DEBUG-T021] Generated SQL for roles: INSERT INTO `roles` (`name`, `code`, `level`, `description`, `created_at`) VALUES ('Jermain Greenholt', 'CODE_8298_038', 1, 'In omnis est.', '2024-09-25 21:09:14');
[DEBUG-T021] Generated SQL for roles: INSERT INTO `roles` (`name`, `code`, `level`, `description`, `created_at`) VALUES ('Keira Marquardt', 'CODE_8528_039', 2, 'Atque repudiandae occaecati.', '2024-10-30 09:30:23');
[DEBUG-T021] Generated SQL for roles: INSERT INTO `roles` (`name`, `code`, `level`, `description`, `created_at`) VALUES ('Candace Gleichner', 'CODE_8779_040', 3, 'Nihil autem cum.', '2024-11-22 02:28:33');
[DEBUG-T021] Generated SQL for roles: INSERT INTO `roles` (`name`, `code`, `level`, `description`, `created_at`) VALUES ('Lewis Heller', 'CODE_9010_041', 5, 'Dolores est sequi.', '2025-04-23 09:36:12');
[DEBUG-T021] Generated SQL for roles: INSERT INTO `roles` (`name`, `code`, `level`, `description`, `created_at`) VALUES ('Arianna Grimes', 'CODE_9233_042', 5, 'Vel labore illum.', '2024-09-11 01:08:44');
[DEBUG-T021] Generated SQL for roles: INSERT INTO `roles` (`name`, `code`, `level`, `description`, `created_at`) VALUES ('Richmond Schmeler', 'CODE_9461_043', 10, 'Qui voluptas dolorem.', '2024-11-05 02:32:57');
[DEBUG-T021] Generated SQL for roles: INSERT INTO `roles` (`name`, `code`, `level`, `description`, `created_at`) VALUES ('Kenneth Farrell', 'CODE_9705_044', 2, 'Est repellat deleniti.', '2025-02-25 15:47:30');
[DEBUG-T021] Generated SQL for roles: INSERT INTO `roles` (`name`, `code`, `level`, `description`, `created_at`) VALUES ('Wilber Senger', 'CODE_9935_045', 7, 'Voluptatem ullam dolores.', '2024-11-05 21:43:44');
[DEBUG-T021] Generated SQL for roles: INSERT INTO `roles` (`name`, `code`, `level`, `description`, `created_at`) VALUES ('Mireya Bartoletti', 'CODE_10162_046', 8, 'Corrupti nulla provident.', '2024-07-31 08:04:37');
[DEBUG-T021] Generated SQL for roles: INSERT INTO `roles` (`name`, `code`, `level`, `description`, `created_at`) VALUES ('Sienna Lynch', 'CODE_10385_047', 7, 'Autem odio nulla.', '2024-10-01 12:13:43');
[DEBUG-T021] Generated SQL for roles: INSERT INTO `roles` (`name`, `code`, `level`, `description`, `created_at`) VALUES ('Aubree Mueller', 'CODE_10616_048', 2, 'Delectus est repellat.', '2024-08-05 12:36:29');
[DEBUG-T021] Generated SQL for roles: INSERT INTO `roles` (`name`, `code`, `level`, `description`, `created_at`) VALUES ('Hettie Hagenes', 'CODE_10835_049', 1, 'Voluptas adipisci facere.', '2024-09-28 06:25:21');
[DEBUG-T021] Generated SQL for roles: INSERT INTO `roles` (`name`, `code`, `level`, `description`, `created_at`) VALUES ('Carrie Wisoky', 'CODE_11699_050', 1, 'Quis deserunt aut.', '2024-07-29 11:36:58');
[DEBUG] Table users has 12 columns:
[DEBUG] Column: id, IsIdentity: True, IsGenerated: False, DefaultValue: ''
[DEBUG] Column: username, IsIdentity: False, IsGenerated: False, DefaultValue: ''
[DEBUG] Column: first_name, IsIdentity: False, IsGenerated: False, DefaultValue: ''
[DEBUG] Column: last_name, IsIdentity: False, IsGenerated: False, DefaultValue: ''
[DEBUG] Column: email, IsIdentity: False, IsGenerated: False, DefaultValue: ''
[DEBUG] Column: date_of_birth, IsIdentity: False, IsGenerated: False, DefaultValue: ''
[DEBUG] Column: salary, IsIdentity: False, IsGenerated: False, DefaultValue: ''
[DEBUG] Column: department, IsIdentity: False, IsGenerated: False, DefaultValue: ''
[DEBUG] Column: hire_date, IsIdentity: False, IsGenerated: False, DefaultValue: ''
[DEBUG] Column: company_id, IsIdentity: False, IsGenerated: False, DefaultValue: ''
[DEBUG] Column: is_active, IsIdentity: False, IsGenerated: False, DefaultValue: ''
[DEBUG] Column: created_at, IsIdentity: False, IsGenerated: False, DefaultValue: ''
[DEBUG-T021] Filtered columns for users: 11 columns (from 12 total)
[DEBUG-T021] Excluded columns: id(Identity:True,Generated:False)
[DEBUG-T021] Included columns: username, first_name, last_name, email, date_of_birth, salary, department, hire_date, company_id, is_active, created_at
[DEBUG] Boolean column detected: is_active (bit) -&gt; generating boolean
[DEBUG-T021] Generated SQL for users: INSERT INTO `users` (`username`, `first_name`, `last_name`, `email`, `date_of_birth`, `salary`, `department`, `hire_date`, `company_id`, `is_active`, `created_at`) VALUES ('Kayleigh_Deckow40', 'Zola', 'Conn', 'Jamar.Kris42@gmail.com', '1974-04-10', 78709.38, 'Shoes &amp; Books', '2019-05-09 23:36:08', 2, 1, '2025-05-10 01:22:45');
[DEBUG] Boolean column detected: is_active (bit) -&gt; generating boolean
[DEBUG-T021] Generated SQL for users: INSERT INTO `users` (`username`, `first_name`, `last_name`, `email`, `date_of_birth`, `salary`, `department`, `hire_date`, `company_id`, `is_active`, `created_at`) VALUES ('Josh.Legros', 'Roger', 'Herman', 'Salvador.Hessel@yahoo.com', '1965-01-30', 159859.17, 'Beauty', '2024-04-14 11:31:48', 3, 0, '2025-04-08 12:22:28');
[DEBUG] Boolean column detected: is_active (bit) -&gt; generating boolean
[DEBUG-T021] Generated SQL for users: INSERT INTO `users` (`username`, `first_name`, `last_name`, `email`, `date_of_birth`, `salary`, `department`, `hire_date`, `company_id`, `is_active`, `created_at`) VALUES ('Amanda_Walker', 'Alexandrea', 'Buckridge', 'Margarette_Wilkinson97@gmail.com', '2003-02-18', 45646.72, 'Grocery', '2024-06-20 01:24:56', 4, 1, '2025-03-01 21:33:42');
[DEBUG] Boolean column detected: is_active (bit) -&gt; generating boolean
[DEBUG-T021] Generated SQL for users: INSERT INTO `users` (`username`, `first_name`, `last_name`, `email`, `date_of_birth`, `salary`, `department`, `hire_date`, `company_id`, `is_active`, `created_at`) VALUES ('Monserrat.Hagenes', 'Jacquelyn', 'Stamm', 'Arianna_Botsford56@yahoo.com', '1961-10-12', 61901.01, 'Automotive &amp; Industrial', '2023-04-25 07:53:18', 5, 0, '2025-01-22 23:24:19');
[DEBUG] Boolean column detected: is_active (bit) -&gt; generating boolean
[DEBUG-T021] Generated SQL for users: INSERT INTO `users` (`username`, `first_name`, `last_name`, `email`, `date_of_birth`, `salary`, `department`, `hire_date`, `company_id`, `is_active`, `created_at`) VALUES ('Nicholas31', 'Garry', 'Wiegand', 'Nicolette31@gmail.com', '1988-06-12', 110299.14, 'Sports', '2022-03-02 04:56:30', 6, 1, '2025-05-26 14:12:59');
[DEBUG] Boolean column detected: is_active (bit) -&gt; generating boolean
[DEBUG-T021] Generated SQL for users: INSERT INTO `users` (`username`, `first_name`, `last_name`, `email`, `date_of_birth`, `salary`, `department`, `hire_date`, `company_id`, `is_active`, `created_at`) VALUES ('Zora.Keeling', 'Ladarius', 'Lynch', 'Chasity.Mohr@hotmail.com', '1970-06-10', 199019.07, 'Kids', '2020-10-11 02:07:26', 7, 0, '2024-10-21 02:59:46');
[DEBUG] Boolean column detected: is_active (bit) -&gt; generating boolean
[DEBUG-T021] Generated SQL for users: INSERT INTO `users` (`username`, `first_name`, `last_name`, `email`, `date_of_birth`, `salary`, `department`, `hire_date`, `company_id`, `is_active`, `created_at`) VALUES ('Modesto36', 'Rita', 'Rohan', 'Rylee.Senger@yahoo.com', '1960-10-28', 51137.65, 'Health', '2017-10-22 22:49:54', 8, 1, '2025-04-06 09:17:15');
[DEBUG] Boolean column detected: is_active (bit) -&gt; generating boolean
[DEBUG-T021] Generated SQL for users: INSERT INTO `users` (`username`, `first_name`, `last_name`, `email`, `date_of_birth`, `salary`, `department`, `hire_date`, `company_id`, `is_active`, `created_at`) VALUES ('Adeline_Feil', 'Frank', 'Armstrong', 'Drew.Carroll93@hotmail.com', '1994-04-19', 190440.82, 'Garden', '2017-11-17 20:57:32', 9, 1, '2025-04-08 06:55:38');
[DEBUG] Boolean column detected: is_active (bit) -&gt; generating boolean
[DEBUG-T021] Generated SQL for users: INSERT INTO `users` (`username`, `first_name`, `last_name`, `email`, `date_of_birth`, `salary`, `department`, `hire_date`, `company_id`, `is_active`, `created_at`) VALUES ('Dennis5', 'Patricia', 'Mraz', 'Madisyn.Mante76@yahoo.com', '2004-10-26', 53914.24, 'Music &amp; Beauty', '2016-08-07 11:57:42', 10, 1, '2025-03-07 20:29:32');
[DEBUG] Boolean column detected: is_active (bit) -&gt; generating boolean
[DEBUG-T021] Generated SQL for users: INSERT INTO `users` (`username`, `first_name`, `last_name`, `email`, `date_of_birth`, `salary`, `department`, `hire_date`, `company_id`, `is_active`, `created_at`) VALUES ('Irwin66', 'Rodger', 'Kling', 'Ardella.Swaniawski34@yahoo.com', '2007-03-22', 196303.74, 'Automotive', '2021-11-01 16:53:32', 11, 1, '2024-07-14 23:37:35');
[DEBUG] Boolean column detected: is_active (bit) -&gt; generating boolean
[DEBUG-T021] Generated SQL for users: INSERT INTO `users` (`username`, `first_name`, `last_name`, `email`, `date_of_birth`, `salary`, `department`, `hire_date`, `company_id`, `is_active`, `created_at`) VALUES ('Lorine.Ernser5', 'Chance', 'Baumbach', 'Ottilie.Stehr@hotmail.com', '1985-06-12', 186366.37, 'Home, Grocery &amp; Outdoors', '2019-12-05 20:06:30', 12, 1, '2025-04-21 08:17:07');
[DEBUG] Boolean column detected: is_active (bit) -&gt; generating boolean
[DEBUG-T021] Generated SQL for users: INSERT INTO `users` (`username`, `first_name`, `last_name`, `email`, `date_of_birth`, `salary`, `department`, `hire_date`, `company_id`, `is_active`, `created_at`) VALUES ('Adelia35', 'Lamar', 'Bode', 'Cecile77@gmail.com', '1996-07-22', 121411.69, 'Beauty &amp; Home', '2024-11-28 08:08:27', 13, 1, '2024-08-01 08:37:53');
[DEBUG] Boolean column detected: is_active (bit) -&gt; generating boolean
[DEBUG-T021] Generated SQL for users: INSERT INTO `users` (`username`, `first_name`, `last_name`, `email`, `date_of_birth`, `salary`, `department`, `hire_date`, `company_id`, `is_active`, `created_at`) VALUES ('Violette.Torphy33', 'Kristopher', 'Koch', 'Aubrey.Daugherty@gmail.com', '1983-08-29', 106674.37, 'Beauty, Clothing &amp; Clothing', '2016-06-08 08:50:06', 14, 1, '2024-12-27 04:59:34');
[DEBUG] Boolean column detected: is_active (bit) -&gt; generating boolean
[DEBUG-T021] Generated SQL for users: INSERT INTO `users` (`username`, `first_name`, `last_name`, `email`, `date_of_birth`, `salary`, `department`, `hire_date`, `company_id`, `is_active`, `created_at`) VALUES ('Logan_Kertzmann', 'Austen', 'Carter', 'Astrid.Mante@gmail.com', '1997-08-11', 41166.33, 'Industrial, Electronics &amp; Tools', '2021-07-23 11:38:20', 15, 0, '2025-01-04 13:26:11');
[DEBUG] Boolean column detected: is_active (bit) -&gt; generating boolean
[DEBUG-T021] Generated SQL for users: INSERT INTO `users` (`username`, `first_name`, `last_name`, `email`, `date_of_birth`, `salary`, `department`, `hire_date`, `company_id`, `is_active`, `created_at`) VALUES ('Clay_Larson', 'Elyse', 'Schuppe', 'Natasha57@gmail.com', '1968-07-14', 192481.51, 'Automotive &amp; Sports', '2021-07-13 16:20:37', 16, 1, '2025-01-23 15:33:05');
[DEBUG] Boolean column detected: is_active (bit) -&gt; generating boolean
[DEBUG-T021] Generated SQL for users: INSERT INTO `users` (`username`, `first_name`, `last_name`, `email`, `date_of_birth`, `salary`, `department`, `hire_date`, `company_id`, `is_active`, `created_at`) VALUES ('Darian95', 'Abdiel', 'McDermott', 'Casimer33@gmail.com', '1987-03-26', 168255.80, 'Jewelery &amp; Automotive', '2019-03-28 05:05:04', 17, 1, '2024-11-20 07:22:36');
[DEBUG] Boolean column detected: is_active (bit) -&gt; generating boolean
[DEBUG-T021] Generated SQL for users: INSERT INTO `users` (`username`, `first_name`, `last_name`, `email`, `date_of_birth`, `salary`, `department`, `hire_date`, `company_id`, `is_active`, `created_at`) VALUES ('Derrick68', 'Vickie', 'Yost', 'Madie_Wuckert61@yahoo.com', '1988-01-16', 161652.81, 'Shoes &amp; Automotive', '2018-08-24 05:52:56', 18, 1, '2024-11-23 13:19:33');
[DEBUG] Boolean column detected: is_active (bit) -&gt; generating boolean
[DEBUG-T021] Generated SQL for users: INSERT INTO `users` (`username`, `first_name`, `last_name`, `email`, `date_of_birth`, `salary`, `department`, `hire_date`, `company_id`, `is_active`, `created_at`) VALUES ('Natasha.Harvey', 'Coralie', 'Kuphal', 'Sonny62@yahoo.com', '1968-06-07', 196016.73, 'Toys &amp; Industrial', '2021-02-24 09:38:55', 19, 1, '2024-11-23 08:47:00');
[DEBUG] Boolean column detected: is_active (bit) -&gt; generating boolean
[DEBUG-T021] Generated SQL for users: INSERT INTO `users` (`username`, `first_name`, `last_name`, `email`, `date_of_birth`, `salary`, `department`, `hire_date`, `company_id`, `is_active`, `created_at`) VALUES ('Lysanne_Lockman10', 'Elmer', 'Romaguera', 'Shanny86@yahoo.com', '1996-01-05', 163464.38, 'Toys &amp; Beauty', '2018-08-09 06:38:31', 20, 1, '2025-05-09 15:24:12');
[DEBUG] Boolean column detected: is_active (bit) -&gt; generating boolean
[DEBUG-T021] Generated SQL for users: INSERT INTO `users` (`username`, `first_name`, `last_name`, `email`, `date_of_birth`, `salary`, `department`, `hire_date`, `company_id`, `is_active`, `created_at`) VALUES ('Melissa74', 'Freda', 'Kunde', 'Isadore_Boehm67@yahoo.com', '1975-07-16', 119033.46, 'Movies, Movies &amp; Tools', '2020-01-18 02:38:26', 21, 0, '2025-07-01 05:31:53');
[DEBUG] Boolean column detected: is_active (bit) -&gt; generating boolean
[DEBUG-T021] Generated SQL for users: INSERT INTO `users` (`username`, `first_name`, `last_name`, `email`, `date_of_birth`, `salary`, `department`, `hire_date`, `company_id`, `is_active`, `created_at`) VALUES ('Ruth.Crist60', 'Domenica', 'McGlynn', 'Oscar28@gmail.com', '1979-10-30', 45441.28, 'Baby', '2019-03-26 11:20:03', 22, 0, '2024-11-19 19:49:25');
[DEBUG] Boolean column detected: is_active (bit) -&gt; generating boolean
[DEBUG-T021] Generated SQL for users: INSERT INTO `users` (`username`, `first_name`, `last_name`, `email`, `date_of_birth`, `salary`, `department`, `hire_date`, `company_id`, `is_active`, `created_at`) VALUES ('Gennaro69', 'Audie', 'Hoeger', 'Kenyatta_Rowe93@hotmail.com', '1992-11-09', 110880.04, 'Kids', '2025-07-01 20:44:33', 23, 1, '2025-01-06 08:54:17');
[DEBUG] Boolean column detected: is_active (bit) -&gt; generating boolean
[DEBUG-T021] Generated SQL for users: INSERT INTO `users` (`username`, `first_name`, `last_name`, `email`, `date_of_birth`, `salary`, `department`, `hire_date`, `company_id`, `is_active`, `created_at`) VALUES ('Ernesto_Hagenes70', 'Sydnee', 'Macejkovic', 'Lupe.Waters7@hotmail.com', '1978-01-07', 193285.78, 'Kids, Kids &amp; Shoes', '2024-07-10 20:04:42', 24, 1, '2024-12-20 16:36:31');
[DEBUG] Boolean column detected: is_active (bit) -&gt; generating boolean
[DEBUG-T021] Generated SQL for users: INSERT INTO `users` (`username`, `first_name`, `last_name`, `email`, `date_of_birth`, `salary`, `department`, `hire_date`, `company_id`, `is_active`, `created_at`) VALUES ('Joany.Little94', 'Concepcion', 'Nader', 'Vita.Keeling46@gmail.com', '1961-06-30', 92495.19, 'Toys, Kids &amp; Sports', '2019-11-07 03:16:39', 25, 0, '2024-12-03 02:03:54');
[DEBUG] Boolean column detected: is_active (bit) -&gt; generating boolean
[DEBUG-T021] Generated SQL for users: INSERT INTO `users` (`username`, `first_name`, `last_name`, `email`, `date_of_birth`, `salary`, `department`, `hire_date`, `company_id`, `is_active`, `created_at`) VALUES ('Hershel.Hackett', 'Aletha', 'Jast', 'Nayeli.Batz99@yahoo.com', '1978-07-27', 132214.13, 'Books, Baby &amp; Garden', '2021-01-25 12:41:04', 26, 1, '2024-07-26 15:35:36');
[DEBUG] Boolean column detected: is_active (bit) -&gt; generating boolean
[DEBUG-T021] Generated SQL for users: INSERT INTO `users` (`username`, `first_name`, `last_name`, `email`, `date_of_birth`, `salary`, `department`, `hire_date`, `company_id`, `is_active`, `created_at`) VALUES ('Enrico.Roberts51', 'Juston', 'Olson', 'Kacey.Keebler@yahoo.com', '1989-03-25', 191110.92, 'Automotive, Industrial &amp; Books', '2016-12-02 11:36:47', 27, 1, '2024-07-08 22:17:50');
[DEBUG] Boolean column detected: is_active (bit) -&gt; generating boolean
[DEBUG-T021] Generated SQL for users: INSERT INTO `users` (`username`, `first_name`, `last_name`, `email`, `date_of_birth`, `salary`, `department`, `hire_date`, `company_id`, `is_active`, `created_at`) VALUES ('Marty_Howell', 'Glenda', 'Schiller', 'Loren.Schowalter71@yahoo.com', '1980-02-14', 97230.11, 'Computers', '2024-03-01 18:18:35', 28, 1, '2025-05-27 12:26:59');
[DEBUG] Boolean column detected: is_active (bit) -&gt; generating boolean
[DEBUG-T021] Generated SQL for users: INSERT INTO `users` (`username`, `first_name`, `last_name`, `email`, `date_of_birth`, `salary`, `department`, `hire_date`, `company_id`, `is_active`, `created_at`) VALUES ('Chelsie.Murazik0', 'Anastacio', 'Blick', 'Levi35@hotmail.com', '1992-10-06', 72413.89, 'Music, Industrial &amp; Baby', '2024-08-13 23:35:09', 29, 1, '2024-09-08 13:30:25');
[DEBUG] Boolean column detected: is_active (bit) -&gt; generating boolean
[DEBUG-T021] Generated SQL for users: INSERT INTO `users` (`username`, `first_name`, `last_name`, `email`, `date_of_birth`, `salary`, `department`, `hire_date`, `company_id`, `is_active`, `created_at`) VALUES ('Marco88', 'Janis', 'Murray', 'Ayana.Bernier89@hotmail.com', '1998-11-11', 114377.06, 'Automotive, Home &amp; Sports', '2019-10-11 09:42:04', 30, 1, '2024-12-18 05:08:25');
[DEBUG] Boolean column detected: is_active (bit) -&gt; generating boolean
[DEBUG-T021] Generated SQL for users: INSERT INTO `users` (`username`, `first_name`, `last_name`, `email`, `date_of_birth`, `salary`, `department`, `hire_date`, `company_id`, `is_active`, `created_at`) VALUES ('Leopold36', 'Christ', 'Legros', 'Jett_Rowe48@hotmail.com', '1977-12-04', 136841.97, 'Toys &amp; Automotive', '2023-04-28 16:23:41', 31, 1, '2024-11-22 20:26:21');
[DEBUG] Boolean column detected: is_active (bit) -&gt; generating boolean
[DEBUG-T021] Generated SQL for users: INSERT INTO `users` (`username`, `first_name`, `last_name`, `email`, `date_of_birth`, `salary`, `department`, `hire_date`, `company_id`, `is_active`, `created_at`) VALUES ('Cathrine.Bogisich', 'Claudine', 'Kutch', 'Zachary36@yahoo.com', '1986-12-30', 71107.18, 'Tools &amp; Movies', '2023-07-21 23:00:24', 32, 1, '2024-08-01 04:12:15');
[DEBUG] Boolean column detected: is_active (bit) -&gt; generating boolean
[DEBUG-T021] Generated SQL for users: INSERT INTO `users` (`username`, `first_name`, `last_name`, `email`, `date_of_birth`, `salary`, `department`, `hire_date`, `company_id`, `is_active`, `created_at`) VALUES ('Alek_Runolfsson', 'Marcelino', 'Lindgren', 'Ardith76@hotmail.com', '1993-12-09', 67708.18, 'Movies &amp; Jewelery', '2021-10-22 18:14:23', 33, 1, '2025-03-31 23:36:20');
[DEBUG] Boolean column detected: is_active (bit) -&gt; generating boolean
[DEBUG-T021] Generated SQL for users: INSERT INTO `users` (`username`, `first_name`, `last_name`, `email`, `date_of_birth`, `salary`, `department`, `hire_date`, `company_id`, `is_active`, `created_at`) VALUES ('Reanna_Schimmel0', 'Paul', 'King', 'Hermann.Aufderhar6@gmail.com', '1985-11-30', 35473.59, 'Baby &amp; Games', '2022-10-11 08:19:36', 34, 1, '2024-09-14 05:23:21');
[DEBUG] Boolean column detected: is_active (bit) -&gt; generating boolean
[DEBUG-T021] Generated SQL for users: INSERT INTO `users` (`username`, `first_name`, `last_name`, `email`, `date_of_birth`, `salary`, `department`, `hire_date`, `company_id`, `is_active`, `created_at`) VALUES ('Myrtle.Graham27', 'Marc', 'Lindgren', 'Eldon.Klocko@hotmail.com', '2002-07-14', 103439.52, 'Electronics &amp; Jewelery', '2021-08-07 06:22:10', 35, 1, '2025-06-16 23:03:45');
[DEBUG] Boolean column detected: is_active (bit) -&gt; generating boolean
[DEBUG-T021] Generated SQL for users: INSERT INTO `users` (`username`, `first_name`, `last_name`, `email`, `date_of_birth`, `salary`, `department`, `hire_date`, `company_id`, `is_active`, `created_at`) VALUES ('Rosanna23', 'Leann', 'Paucek', 'Orval.Balistreri75@gmail.com', '1998-12-07', 79634.23, 'Games &amp; Jewelery', '2020-01-17 09:16:38', 36, 0, '2025-02-01 20:19:32');
[DEBUG] Boolean column detected: is_active (bit) -&gt; generating boolean
[DEBUG-T021] Generated SQL for users: INSERT INTO `users` (`username`, `first_name`, `last_name`, `email`, `date_of_birth`, `salary`, `department`, `hire_date`, `company_id`, `is_active`, `created_at`) VALUES ('Lacey.Christiansen', 'Kale', 'Fritsch', 'Syble12@hotmail.com', '1982-12-15', 81725.87, 'Home', '2019-06-24 17:36:05', 37, 1, '2024-09-28 13:44:59');
[DEBUG] Boolean column detected: is_active (bit) -&gt; generating boolean
[DEBUG-T021] Generated SQL for users: INSERT INTO `users` (`username`, `first_name`, `last_name`, `email`, `date_of_birth`, `salary`, `department`, `hire_date`, `company_id`, `is_active`, `created_at`) VALUES ('Cassandra.Huel', 'Angeline', 'O''Keefe', 'Danielle_Schroeder5@yahoo.com', '2003-03-13', 100626.98, 'Sports &amp; Sports', '2020-01-28 11:27:08', 38, 1, '2024-07-28 06:12:05');
[DEBUG] Boolean column detected: is_active (bit) -&gt; generating boolean
[DEBUG-T021] Generated SQL for users: INSERT INTO `users` (`username`, `first_name`, `last_name`, `email`, `date_of_birth`, `salary`, `department`, `hire_date`, `company_id`, `is_active`, `created_at`) VALUES ('Oda62', 'Amanda', 'Wiegand', 'Shaun_Cummerata13@gmail.com', '1996-01-13', 62202.17, 'Home &amp; Industrial', '2021-12-09 17:31:44', 39, 1, '2025-02-09 23:48:37');
[DEBUG] Boolean column detected: is_active (bit) -&gt; generating boolean
[DEBUG-T021] Generated SQL for users: INSERT INTO `users` (`username`, `first_name`, `last_name`, `email`, `date_of_birth`, `salary`, `department`, `hire_date`, `company_id`, `is_active`, `created_at`) VALUES ('Orin.Lebsack', 'Rylan', 'Lebsack', 'Julianne_Dach68@gmail.com', '1966-05-06', 71005.27, 'Movies, Garden &amp; Industrial', '2019-03-20 05:36:01', 40, 1, '2024-12-10 20:19:21');
[DEBUG] Boolean column detected: is_active (bit) -&gt; generating boolean
[DEBUG-T021] Generated SQL for users: INSERT INTO `users` (`username`, `first_name`, `last_name`, `email`, `date_of_birth`, `salary`, `department`, `hire_date`, `company_id`, `is_active`, `created_at`) VALUES ('Marian53', 'Kyler', 'Fritsch', 'Jordyn52@yahoo.com', '2002-10-25', 199243.10, 'Music, Electronics &amp; Grocery', '2022-12-26 08:52:49', 41, 1, '2025-02-01 03:36:36');
[DEBUG] Boolean column detected: is_active (bit) -&gt; generating boolean
[DEBUG-T021] Generated SQL for users: INSERT INTO `users` (`username`, `first_name`, `last_name`, `email`, `date_of_birth`, `salary`, `department`, `hire_date`, `company_id`, `is_active`, `created_at`) VALUES ('Athena.Sporer', 'Gwen', 'Ryan', 'Aidan.Ortiz@yahoo.com', '1981-04-20', 154571.65, 'Movies &amp; Outdoors', '2018-06-02 00:17:51', 42, 1, '2025-04-24 21:29:00');
[DEBUG] Boolean column detected: is_active (bit) -&gt; generating boolean
[DEBUG-T021] Generated SQL for users: INSERT INTO `users` (`username`, `first_name`, `last_name`, `email`, `date_of_birth`, `salary`, `department`, `hire_date`, `company_id`, `is_active`, `created_at`) VALUES ('Alvah.Gottlieb', 'Hilda', 'Vandervort', 'Waylon_Will@hotmail.com', '2002-09-01', 97323.15, 'Automotive &amp; Jewelery', '2025-03-31 19:02:29', 43, 1, '2025-03-29 01:28:28');
[DEBUG] Boolean column detected: is_active (bit) -&gt; generating boolean
[DEBUG-T021] Generated SQL for users: INSERT INTO `users` (`username`, `first_name`, `last_name`, `email`, `date_of_birth`, `salary`, `department`, `hire_date`, `company_id`, `is_active`, `created_at`) VALUES ('Oswaldo29', 'Alivia', 'Howell', 'Minnie_Tillman@yahoo.com', '1986-01-20', 70971.93, 'Health, Garden &amp; Grocery', '2020-11-13 08:12:24', 44, 1, '2025-04-19 07:59:23');
[DEBUG] Boolean column detected: is_active (bit) -&gt; generating boolean
[DEBUG-T021] Generated SQL for users: INSERT INTO `users` (`username`, `first_name`, `last_name`, `email`, `date_of_birth`, `salary`, `department`, `hire_date`, `company_id`, `is_active`, `created_at`) VALUES ('Randall4', 'Norbert', 'Brown', 'Dereck3@gmail.com', '1976-07-28', 140901.13, 'Music', '2024-09-15 08:09:34', 45, 1, '2024-07-08 18:15:30');
[DEBUG] Boolean column detected: is_active (bit) -&gt; generating boolean
[DEBUG-T021] Generated SQL for users: INSERT INTO `users` (`username`, `first_name`, `last_name`, `email`, `date_of_birth`, `salary`, `department`, `hire_date`, `company_id`, `is_active`, `created_at`) VALUES ('Donnie35', 'Gussie', 'Maggio', 'Pietro_Towne63@gmail.com', '1977-09-16', 147715.36, 'Computers &amp; Baby', '2022-02-14 07:02:44', 46, 1, '2025-06-01 12:05:35');
[DEBUG] Boolean column detected: is_active (bit) -&gt; generating boolean
[DEBUG-T021] Generated SQL for users: INSERT INTO `users` (`username`, `first_name`, `last_name`, `email`, `date_of_birth`, `salary`, `department`, `hire_date`, `company_id`, `is_active`, `created_at`) VALUES ('Myrl_Kuhn99', 'Arno', 'Ruecker', 'Maximo86@hotmail.com', '1972-10-23', 58727.14, 'Clothing', '2017-03-18 01:28:14', 47, 1, '2025-03-02 02:39:18');
[DEBUG] Boolean column detected: is_active (bit) -&gt; generating boolean
[DEBUG-T021] Generated SQL for users: INSERT INTO `users` (`username`, `first_name`, `last_name`, `email`, `date_of_birth`, `salary`, `department`, `hire_date`, `company_id`, `is_active`, `created_at`) VALUES ('Annabelle44', 'Adrian', 'Buckridge', 'Dewitt_Roob@hotmail.com', '1966-06-06', 59449.20, 'Industrial', '2017-11-16 21:38:51', 48, 0, '2025-01-14 00:05:14');
[DEBUG] Boolean column detected: is_active (bit) -&gt; generating boolean
[DEBUG-T021] Generated SQL for users: INSERT INTO `users` (`username`, `first_name`, `last_name`, `email`, `date_of_birth`, `salary`, `department`, `hire_date`, `company_id`, `is_active`, `created_at`) VALUES ('Naomie.Ward73', 'Matteo', 'Kihn', 'Osborne.Orn43@gmail.com', '1980-11-23', 48414.80, 'Sports', '2016-10-21 20:54:02', 49, 1, '2025-02-02 09:13:31');
[DEBUG] Boolean column detected: is_active (bit) -&gt; generating boolean
[DEBUG-T021] Generated SQL for users: INSERT INTO `users` (`username`, `first_name`, `last_name`, `email`, `date_of_birth`, `salary`, `department`, `hire_date`, `company_id`, `is_active`, `created_at`) VALUES ('Jennie68', 'Tyshawn', 'Waters', 'Adam_Kuphal@gmail.com', '1977-08-13', 56305.51, 'Toys, Industrial &amp; Computers', '2017-11-26 02:17:53', 50, 0, '2024-10-31 19:31:04');
[DEBUG] Boolean column detected: is_active (bit) -&gt; generating boolean
[DEBUG-T021] Generated SQL for users: INSERT INTO `users` (`username`, `first_name`, `last_name`, `email`, `date_of_birth`, `salary`, `department`, `hire_date`, `company_id`, `is_active`, `created_at`) VALUES ('Ray_Wiegand24', 'Dexter', 'O''Conner', 'Vance.Lubowitz59@yahoo.com', '1969-06-24', 42857.05, 'Jewelery &amp; Health', '2025-02-10 00:57:21', 1, 1, '2024-08-17 17:19:36');
[DEBUG] Table user_roles has 6 columns:
[DEBUG] Column: user_id, IsIdentity: False, IsGenerated: False, DefaultValue: ''
[DEBUG] Column: role_id, IsIdentity: False, IsGenerated: False, DefaultValue: ''
[DEBUG] Column: assigned_by, IsIdentity: False, IsGenerated: False, DefaultValue: ''
[DEBUG] Column: assigned_at, IsIdentity: False, IsGenerated: False, DefaultValue: ''
[DEBUG] Column: expires_at, IsIdentity: False, IsGenerated: False, DefaultValue: ''
[DEBUG] Column: is_active, IsIdentity: False, IsGenerated: False, DefaultValue: ''
[DEBUG-T021] Filtered columns for user_roles: 6 columns (from 6 total)
[DEBUG-T021] Excluded columns: 
[DEBUG-T021] Included columns: user_id, role_id, assigned_by, assigned_at, expires_at, is_active
[DATE-FALLBACK] user_roles.expires_at: Generated 2025-07-26 15:17:55 (within 60 days default)
[DEBUG] Boolean column detected: is_active (bit) -&gt; generating boolean
[DEBUG] Generated SQL for user_roles: INSERT INTO `user_roles` (`user_id`, `role_id`, `assigned_by`, `assigned_at`, `expires_at`, `is_active`) VALUES (2, 18, 35, '2025-03-31 05:58:40', '2025-07-26 15:17:55', 1);
[DATE-FALLBACK] user_roles.expires_at: Generated 2025-07-24 04:51:12 (within 60 days default)
[DEBUG] Boolean column detected: is_active (bit) -&gt; generating boolean
[DEBUG] Generated SQL for user_roles: INSERT INTO `user_roles` (`user_id`, `role_id`, `assigned_by`, `assigned_at`, `expires_at`, `is_active`) VALUES (3, 19, 36, '2024-08-02 12:11:22', '2025-07-24 04:51:12', 1);
[DATE-FALLBACK] user_roles.expires_at: Generated 2025-08-18 19:30:39 (within 60 days default)
[DEBUG] Boolean column detected: is_active (bit) -&gt; generating boolean
[DEBUG] Generated SQL for user_roles: INSERT INTO `user_roles` (`user_id`, `role_id`, `assigned_by`, `assigned_at`, `expires_at`, `is_active`) VALUES (4, 20, 37, '2024-10-20 15:46:58', '2025-08-18 19:30:39', 1);
[DATE-FALLBACK] user_roles.expires_at: Generated 2025-08-06 07:23:52 (within 60 days default)
[DEBUG] Boolean column detected: is_active (bit) -&gt; generating boolean
[DEBUG] Generated SQL for user_roles: INSERT INTO `user_roles` (`user_id`, `role_id`, `assigned_by`, `assigned_at`, `expires_at`, `is_active`) VALUES (5, 21, 38, '2025-02-02 06:21:32', '2025-08-06 07:23:52', 1);
[DATE-FALLBACK] user_roles.expires_at: Generated 2025-07-28 13:01:52 (within 60 days default)
[DEBUG] Boolean column detected: is_active (bit) -&gt; generating boolean
[DEBUG] Generated SQL for user_roles: INSERT INTO `user_roles` (`user_id`, `role_id`, `assigned_by`, `assigned_at`, `expires_at`, `is_active`) VALUES (6, 22, 39, '2024-11-09 15:38:00', '2025-07-28 13:01:52', 1);
[DATE-FALLBACK] user_roles.expires_at: Generated 2025-07-18 23:43:25 (within 60 days default)
[DEBUG] Boolean column detected: is_active (bit) -&gt; generating boolean
[DEBUG] Generated SQL for user_roles: INSERT INTO `user_roles` (`user_id`, `role_id`, `assigned_by`, `assigned_at`, `expires_at`, `is_active`) VALUES (7, 23, 40, '2025-02-26 03:19:45', '2025-07-18 23:43:25', 0);
[DATE-FALLBACK] user_roles.expires_at: Generated 2025-07-14 10:03:41 (within 60 days default)
[DEBUG] Boolean column detected: is_active (bit) -&gt; generating boolean
[DEBUG] Generated SQL for user_roles: INSERT INTO `user_roles` (`user_id`, `role_id`, `assigned_by`, `assigned_at`, `expires_at`, `is_active`) VALUES (8, 24, 41, '2025-06-02 21:52:21', '2025-07-14 10:03:41', 1);
[DATE-FALLBACK] user_roles.expires_at: Generated 2025-07-21 04:49:41 (within 60 days default)
[DEBUG] Boolean column detected: is_active (bit) -&gt; generating boolean
[DEBUG] Generated SQL for user_roles: INSERT INTO `user_roles` (`user_id`, `role_id`, `assigned_by`, `assigned_at`, `expires_at`, `is_active`) VALUES (9, 25, 42, '2025-06-15 20:58:26', '2025-07-21 04:49:41', 1);
[DATE-FALLBACK] user_roles.expires_at: Generated 2025-07-08 07:32:35 (within 60 days default)
[DEBUG] Boolean column detected: is_active (bit) -&gt; generating boolean
[DEBUG] Generated SQL for user_roles: INSERT INTO `user_roles` (`user_id`, `role_id`, `assigned_by`, `assigned_at`, `expires_at`, `is_active`) VALUES (10, 26, 43, '2024-07-25 13:08:34', '2025-07-08 07:32:35', 1);
[DATE-FALLBACK] user_roles.expires_at: Generated 2025-08-09 14:41:02 (within 60 days default)
[DEBUG] Boolean column detected: is_active (bit) -&gt; generating boolean
[DEBUG] Generated SQL for user_roles: INSERT INTO `user_roles` (`user_id`, `role_id`, `assigned_by`, `assigned_at`, `expires_at`, `is_active`) VALUES (11, 27, 44, '2024-11-25 17:12:35', '2025-08-09 14:41:02', 0);
[DATE-FALLBACK] user_roles.expires_at: Generated 2025-08-04 16:08:31 (within 60 days default)
[DEBUG] Boolean column detected: is_active (bit) -&gt; generating boolean
[DEBUG] Generated SQL for user_roles: INSERT INTO `user_roles` (`user_id`, `role_id`, `assigned_by`, `assigned_at`, `expires_at`, `is_active`) VALUES (12, 28, 45, '2025-04-18 10:32:11', '2025-08-04 16:08:31', 0);
[DATE-FALLBACK] user_roles.expires_at: Generated 2025-08-04 04:32:34 (within 60 days default)
[DEBUG] Boolean column detected: is_active (bit) -&gt; generating boolean
[DEBUG] Generated SQL for user_roles: INSERT INTO `user_roles` (`user_id`, `role_id`, `assigned_by`, `assigned_at`, `expires_at`, `is_active`) VALUES (13, 29, 46, '2024-11-24 20:20:40', '2025-08-04 04:32:34', 1);
[DATE-FALLBACK] user_roles.expires_at: Generated 2025-07-15 00:45:19 (within 60 days default)
[DEBUG] Boolean column detected: is_active (bit) -&gt; generating boolean
[DEBUG] Generated SQL for user_roles: INSERT INTO `user_roles` (`user_id`, `role_id`, `assigned_by`, `assigned_at`, `expires_at`, `is_active`) VALUES (14, 30, 47, '2024-07-26 12:10:13', '2025-07-15 00:45:19', 0);
[DATE-FALLBACK] user_roles.expires_at: Generated 2025-07-17 05:48:59 (within 60 days default)
[DEBUG] Boolean column detected: is_active (bit) -&gt; generating boolean
[DEBUG] Generated SQL for user_roles: INSERT INTO `user_roles` (`user_id`, `role_id`, `assigned_by`, `assigned_at`, `expires_at`, `is_active`) VALUES (15, 31, 48, '2025-05-30 23:00:02', '2025-07-17 05:48:59', 1);
[DATE-FALLBACK] user_roles.expires_at: Generated 2025-07-18 11:04:16 (within 60 days default)
[DEBUG] Boolean column detected: is_active (bit) -&gt; generating boolean
[DEBUG] Generated SQL for user_roles: INSERT INTO `user_roles` (`user_id`, `role_id`, `assigned_by`, `assigned_at`, `expires_at`, `is_active`) VALUES (16, 32, 49, '2024-12-19 19:15:25', '2025-07-18 11:04:16', 0);
[DATE-FALLBACK] user_roles.expires_at: Generated 2025-08-20 21:16:44 (within 60 days default)
[DEBUG] Boolean column detected: is_active (bit) -&gt; generating boolean
[DEBUG] Generated SQL for user_roles: INSERT INTO `user_roles` (`user_id`, `role_id`, `assigned_by`, `assigned_at`, `expires_at`, `is_active`) VALUES (17, 33, 50, '2024-09-02 05:41:43', '2025-08-20 21:16:44', 1);
[DATE-FALLBACK] user_roles.expires_at: Generated 2025-08-23 23:00:52 (within 60 days default)
[DEBUG] Boolean column detected: is_active (bit) -&gt; generating boolean
[DEBUG] Generated SQL for user_roles: INSERT INTO `user_roles` (`user_id`, `role_id`, `assigned_by`, `assigned_at`, `expires_at`, `is_active`) VALUES (18, 34, 1, '2024-08-26 00:19:30', '2025-08-23 23:00:52', 1);
[DATE-FALLBACK] user_roles.expires_at: Generated 2025-08-09 07:24:35 (within 60 days default)
[DEBUG] Boolean column detected: is_active (bit) -&gt; generating boolean
[DEBUG] Generated SQL for user_roles: INSERT INTO `user_roles` (`user_id`, `role_id`, `assigned_by`, `assigned_at`, `expires_at`, `is_active`) VALUES (19, 35, 2, '2024-09-13 00:37:43', '2025-08-09 07:24:35', 1);
[DATE-FALLBACK] user_roles.expires_at: Generated 2025-07-10 14:03:40 (within 60 days default)
[DEBUG] Boolean column detected: is_active (bit) -&gt; generating boolean
[DEBUG] Generated SQL for user_roles: INSERT INTO `user_roles` (`user_id`, `role_id`, `assigned_by`, `assigned_at`, `expires_at`, `is_active`) VALUES (20, 36, 3, '2025-02-21 23:11:00', '2025-07-10 14:03:40', 1);
[DATE-FALLBACK] user_roles.expires_at: Generated 2025-07-30 12:53:43 (within 60 days default)
[DEBUG] Boolean column detected: is_active (bit) -&gt; generating boolean
[DEBUG] Generated SQL for user_roles: INSERT INTO `user_roles` (`user_id`, `role_id`, `assigned_by`, `assigned_at`, `expires_at`, `is_active`) VALUES (21, 37, 4, '2025-04-07 08:05:18', '2025-07-30 12:53:43', 1);
[DATE-FALLBACK] user_roles.expires_at: Generated 2025-07-30 12:55:16 (within 60 days default)
[DEBUG] Boolean column detected: is_active (bit) -&gt; generating boolean
[DEBUG] Generated SQL for user_roles: INSERT INTO `user_roles` (`user_id`, `role_id`, `assigned_by`, `assigned_at`, `expires_at`, `is_active`) VALUES (22, 38, 5, '2025-04-23 23:49:39', '2025-07-30 12:55:16', 1);
[DATE-FALLBACK] user_roles.expires_at: Generated 2025-07-27 14:42:39 (within 60 days default)
[DEBUG] Boolean column detected: is_active (bit) -&gt; generating boolean
[DEBUG] Generated SQL for user_roles: INSERT INTO `user_roles` (`user_id`, `role_id`, `assigned_by`, `assigned_at`, `expires_at`, `is_active`) VALUES (23, 39, 6, '2024-11-24 08:33:37', '2025-07-27 14:42:39', 0);
[DATE-FALLBACK] user_roles.expires_at: Generated 2025-07-25 22:23:51 (within 60 days default)
[DEBUG] Boolean column detected: is_active (bit) -&gt; generating boolean
[DEBUG] Generated SQL for user_roles: INSERT INTO `user_roles` (`user_id`, `role_id`, `assigned_by`, `assigned_at`, `expires_at`, `is_active`) VALUES (24, 40, 7, '2024-07-13 03:25:34', '2025-07-25 22:23:51', 1);
[DATE-FALLBACK] user_roles.expires_at: Generated 2025-07-14 03:14:48 (within 60 days default)
[DEBUG] Boolean column detected: is_active (bit) -&gt; generating boolean
[DEBUG] Generated SQL for user_roles: INSERT INTO `user_roles` (`user_id`, `role_id`, `assigned_by`, `assigned_at`, `expires_at`, `is_active`) VALUES (25, 41, 8, '2025-06-14 22:52:16', '2025-07-14 03:14:48', 1);
[DATE-FALLBACK] user_roles.expires_at: Generated 2025-08-19 16:36:25 (within 60 days default)
[DEBUG] Boolean column detected: is_active (bit) -&gt; generating boolean
[DEBUG] Generated SQL for user_roles: INSERT INTO `user_roles` (`user_id`, `role_id`, `assigned_by`, `assigned_at`, `expires_at`, `is_active`) VALUES (26, 42, 9, '2025-03-13 11:18:00', '2025-08-19 16:36:25', 1);
[DATE-FALLBACK] user_roles.expires_at: Generated 2025-08-18 04:13:09 (within 60 days default)
[DEBUG] Boolean column detected: is_active (bit) -&gt; generating boolean
[DEBUG] Generated SQL for user_roles: INSERT INTO `user_roles` (`user_id`, `role_id`, `assigned_by`, `assigned_at`, `expires_at`, `is_active`) VALUES (27, 43, 10, '2025-03-16 21:21:18', '2025-08-18 04:13:09', 1);
[DATE-FALLBACK] user_roles.expires_at: Generated 2025-08-20 09:49:51 (within 60 days default)
[DEBUG] Boolean column detected: is_active (bit) -&gt; generating boolean
[DEBUG] Generated SQL for user_roles: INSERT INTO `user_roles` (`user_id`, `role_id`, `assigned_by`, `assigned_at`, `expires_at`, `is_active`) VALUES (28, 44, 11, '2024-12-22 09:25:08', '2025-08-20 09:49:51', 0);
[DATE-FALLBACK] user_roles.expires_at: Generated 2025-08-17 02:02:27 (within 60 days default)
[DEBUG] Boolean column detected: is_active (bit) -&gt; generating boolean
[DEBUG] Generated SQL for user_roles: INSERT INTO `user_roles` (`user_id`, `role_id`, `assigned_by`, `assigned_at`, `expires_at`, `is_active`) VALUES (29, 45, 12, '2024-07-14 22:10:23', '2025-08-17 02:02:27', 1);
[DATE-FALLBACK] user_roles.expires_at: Generated 2025-08-01 02:10:56 (within 60 days default)
[DEBUG] Boolean column detected: is_active (bit) -&gt; generating boolean
[DEBUG] Generated SQL for user_roles: INSERT INTO `user_roles` (`user_id`, `role_id`, `assigned_by`, `assigned_at`, `expires_at`, `is_active`) VALUES (30, 46, 13, '2025-04-28 21:07:43', '2025-08-01 02:10:56', 1);
[DATE-FALLBACK] user_roles.expires_at: Generated 2025-08-21 14:50:14 (within 60 days default)
[DEBUG] Boolean column detected: is_active (bit) -&gt; generating boolean
[DEBUG] Generated SQL for user_roles: INSERT INTO `user_roles` (`user_id`, `role_id`, `assigned_by`, `assigned_at`, `expires_at`, `is_active`) VALUES (31, 47, 14, '2024-11-08 13:22:19', '2025-08-21 14:50:14', 1);
[DATE-FALLBACK] user_roles.expires_at: Generated 2025-07-17 14:03:05 (within 60 days default)
[DEBUG] Boolean column detected: is_active (bit) -&gt; generating boolean
[DEBUG] Generated SQL for user_roles: INSERT INTO `user_roles` (`user_id`, `role_id`, `assigned_by`, `assigned_at`, `expires_at`, `is_active`) VALUES (32, 48, 15, '2025-04-03 00:29:09', '2025-07-17 14:03:05', 1);
[DATE-FALLBACK] user_roles.expires_at: Generated 2025-07-22 13:46:14 (within 60 days default)
[DEBUG] Boolean column detected: is_active (bit) -&gt; generating boolean
[DEBUG] Generated SQL for user_roles: INSERT INTO `user_roles` (`user_id`, `role_id`, `assigned_by`, `assigned_at`, `expires_at`, `is_active`) VALUES (33, 49, 16, '2024-11-16 14:46:23', '2025-07-22 13:46:14', 1);
[DATE-FALLBACK] user_roles.expires_at: Generated 2025-07-28 08:24:20 (within 60 days default)
[DEBUG] Boolean column detected: is_active (bit) -&gt; generating boolean
[DEBUG] Generated SQL for user_roles: INSERT INTO `user_roles` (`user_id`, `role_id`, `assigned_by`, `assigned_at`, `expires_at`, `is_active`) VALUES (34, 50, 17, '2024-11-22 16:54:51', '2025-07-28 08:24:20', 1);
[DATE-FALLBACK] user_roles.expires_at: Generated 2025-07-27 05:01:28 (within 60 days default)
[DEBUG] Boolean column detected: is_active (bit) -&gt; generating boolean
[DEBUG] Generated SQL for user_roles: INSERT INTO `user_roles` (`user_id`, `role_id`, `assigned_by`, `assigned_at`, `expires_at`, `is_active`) VALUES (35, 1, 18, '2025-06-01 09:57:24', '2025-07-27 05:01:28', 1);
[DATE-FALLBACK] user_roles.expires_at: Generated 2025-08-17 20:13:58 (within 60 days default)
[DEBUG] Boolean column detected: is_active (bit) -&gt; generating boolean
[DEBUG] Generated SQL for user_roles: INSERT INTO `user_roles` (`user_id`, `role_id`, `assigned_by`, `assigned_at`, `expires_at`, `is_active`) VALUES (36, 2, 19, '2025-05-29 15:14:58', '2025-08-17 20:13:58', 1);
[DATE-FALLBACK] user_roles.expires_at: Generated 2025-07-14 18:51:20 (within 60 days default)
[DEBUG] Boolean column detected: is_active (bit) -&gt; generating boolean
[DEBUG] Generated SQL for user_roles: INSERT INTO `user_roles` (`user_id`, `role_id`, `assigned_by`, `assigned_at`, `expires_at`, `is_active`) VALUES (37, 3, 20, '2024-11-24 12:49:56', '2025-07-14 18:51:20', 1);
[DATE-FALLBACK] user_roles.expires_at: Generated 2025-08-25 05:33:45 (within 60 days default)
[DEBUG] Boolean column detected: is_active (bit) -&gt; generating boolean
[DEBUG] Generated SQL for user_roles: INSERT INTO `user_roles` (`user_id`, `role_id`, `assigned_by`, `assigned_at`, `expires_at`, `is_active`) VALUES (38, 4, 21, '2025-02-13 02:44:47', '2025-08-25 05:33:45', 1);
[DATE-FALLBACK] user_roles.expires_at: Generated 2025-07-23 21:40:55 (within 60 days default)
[DEBUG] Boolean column detected: is_active (bit) -&gt; generating boolean
[DEBUG] Generated SQL for user_roles: INSERT INTO `user_roles` (`user_id`, `role_id`, `assigned_by`, `assigned_at`, `expires_at`, `is_active`) VALUES (39, 5, 22, '2024-12-26 15:21:51', '2025-07-23 21:40:55', 1);
[DATE-FALLBACK] user_roles.expires_at: Generated 2025-07-10 15:54:57 (within 60 days default)
[DEBUG] Boolean column detected: is_active (bit) -&gt; generating boolean
[DEBUG] Generated SQL for user_roles: INSERT INTO `user_roles` (`user_id`, `role_id`, `assigned_by`, `assigned_at`, `expires_at`, `is_active`) VALUES (40, 6, 23, '2025-04-01 03:28:32', '2025-07-10 15:54:57', 1);
[DATE-FALLBACK] user_roles.expires_at: Generated 2025-07-25 19:11:35 (within 60 days default)
[DEBUG] Boolean column detected: is_active (bit) -&gt; generating boolean
[DEBUG] Generated SQL for user_roles: INSERT INTO `user_roles` (`user_id`, `role_id`, `assigned_by`, `assigned_at`, `expires_at`, `is_active`) VALUES (41, 7, 24, '2025-01-03 03:47:32', '2025-07-25 19:11:35', 0);
[DATE-FALLBACK] user_roles.expires_at: Generated 2025-07-26 23:42:24 (within 60 days default)
[DEBUG] Boolean column detected: is_active (bit) -&gt; generating boolean
[DEBUG] Generated SQL for user_roles: INSERT INTO `user_roles` (`user_id`, `role_id`, `assigned_by`, `assigned_at`, `expires_at`, `is_active`) VALUES (42, 8, 25, '2024-07-08 09:49:40', '2025-07-26 23:42:24', 0);
[DATE-FALLBACK] user_roles.expires_at: Generated 2025-08-01 05:47:23 (within 60 days default)
[DEBUG] Boolean column detected: is_active (bit) -&gt; generating boolean
[DEBUG] Generated SQL for user_roles: INSERT INTO `user_roles` (`user_id`, `role_id`, `assigned_by`, `assigned_at`, `expires_at`, `is_active`) VALUES (43, 9, 26, '2025-06-04 22:33:16', '2025-08-01 05:47:23', 1);
[DATE-FALLBACK] user_roles.expires_at: Generated 2025-07-29 11:29:51 (within 60 days default)
[DEBUG] Boolean column detected: is_active (bit) -&gt; generating boolean
[DEBUG] Generated SQL for user_roles: INSERT INTO `user_roles` (`user_id`, `role_id`, `assigned_by`, `assigned_at`, `expires_at`, `is_active`) VALUES (44, 10, 27, '2024-08-10 12:07:57', '2025-07-29 11:29:51', 1);
[DATE-FALLBACK] user_roles.expires_at: Generated 2025-08-10 05:03:24 (within 60 days default)
[DEBUG] Boolean column detected: is_active (bit) -&gt; generating boolean
[DEBUG] Generated SQL for user_roles: INSERT INTO `user_roles` (`user_id`, `role_id`, `assigned_by`, `assigned_at`, `expires_at`, `is_active`) VALUES (45, 11, 28, '2024-11-14 05:53:45', '2025-08-10 05:03:24', 0);
[DATE-FALLBACK] user_roles.expires_at: Generated 2025-07-23 04:25:23 (within 60 days default)
[DEBUG] Boolean column detected: is_active (bit) -&gt; generating boolean
[DEBUG] Generated SQL for user_roles: INSERT INTO `user_roles` (`user_id`, `role_id`, `assigned_by`, `assigned_at`, `expires_at`, `is_active`) VALUES (46, 12, 29, '2024-09-24 16:36:08', '2025-07-23 04:25:23', 1);
[DATE-FALLBACK] user_roles.expires_at: Generated 2025-07-21 23:42:20 (within 60 days default)
[DEBUG] Boolean column detected: is_active (bit) -&gt; generating boolean
[DEBUG] Generated SQL for user_roles: INSERT INTO `user_roles` (`user_id`, `role_id`, `assigned_by`, `assigned_at`, `expires_at`, `is_active`) VALUES (47, 13, 30, '2024-09-16 20:00:19', '2025-07-21 23:42:20', 1);
[DATE-FALLBACK] user_roles.expires_at: Generated 2025-08-06 22:16:07 (within 60 days default)
[DEBUG] Boolean column detected: is_active (bit) -&gt; generating boolean
[DEBUG] Generated SQL for user_roles: INSERT INTO `user_roles` (`user_id`, `role_id`, `assigned_by`, `assigned_at`, `expires_at`, `is_active`) VALUES (48, 14, 31, '2025-02-01 02:58:59', '2025-08-06 22:16:07', 1);
[DATE-FALLBACK] user_roles.expires_at: Generated 2025-07-30 20:18:59 (within 60 days default)
[DEBUG] Boolean column detected: is_active (bit) -&gt; generating boolean
[DEBUG] Generated SQL for user_roles: INSERT INTO `user_roles` (`user_id`, `role_id`, `assigned_by`, `assigned_at`, `expires_at`, `is_active`) VALUES (49, 15, 32, '2025-01-09 09:04:55', '2025-07-30 20:18:59', 1);
[DATE-FALLBACK] user_roles.expires_at: Generated 2025-07-31 05:41:24 (within 60 days default)
[DEBUG] Boolean column detected: is_active (bit) -&gt; generating boolean
[DEBUG] Generated SQL for user_roles: INSERT INTO `user_roles` (`user_id`, `role_id`, `assigned_by`, `assigned_at`, `expires_at`, `is_active`) VALUES (50, 16, 33, '2025-02-22 08:15:21', '2025-07-31 05:41:24', 1);
[DATE-FALLBACK] user_roles.expires_at: Generated 2025-08-06 05:50:24 (within 60 days default)
[DEBUG] Boolean column detected: is_active (bit) -&gt; generating boolean
[DEBUG] Generated SQL for user_roles: INSERT INTO `user_roles` (`user_id`, `role_id`, `assigned_by`, `assigned_at`, `expires_at`, `is_active`) VALUES (1, 17, 34, '2025-03-30 05:30:01', '2025-08-06 05:50:24', 1);
Performance test completed in 0.01s
Generated statements by table:
  companies: 50 statements
  roles: 50 statements
  user_roles: 50 statements
  users: 50 statements
Total statements: 200</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="e3fec467-7e9a-435c-bad4-f5e2da1ce467" testId="139f964d-2ed3-9b03-c583-30ed1c65c31c" testName="TestExtractConstraints_ExistsSubqueries_ShouldExtractExistsLogic" computerName="cursor" duration="00:00:00.0019469" startTime="2025-07-06T11:01:03.9409069+00:00" endTime="2025-07-06T11:01:03.9429224+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="e3fec467-7e9a-435c-bad4-f5e2da1ce467">
      <Output>
        <StdOut>=== EXISTS SUBQUERIES TEST RESULTS ===
Total Constraints: 4
❌ EXISTS constraints found: 0 (Expected: 0 until implemented)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="cfb42647-795c-47de-8c97-b1d9013aa402" testId="ad397400-55a5-7e01-684f-84fbfd323ba8" testName="LogLevel_Warning_ShouldCreateWarningEntry" computerName="cursor" duration="00:00:00.0004780" startTime="2025-07-06T11:01:03.9288519+00:00" endTime="2025-07-06T11:01:03.9294167+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="cfb42647-795c-47de-8c97-b1d9013aa402">
      <Output>
        <StdOut>[CentralizedLoggingManager] Initialized. Logs directory: /workspace/logs
[CentralizedLoggingManager] Config source: default
[LoggerServiceTests] Using centralized log path: /workspace/logs/test-20250706.log</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="b119550f-613d-48c5-a89a-8fd4d42a9a8a" testId="dfafb6b7-ec58-5275-3925-c481cdb7a34a" testName="TC003_10_ExecuteQueryWithTestDataAsync_MultiTableJoin_WithRealMySQL" computerName="cursor" duration="00:00:00.0056101" startTime="2025-07-06T10:57:03.7339785+00:00" endTime="2025-07-06T10:57:03.7397016+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="b119550f-613d-48c5-a89a-8fd4d42a9a8a">
      <Output>
        <StdOut>[CentralizedLoggingManager] Initialized. Logs directory: /workspace/logs
[CentralizedLoggingManager] Config source: default
[EngineService] Centralized logs directory: /workspace/logs
=== TEST: Multi-Table JOIN với Real MySQL ===
Tables: users, companies, user_roles, roles
Expected: Generate 25 records with proper table dependency order
Gemini API Key Available: False
[EngineService] Starting execution for MySQL
[EngineService] Analyzing query: 675 chars
[SqlMetadataService] Extracting tables from query: 675 chars
[SqlMetadataService] Clean SQL: 
            SELECT u.id, u.username, u.email, u.department,
                   c.name as company_name, c.code as company_code,
                   r.name as role_name, r.level as role_level,
         ...
[SqlMetadataService] Pattern '\bFROM\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)(?:\s+(?:AS\s+)?(\w+))?' found 1 matches
[SqlMetadataService] Match: 'FROM users u'
[SqlMetadataService] Found table: users
[SqlMetadataService] Pattern '\b(?:INNER\s+|LEFT\s+|RIGHT\s+|FULL\s+|OUTER\s+)?JOIN\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)(?:\s+(?:AS\s+)?(\w+))?' found 3 matches
[SqlMetadataService] Match: 'INNER JOIN companies c'
[SqlMetadataService] Found table: companies
[SqlMetadataService] Match: 'INNER JOIN user_roles ur'
[SqlMetadataService] Found table: user_roles
[SqlMetadataService] Match: 'INNER JOIN roles r'
[SqlMetadataService] Found table: roles
[SqlMetadataService] Pattern '\bINTO\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)' found 0 matches
[SqlMetadataService] Pattern '\bUPDATE\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)' found 0 matches
[SqlMetadataService] Pattern '\bINSERT\s+INTO\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)' found 0 matches
[SqlMetadataService] Total tables extracted: 4 - users, companies, user_roles, roles
[EngineService] Metadata extraction failed: Unable to connect to any of the specified MySQL hosts.
[EngineService] Execution failed: Không thể phân tích database schema: Unable to connect to any of the specified MySQL hosts.
[EngineService] Exception type: InvalidOperationException
[EngineService] Inner exception: Unable to connect to any of the specified MySQL hosts.

Workflow Success: False
Generated Records (INSERT statements): 0
Final Query Results (rows returned): 0
Expected connection error: Không thể phân tích database schema: Unable to connect to any of the specified MySQL hosts.
❌ Test FAILED due to connection - EXPECTED without real MySQL</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="e6ac5750-e8e2-4958-810c-c79f180066c0" testId="1e0cca3b-ca0b-0a7f-a62a-a76fda7ff72a" testName="SaveUserSettings_WithValidSettings_ShouldReturnTrue" computerName="cursor" duration="00:00:00.0005388" startTime="2025-07-06T10:57:02.3528731+00:00" endTime="2025-07-06T10:57:02.3534973+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="e6ac5750-e8e2-4958-810c-c79f180066c0" />
    <UnitTestResult executionId="19e2bce4-2134-4a4d-8932-200254235fd6" testId="29d4bc57-5870-c7dc-b85d-667b481ded6c" testName="ParseDateConditions_DateAddWithDays_ShouldParseCorrectly" computerName="cursor" duration="00:00:00.0006378" startTime="2025-07-06T11:03:06.4942869+00:00" endTime="2025-07-06T11:03:06.4949648+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="19e2bce4-2134-4a4d-8932-200254235fd6">
      <Output>
        <StdOut>[SqlMetadataService] Extracting tables from query: 84 chars
[SqlMetadataService] Clean SQL: SELECT * FROM user_roles ur WHERE ur.expires_at &lt;= DATE_ADD(NOW(), INTERVAL 60 DAYS)...
[SqlMetadataService] Pattern '\bFROM\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)(?:\s+(?:AS\s+)?(\w+))?' found 1 matches
[SqlMetadataService] Match: 'FROM user_roles ur'
[SqlMetadataService] Found table: user_roles
[SqlMetadataService] Pattern '\b(?:INNER\s+|LEFT\s+|RIGHT\s+|FULL\s+|OUTER\s+)?JOIN\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)(?:\s+(?:AS\s+)?(\w+))?' found 0 matches
[SqlMetadataService] Pattern '\bINTO\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)' found 0 matches
[SqlMetadataService] Pattern '\bUPDATE\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)' found 0 matches
[SqlMetadataService] Pattern '\bINSERT\s+INTO\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)' found 0 matches
[SqlMetadataService] Total tables extracted: 1 - user_roles
JOIN Debug: Clean query = 'SELECT * FROM user_roles ur WHERE ur.expires_at &lt;= DATE_ADD(NOW(), INTERVAL 60 DAYS)'
JOIN Debug: Pattern = '(?:INNER\s+|LEFT\s+|RIGHT\s+|FULL\s+|OUTER\s+)?JOIN\s+(\w+)\s+(\w+)\s+ON\s+([^()]+?)(?=\s+(?:INNER|LEFT|RIGHT|FULL|OUTER|WHERE|ORDER|GROUP|LIMIT|$)|$)'
JOIN Debug: Found 0 JOIN matches</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="a0377e3d-0383-4f19-9d3b-b8a134dcd09e" testId="03c035d2-b594-de46-1c22-55fd252fe9a7" testName="ConvertToMySQLSyntax_DatetimeYears_ShouldConvertToDateAdd" computerName="cursor" duration="00:00:00.0001078" startTime="2025-07-06T11:01:03.9498755+00:00" endTime="2025-07-06T11:01:03.9500481+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="a0377e3d-0383-4f19-9d3b-b8a134dcd09e">
      <Output>
        <StdOut>✅ Converted: SELECT * FROM users WHERE hire_date &lt;= datetime('now', '-2 years') -&gt; SELECT * FROM users WHERE hire_date &lt;= DATE_SUB(NOW(), INTERVAL 2 YEAR)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="54e36b28-a38b-423d-b625-434ef3f87646" testId="fefd0340-8d73-0ac1-2fb2-b6681d23ead9" testName="ExtractInClauseConstraints_WithNumericList_ShouldExtractCorrectly" computerName="cursor" duration="00:00:00.0009517" startTime="2025-07-06T10:57:02.2574658+00:00" endTime="2025-07-06T10:57:02.2585179+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="54e36b28-a38b-423d-b625-434ef3f87646">
      <Output>
        <StdOut>[10:57:02 INF] Extracting comprehensive constraints from SQL query
[10:57:02 INF] Found WHERE clause: p.category_id IN (1, 2, 3, 5, 8)
[10:57:02 INF] Found IN clause: p.category_id IN (1, 2, 3, 5, 8) - Type: NUMERIC_LIST
[10:57:02 INF] Starting EXISTS constraints extraction with two-phase approach
[10:57:02 INF] Completed EXISTS constraints extraction: 0 NOT EXISTS, 0 EXISTS
[10:57:02 INF] Extracted 1 total constraints: 0 WHERE, 0 JOIN, 0 LIKE, 1 IN, 0 BETWEEN, 0 NULL, 0 EXISTS</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="bffa0fda-5577-4092-aa44-763121fd1732" testId="2f6d1052-3d37-17db-b801-40306c640428" testName="Test_ConstraintValidator_ValidatesVnextLikePattern" computerName="cursor" duration="00:00:00.0043184" startTime="2025-07-06T10:57:02.3738562+00:00" endTime="2025-07-06T10:57:02.3783645+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="bffa0fda-5577-4092-aa44-763121fd1732">
      <Output>
        <StdOut>[DEBUG] GetApiKey() method called
[DEBUG] ConfigurationManager result: '' (length: 0)
[DEBUG] Environment variable result: '' (length: 0)
[DEBUG] Using HARDCODED API key for testing
[DEBUG] Gemini API Key configured: True
[DEBUG] API Key length: 39
[DEBUG] API Key preview: AIzaSyCsOz...
Validation Result: False
Violations Count: 1
Violation: name LIKE %VNEXT%</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="a649994a-42f1-467f-a416-69b4fddf76fb" testId="470a0bfe-993f-05df-1d10-a213d08a730a" testName="SaveUserSettings_WithNullSettings_ShouldReturnFalse" computerName="cursor" duration="00:00:00.0001692" startTime="2025-07-06T10:57:02.3539580+00:00" endTime="2025-07-06T10:57:02.3542037+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="a649994a-42f1-467f-a416-69b4fddf76fb" />
    <UnitTestResult executionId="cf556049-ec6d-4437-8ded-5118b46a9248" testId="9156e5ae-757c-4d5f-9321-7cef7c8ae534" testName="Debug_ExtractConstraints_NoTableAlias_Simple" computerName="cursor" duration="00:00:00.0013951" startTime="2025-07-06T10:57:02.2908963+00:00" endTime="2025-07-06T10:57:02.2923947+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="cf556049-ec6d-4437-8ded-5118b46a9248">
      <Output>
        <StdOut>[10:57:02 INF] Extracting comprehensive constraints from SQL query
[10:57:02 INF] Found WHERE clause: status = 'ACTIVE'
[10:57:02 INF] Found WHERE equality without alias: status = 'ACTIVE'
[10:57:02 INF] Starting EXISTS constraints extraction with two-phase approach
[10:57:02 INF] Completed EXISTS constraints extraction: 0 NOT EXISTS, 0 EXISTS
[10:57:02 INF] Extracted 1 total constraints: 1 WHERE, 0 JOIN, 0 LIKE, 0 IN, 0 BETWEEN, 0 NULL, 0 EXISTS
Simple test - WHERE constraints: 1</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="b3bee123-b3eb-4402-92f2-68531d59dc3d" testId="a47e926a-7ce2-0f09-babb-322e9f60373e" testName="TestMethod1" computerName="cursor" duration="00:00:00.0000888" startTime="2025-07-06T11:03:06.6433627+00:00" endTime="2025-07-06T11:03:06.6448320+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="b3bee123-b3eb-4402-92f2-68531d59dc3d" />
    <UnitTestResult executionId="d4f749e9-9687-4e3c-9cad-78f313310cd1" testId="782553cb-21f7-84ee-e145-2339af4a7fb8" testName="LogMethodExit_ShouldLogWithReturnValue" computerName="cursor" duration="00:00:00.0011965" startTime="2025-07-06T11:01:03.9029710+00:00" endTime="2025-07-06T11:01:03.9042496+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="d4f749e9-9687-4e3c-9cad-78f313310cd1">
      <Output>
        <StdOut>[CentralizedLoggingManager] Initialized. Logs directory: /workspace/logs
[CentralizedLoggingManager] Config source: default
[LoggerServiceTests] Using centralized log path: /workspace/logs/test-20250706.log</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="cccfb7d7-5e48-4c3a-ae0c-7e48e07b5af9" testId="1cc1fb92-e16d-82c2-933a-f52034eb3af8" testName="ExecuteQueryWithTestDataAsync_RealMySQL_SimpleUsers_ShouldWork" computerName="cursor" duration="00:00:00.0057815" startTime="2025-07-06T11:01:03.9884597+00:00" endTime="2025-07-06T11:01:03.9945389+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="cccfb7d7-5e48-4c3a-ae0c-7e48e07b5af9">
      <Output>
        <StdOut>[CentralizedLoggingManager] Initialized. Logs directory: /workspace/logs
[CentralizedLoggingManager] Config source: default
[EngineService] Centralized logs directory: /workspace/logs
=== TEST: ExecuteQueryWithTestDataAsync với Real MySQL ===
Connection: MySQL 8.4 server (192.84.20.226)
SQL: SELECT * FROM users 
            WHERE is_active = 1 
            ORDER BY created_at DESC 
            LIMIT 10

=== EXECUTING TEST ===
[EngineService] Starting execution for MySQL
[EngineService] Analyzing query: 125 chars
[SqlMetadataService] Extracting tables from query: 125 chars
[SqlMetadataService] Clean SQL: 
            SELECT * FROM users 
            WHERE is_active = 1 
            ORDER BY created_at DESC 
            LIMIT 10...
[SqlMetadataService] Pattern '\bFROM\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)(?:\s+(?:AS\s+)?(\w+))?' found 1 matches
[SqlMetadataService] Match: 'FROM users 
            WHERE'
[SqlMetadataService] Found table: users
[SqlMetadataService] Pattern '\b(?:INNER\s+|LEFT\s+|RIGHT\s+|FULL\s+|OUTER\s+)?JOIN\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)(?:\s+(?:AS\s+)?(\w+))?' found 0 matches
[SqlMetadataService] Pattern '\bINTO\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)' found 0 matches
[SqlMetadataService] Pattern '\bUPDATE\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)' found 0 matches
[SqlMetadataService] Pattern '\bINSERT\s+INTO\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)' found 0 matches
[SqlMetadataService] Total tables extracted: 1 - users
[EngineService] Metadata extraction failed: Unable to connect to any of the specified MySQL hosts.
[EngineService] Execution failed: Không thể phân tích database schema: Unable to connect to any of the specified MySQL hosts.
[EngineService] Exception type: InvalidOperationException
[EngineService] Inner exception: Unable to connect to any of the specified MySQL hosts.

=== RESULTS ===
Success: False
Execution Time: 0.00 seconds
Generated Records: 0
Error (if any): Không thể phân tích database schema: Unable to connect to any of the specified MySQL hosts.
❌ FAILURE: Test failed but this provides valuable debugging info</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="7a19e5cb-5155-432e-b761-15c48ae86e05" testId="87db66e8-3797-2582-a71f-466884f912da" testName="LogError_WithException_ShouldCaptureExceptionDetails" computerName="cursor" duration="00:00:00.0027279" startTime="2025-07-06T11:01:03.8977589+00:00" endTime="2025-07-06T11:01:03.9005758+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="7a19e5cb-5155-432e-b761-15c48ae86e05">
      <Output>
        <StdOut>[CentralizedLoggingManager] Initialized. Logs directory: /workspace/logs
[CentralizedLoggingManager] Config source: default
[LoggerServiceTests] Using centralized log path: /workspace/logs/test-20250706.log
[LogError_WithException] Log file content: 2025-07-06 11:01:03.893 | INFORMATION [TEST_CONTEXT] | Test info message | Params: {"TestParam":"value"}
2025-07-06 11:01:03.898 | ERROR       [ERROR_CONTEXT] | Test error message | Exception: Test exception</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="ffface09-932f-4bf1-b03a-2d54e7513e2d" testId="6f75d98a-bfe6-3583-9772-f6c9d7fc53a6" testName="TestDataGenServiceWithAI" computerName="cursor" duration="00:00:00.0018733" startTime="2025-07-06T10:57:01.8362465+00:00" endTime="2025-07-06T10:57:01.8383834+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="ffface09-932f-4bf1-b03a-2d54e7513e2d">
      <Output>
        <StdOut>Testing DataGenService with AI integration
API Key available: False
✅ DataGenService with AI initialized successfully</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="01d6c1de-b07c-4b32-8e1f-9eec98598cf2" testId="4910f641-4998-8515-a7d2-a2f20f653df7" testName="ConvertToMySQLSyntax_ComplexCaseWithMultipleDateFunctions_ShouldConvertAll" computerName="cursor" duration="00:00:00.0001548" startTime="2025-07-06T11:01:03.9514655+00:00" endTime="2025-07-06T11:01:03.9516870+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="01d6c1de-b07c-4b32-8e1f-9eec98598cf2">
      <Output>
        <StdOut>✅ Complex CASE statement converted successfully</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="8755a014-3339-4d0d-a794-77c2ee46df0c" testId="2ecdc9b2-a817-8237-c422-4f63f0d355d8" testName="ExtractBetweenConstraints_WithNumericValues_ShouldExtractCorrectly" computerName="cursor" duration="00:00:00.0017538" startTime="2025-07-06T10:57:02.2627614+00:00" endTime="2025-07-06T10:57:02.2646011+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="8755a014-3339-4d0d-a794-77c2ee46df0c">
      <Output>
        <StdOut>[10:57:02 INF] Extracting comprehensive constraints from SQL query
[10:57:02 INF] Found WHERE clause: p.price BETWEEN 100 AND 500 AND p.stock &gt; 0
[10:57:02 INF] Found WHERE comparison with alias: p.stock &gt; '0'
[10:57:02 INF] Found BETWEEN constraint: p.price BETWEEN '100' AND '500' - Type: NUMERIC
[10:57:02 INF] Starting EXISTS constraints extraction with two-phase approach
[10:57:02 INF] Completed EXISTS constraints extraction: 0 NOT EXISTS, 0 EXISTS
[10:57:02 INF] Extracted 2 total constraints: 1 WHERE, 0 JOIN, 0 LIKE, 0 IN, 1 BETWEEN, 0 NULL, 0 EXISTS</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="63875ac4-3bb6-43bc-a9ab-d41168099eb2" testId="b625b9c7-136a-f400-db5f-f7386e06c9f3" testName="TestExtractConstraints_MalformedSQL_ShouldHandleGracefully" computerName="cursor" duration="00:00:00.0016812" startTime="2025-07-06T11:01:03.9453081+00:00" endTime="2025-07-06T11:01:03.9471143+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="63875ac4-3bb6-43bc-a9ab-d41168099eb2">
      <Output>
        <StdOut>=== MALFORMED SQL TEST RESULTS ===
Total Constraints: 0
✅ Handled malformed SQL gracefully without exception</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="5b528287-50ee-4ec0-83a2-37f469b54498" testId="73b4e0f6-cf3c-19a3-0ea6-75f4d1acac05" testName="GenerateBogusData_Roles_ShouldCreateRoleData" computerName="cursor" duration="00:00:00.0098511" startTime="2025-07-06T10:57:02.0367021+00:00" endTime="2025-07-06T10:57:02.0466434+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="5b528287-50ee-4ec0-83a2-37f469b54498">
      <Output>
        <StdOut>[DEBUG] Table roles has 5 columns:
[DEBUG] Column: id, IsIdentity: True, IsGenerated: False, DefaultValue: ''
[DEBUG] Column: name, IsIdentity: False, IsGenerated: False, DefaultValue: ''
[DEBUG] Column: code, IsIdentity: False, IsGenerated: False, DefaultValue: ''
[DEBUG] Column: description, IsIdentity: False, IsGenerated: False, DefaultValue: ''
[DEBUG] Column: created_at, IsIdentity: False, IsGenerated: False, DefaultValue: ''
[DEBUG-T021] Filtered columns for roles: 4 columns (from 5 total)
[DEBUG-T021] Excluded columns: id(Identity:True,Generated:False)
[DEBUG-T021] Included columns: name, code, description, created_at
[DEBUG-T021] Generated SQL for roles: INSERT INTO `roles` (`name`, `code`, `description`, `created_at`) VALUES ('Arely Simonis', 'CODE_56949_001', 'Sit et nihil.', '2024-12-09 08:46:44');
[DEBUG-T021] Generated SQL for roles: INSERT INTO `roles` (`name`, `code`, `description`, `created_at`) VALUES ('Rupert Ledner', 'CODE_64235_002', 'Quod expedita deleniti.', '2024-10-15 07:12:44');
[DEBUG-T021] Generated SQL for roles: INSERT INTO `roles` (`name`, `code`, `description`, `created_at`) VALUES ('Jettie Marks', 'CODE_64668_003', 'Odio nisi ab.', '2025-04-29 18:42:17');
[DEBUG-T021] Generated SQL for roles: INSERT INTO `roles` (`name`, `code`, `description`, `created_at`) VALUES ('Royce Zemlak', 'CODE_64932_004', 'Inventore distinctio voluptas.', '2025-03-04 18:38:26');
[DEBUG-T021] Generated SQL for roles: INSERT INTO `roles` (`name`, `code`, `description`, `created_at`) VALUES ('Denis Marquardt', 'CODE_65174_005', 'Eos ratione eius.', '2025-02-11 18:28:32');
Generated 5 role statements
Role: INSERT INTO `roles` (`name`, `code`, `description`, `created_at`) VALUES ('Arely Simonis', 'CODE_56949_001', 'Sit et nih...
Role: INSERT INTO `roles` (`name`, `code`, `description`, `created_at`) VALUES ('Rupert Ledner', 'CODE_64235_002', 'Quod exped...
Role: INSERT INTO `roles` (`name`, `code`, `description`, `created_at`) VALUES ('Jettie Marks', 'CODE_64668_003', 'Odio nisi a...
Role: INSERT INTO `roles` (`name`, `code`, `description`, `created_at`) VALUES ('Royce Zemlak', 'CODE_64932_004', 'Inventore d...
Role: INSERT INTO `roles` (`name`, `code`, `description`, `created_at`) VALUES ('Denis Marquardt', 'CODE_65174_005', 'Eos rati...</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="d0a706e6-c3a9-408a-9307-d39e8998a797" testId="08b6ce0a-2ce9-b04e-8168-c06998ed03af" testName="TestModelStatistics" computerName="cursor" duration="00:00:00.0004746" startTime="2025-07-06T10:57:03.6194889+00:00" endTime="2025-07-06T10:57:03.6200597+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="d0a706e6-c3a9-408a-9307-d39e8998a797">
      <Output>
        <StdOut>✅ Model Statistics Test Passed
\ud83d\udd04 Total Models: 13
\ud83d\udc9a Healthy Models: 13
\ud83d\udccd Current Index: 1
\ud83c\udff7️ Latest: 2 models
\ud83c\udff7️ Stable: 6 models
\ud83c\udff7️ Experimental: 1 models
\ud83c\udff7️ Lite: 4 models</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="6da48fc9-f66b-4cda-bea8-0bc611b64f97" testId="c6fc10ce-1b8c-db5d-82b8-35ec909d3152" testName="ExtractTablesFromQuery_VietnameseComments_ShouldIgnoreComments" computerName="cursor" duration="00:00:00.0003737" startTime="2025-07-06T10:57:02.1048987+00:00" endTime="2025-07-06T10:57:02.1053690+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="6da48fc9-f66b-4cda-bea8-0bc611b64f97">
      <Output>
        <StdOut>[SqlMetadataService] Extracting tables from query: 677 chars
[SqlMetadataService] Clean SQL: 
            
            SELECT u.id, u.username, u.first_name 
            FROM users u 
            INNER JOIN companies c ON u.company_id = c.id 
            
            INNER JOIN user_roles ur ...
[SqlMetadataService] Pattern '\bFROM\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)(?:\s+(?:AS\s+)?(\w+))?' found 1 matches
[SqlMetadataService] Match: 'FROM users u'
[SqlMetadataService] Found table: users
[SqlMetadataService] Pattern '\b(?:INNER\s+|LEFT\s+|RIGHT\s+|FULL\s+|OUTER\s+)?JOIN\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)(?:\s+(?:AS\s+)?(\w+))?' found 3 matches
[SqlMetadataService] Match: 'INNER JOIN companies c'
[SqlMetadataService] Found table: companies
[SqlMetadataService] Match: 'INNER JOIN user_roles ur'
[SqlMetadataService] Found table: user_roles
[SqlMetadataService] Match: 'INNER JOIN roles r'
[SqlMetadataService] Found table: roles
[SqlMetadataService] Pattern '\bINTO\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)' found 0 matches
[SqlMetadataService] Pattern '\bUPDATE\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)' found 0 matches
[SqlMetadataService] Pattern '\bINSERT\s+INTO\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)' found 0 matches
[SqlMetadataService] Total tables extracted: 4 - users, companies, user_roles, roles
Vietnamese commented SQL extracted: users, companies, user_roles, roles</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="76100e16-125e-4ba3-ab64-127c13a81e65" testId="f923bec6-3c0e-bda5-5e19-b629ccceef3f" testName="ClearLogs_ShouldRemoveAllEntries" computerName="cursor" duration="00:00:00.0006239" startTime="2025-07-06T11:01:03.9266371+00:00" endTime="2025-07-06T11:01:03.9274056+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="76100e16-125e-4ba3-ab64-127c13a81e65">
      <Output>
        <StdOut>[CentralizedLoggingManager] Initialized. Logs directory: /workspace/logs
[CentralizedLoggingManager] Config source: default
[LoggerServiceTests] Using centralized log path: /workspace/logs/test-20250706.log</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="d225720a-e74e-4098-9663-e621b31a1ec8" testId="d4ded20d-d3b9-1442-571c-f7dc6b78c680" testName="ExtractExistsConstraints_WithExists_ShouldExtractCorrectly" computerName="cursor" duration="00:00:00.0012270" startTime="2025-07-06T10:57:02.2793948+00:00" endTime="2025-07-06T10:57:02.2807024+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="d225720a-e74e-4098-9663-e621b31a1ec8">
      <Output>
        <StdOut>[10:57:02 INF] Extracting comprehensive constraints from SQL query
[10:57:02 INF] Found WHERE clause: EXISTS ( SELECT 1 FROM orders o WHERE o.customer_id = c.id AND o.status = 'completed' )
[10:57:02 INF] Found WHERE equality with alias: o.status = 'completed'
[10:57:02 INF] Starting EXISTS constraints extraction with two-phase approach
[10:57:02 INF] Found EXISTS constraint: EXISTS (SELECT 1 FROM orders o WHERE o.customer_id = c.id AND o.status = 'completed')
[10:57:02 INF] Completed EXISTS constraints extraction: 0 NOT EXISTS, 1 EXISTS
[10:57:02 INF] Extracted 2 total constraints: 1 WHERE, 0 JOIN, 0 LIKE, 0 IN, 0 BETWEEN, 0 NULL, 1 EXISTS</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="b54a3a69-afd6-41e5-a6dd-216880c1b33d" testId="7abc8d24-30d3-d6e8-72dd-cc35953c0c69" testName="ConvertToMySQLSyntax_DatetimePluralUnits_ShouldNormalize" computerName="cursor" duration="00:00:00.0001175" startTime="2025-07-06T11:01:03.9502604+00:00" endTime="2025-07-06T11:01:03.9504428+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="b54a3a69-afd6-41e5-a6dd-216880c1b33d">
      <Output>
        <StdOut>✅ Converted: WHERE expires_at &lt;= datetime('now', '+60 days') AND created_at &gt;= datetime('now', '-3 months') -&gt; WHERE expires_at &lt;= DATE_ADD(NOW(), INTERVAL 60 DAY) AND created_at &gt;= DATE_SUB(NOW(), INTERVAL 3 MONTH)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="988eca9b-984a-4409-81bc-7b8215008185" testId="4a6b38d9-9cf7-4db2-da35-a8b63d506daa" testName="ExtractInClauseConstraints_WithStringList_ShouldExtractCorrectly" computerName="cursor" duration="00:00:00.0054320" startTime="2025-07-06T10:57:02.2512048+00:00" endTime="2025-07-06T10:57:02.2567250+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="988eca9b-984a-4409-81bc-7b8215008185">
      <Output>
        <StdOut>[10:57:02 INF] Extracting comprehensive constraints from SQL query
[10:57:02 INF] Found WHERE clause: e.department IN ('HR', 'Finance', 'Engineering') AND e.status = 'active'
[10:57:02 INF] Found WHERE equality with alias: e.status = 'active'
[10:57:02 INF] Found IN clause: e.department IN (HR, Finance, Engineering) - Type: STRING_LIST
[10:57:02 INF] Starting EXISTS constraints extraction with two-phase approach
[10:57:02 INF] Completed EXISTS constraints extraction: 0 NOT EXISTS, 0 EXISTS
[10:57:02 INF] Extracted 2 total constraints: 1 WHERE, 0 JOIN, 0 LIKE, 1 IN, 0 BETWEEN, 0 NULL, 0 EXISTS</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="e133febe-c8d7-4c5c-8202-b91a453effeb" testId="181dabdf-6994-9cd1-332b-f3a238c352e6" testName="ConvertToMySQLSyntax_BusinessQuery_ShouldFixAllIssues" computerName="cursor" duration="00:00:00.0001881" startTime="2025-07-06T11:01:03.9557936+00:00" endTime="2025-07-06T11:01:03.9560494+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="e133febe-c8d7-4c5c-8202-b91a453effeb">
      <Output>
        <StdOut>✅ Business query converted successfully to MySQL
Original contained datetime syntax, converted version is clean</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="1733f63f-4314-420a-b805-05040f612e6b" testId="78800cf4-c501-8eb0-8d10-d522b560fff2" testName="ParseQuery_MySqlDateFunction_HandlesCorrectly" computerName="cursor" duration="00:00:00.0008270" startTime="2025-07-06T11:03:06.6359920+00:00" endTime="2025-07-06T11:03:06.6368602+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="1733f63f-4314-420a-b805-05040f612e6b">
      <Output>
        <StdOut>[SqlMetadataService] Extracting tables from query: 103 chars
[SqlMetadataService] Clean SQL: SELECT * FROM orders o WHERE o.created_date &lt;= DATE_ADD(NOW(), INTERVAL 30 DAY) AND o.status = 'active'...
[SqlMetadataService] Pattern '\bFROM\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)(?:\s+(?:AS\s+)?(\w+))?' found 1 matches
[SqlMetadataService] Match: 'FROM orders o'
[SqlMetadataService] Found table: orders
[SqlMetadataService] Pattern '\b(?:INNER\s+|LEFT\s+|RIGHT\s+|FULL\s+|OUTER\s+)?JOIN\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)(?:\s+(?:AS\s+)?(\w+))?' found 0 matches
[SqlMetadataService] Pattern '\bINTO\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)' found 0 matches
[SqlMetadataService] Pattern '\bUPDATE\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)' found 0 matches
[SqlMetadataService] Pattern '\bINSERT\s+INTO\s+(?:(?:\w+\.)?(\w+)|\[([^\]]+)\]|`([^`]+)`)' found 0 matches
[SqlMetadataService] Total tables extracted: 1 - orders
Extracted 2 WHERE conditions
- o.created_date DATE_WITHIN 30_DAY
- o.status = active</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="6bd5df5f-147c-40be-b86f-b3240710c347" testId="1fb00485-e7e0-f10c-e5ab-349cf56d0767" testName="TestExtractConstraints_BetweenOperators_ShouldExtractRanges" computerName="cursor" duration="00:00:00.0016867" startTime="2025-07-06T10:57:03.7083559+00:00" endTime="2025-07-06T10:57:03.7101646+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="6bd5df5f-147c-40be-b86f-b3240710c347">
      <Output>
        <StdOut>=== BETWEEN OPERATORS TEST RESULTS ===
BETWEEN Constraints: 3
BETWEEN: u.salary BETWEEN '5000000' AND '10000000' - Type: NUMERIC
BETWEEN: u.hire_date BETWEEN '2020-01-01' AND '2023-12-31' - Type: DATE
BETWEEN: u.age BETWEEN '25' AND '65' - Type: NUMERIC
✅ BETWEEN operators extraction test passed</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="bd9baecf-dab2-4d46-b4b9-9fc2dd5ee0a3" testId="fcb2ca1e-19a6-4e0c-9949-28148335f239" testName="GenerateBogusData_Users_ShouldCreateUserData" computerName="cursor" duration="00:00:00.0698043" startTime="2025-07-06T10:57:01.9564445+00:00" endTime="2025-07-06T10:57:02.0265780+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="bd9baecf-dab2-4d46-b4b9-9fc2dd5ee0a3">
      <Output>
        <StdOut>[DEBUG] Table users has 12 columns:
[DEBUG] Column: id, IsIdentity: True, IsGenerated: False, DefaultValue: ''
[DEBUG] Column: username, IsIdentity: False, IsGenerated: False, DefaultValue: ''
[DEBUG] Column: first_name, IsIdentity: False, IsGenerated: False, DefaultValue: ''
[DEBUG] Column: last_name, IsIdentity: False, IsGenerated: False, DefaultValue: ''
[DEBUG] Column: email, IsIdentity: False, IsGenerated: False, DefaultValue: ''
[DEBUG] Column: date_of_birth, IsIdentity: False, IsGenerated: False, DefaultValue: ''
[DEBUG] Column: salary, IsIdentity: False, IsGenerated: False, DefaultValue: ''
[DEBUG] Column: department, IsIdentity: False, IsGenerated: False, DefaultValue: ''
[DEBUG] Column: hire_date, IsIdentity: False, IsGenerated: False, DefaultValue: ''
[DEBUG] Column: company_id, IsIdentity: False, IsGenerated: False, DefaultValue: ''
[DEBUG] Column: is_active, IsIdentity: False, IsGenerated: False, DefaultValue: ''
[DEBUG] Column: created_at, IsIdentity: False, IsGenerated: False, DefaultValue: ''
[DEBUG-T021] Filtered columns for users: 11 columns (from 12 total)
[DEBUG-T021] Excluded columns: id(Identity:True,Generated:False)
[DEBUG-T021] Included columns: username, first_name, last_name, email, date_of_birth, salary, department, hire_date, company_id, is_active, created_at
[DEBUG] Boolean column detected: is_active (bit) -&gt; generating boolean
[DEBUG-T021] Generated SQL for users: INSERT INTO `users` (`username`, `first_name`, `last_name`, `email`, `date_of_birth`, `salary`, `department`, `hire_date`, `company_id`, `is_active`, `created_at`) VALUES ('Lia92', 'Nigel', 'Purdy', 'Fay_Bogisich@gmail.com', '2001-12-26', 120904.65, 'Kids &amp; Kids', '2016-07-14 06:01:34', 31, 0, '2025-05-28 09:39:09');
[DEBUG] Boolean column detected: is_active (bit) -&gt; generating boolean
[DEBUG-T021] Generated SQL for users: INSERT INTO `users` (`username`, `first_name`, `last_name`, `email`, `date_of_birth`, `salary`, `department`, `hire_date`, `company_id`, `is_active`, `created_at`) VALUES ('Loren_Kreiger', 'Princess', 'Fahey', 'Oda.Keebler83@hotmail.com', '1975-04-17', 90475.13, 'Clothing &amp; Home', '2020-06-09 23:53:57', 67, 0, '2025-05-21 22:55:06');
[DEBUG] Boolean column detected: is_active (bit) -&gt; generating boolean
[DEBUG-T021] Generated SQL for users: INSERT INTO `users` (`username`, `first_name`, `last_name`, `email`, `date_of_birth`, `salary`, `department`, `hire_date`, `company_id`, `is_active`, `created_at`) VALUES ('Mylene89', 'Damaris', 'Anderson', 'Reanna.Cronin52@yahoo.com', '1999-07-31', 87939.79, 'Movies, Kids &amp; Books', '2021-10-01 09:35:49', 45, 1, '2024-12-26 11:17:21');
[DEBUG] Boolean column detected: is_active (bit) -&gt; generating boolean
[DEBUG-T021] Generated SQL for users: INSERT INTO `users` (`username`, `first_name`, `last_name`, `email`, `date_of_birth`, `salary`, `department`, `hire_date`, `company_id`, `is_active`, `created_at`) VALUES ('Kayley4', 'Cayla', 'Mante', 'Jermain.Kreiger@yahoo.com', '1998-02-11', 183468.93, 'Beauty, Health &amp; Shoes', '2016-10-12 09:44:49', 45, 0, '2024-09-16 07:20:05');
[DEBUG] Boolean column detected: is_active (bit) -&gt; generating boolean
[DEBUG-T021] Generated SQL for users: INSERT INTO `users` (`username`, `first_name`, `last_name`, `email`, `date_of_birth`, `salary`, `department`, `hire_date`, `company_id`, `is_active`, `created_at`) VALUES ('Otis43', 'Adeline', 'Zboncak', 'Elenora.Hauck@hotmail.com', '1960-10-13', 162533.13, 'Grocery, Sports &amp; Home', '2022-06-29 09:35:03', 4, 1, '2025-07-02 06:40:33');
Generated 5 user statements
Sample: INSERT INTO `users` (`username`, `first_name`, `last_name`, `email`, `date_of_birth`, `salary`, `dep...
Sample: INSERT INTO `users` (`username`, `first_name`, `last_name`, `email`, `date_of_birth`, `salary`, `dep...</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="0bd46ccd-8d9c-482e-a817-ec36d591dc56" testId="945c5a29-a83a-bb9e-d813-f6a456412c4c" testName="ValidateMySQLSyntax_ValidMySQLQuery_ShouldReturnTrue" computerName="cursor" duration="00:00:00.0000984" startTime="2025-07-06T11:01:03.9529886+00:00" endTime="2025-07-06T11:01:03.9531561+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="0bd46ccd-8d9c-482e-a817-ec36d591dc56">
      <Output>
        <StdOut>✅ Valid MySQL syntax recognized</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="275b5f7d-8dae-4108-a75e-d958a1244995" testId="a8c55508-0818-7079-489b-cfa127cdf6c5" testName="ExtractJoinConstraints_WithAdditionalConditions_ShouldExtractBoth" computerName="cursor" duration="00:00:00.0018553" startTime="2025-07-06T10:57:02.2395060+00:00" endTime="2025-07-06T10:57:02.2414600+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="275b5f7d-8dae-4108-a75e-d958a1244995">
      <Output>
        <StdOut>[10:57:02 INF] Extracting comprehensive constraints from SQL query
[10:57:02 INF] Processing JOIN: user_roles ur ON u.id = ur.user_id AND ur.is_active = 'TRUE'
[10:57:02 INF] Found JOIN additional constraint: ur.is_active = 'TRUE'
[10:57:02 INF] Processing JOIN: roles r ON ur.role_id = r.id
[10:57:02 INF] Starting EXISTS constraints extraction with two-phase approach
[10:57:02 INF] Completed EXISTS constraints extraction: 0 NOT EXISTS, 0 EXISTS
[10:57:02 INF] Extracted 3 total constraints: 0 WHERE, 3 JOIN, 0 LIKE, 0 IN, 0 BETWEEN, 0 NULL, 0 EXISTS</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="5da01556-7fe4-45b6-baf1-451eb2e5dc59" testId="e180762e-d5f1-31a1-a39f-da1a238da0a2" testName="TestExtractConstraints_InClauseNumericList_ShouldExtractValues" computerName="cursor" duration="00:00:00.0015320" startTime="2025-07-06T10:57:03.7039408+00:00" endTime="2025-07-06T10:57:03.7055669+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="5da01556-7fe4-45b6-baf1-451eb2e5dc59">
      <Output>
        <StdOut>=== IN CLAUSE NUMERIC LIST TEST RESULTS ===
IN Clause Constraints: 2
IN: u.status_id IN (1, 2, 3, 5) - Type: NUMERIC_LIST
IN: u.level IN (10, 20, 30) - Type: NUMERIC_LIST
✅ IN clause numeric list extraction test passed</StdOut>
      </Output>
    </UnitTestResult>
  </Results>
  <TestDefinitions>
    <UnitTest name="TestCloudMySQL_AlternativeProviders" storage="/workspace/sqltestdatagenerator.tests/bin/debug/net8.0/sqltestdatagenerator.tests.dll" id="2cb2f523-d773-3e66-7075-be5cb7772187">
      <TestCategory>
        <TestCategoryItem TestCategory="ConnectionTest" />
      </TestCategory>
      <Execution id="109f85a5-abd5-4c42-8ea7-64ec281a15dd" />
      <TestMethod codeBase="/workspace/SqlTestDataGenerator.Tests/bin/Debug/net8.0/SqlTestDataGenerator.Tests.dll" adapterTypeName="executor://mstestadapter/v2" className="SqlTestDataGenerator.Tests.DatabaseConnectionTest" name="TestCloudMySQL_AlternativeProviders" />
    </UnitTest>
    <UnitTest name="Test_ProveTC001Fix_FallbackOnly" storage="/workspace/sqltestdatagenerator.tests/bin/debug/net8.0/sqltestdatagenerator.tests.dll" id="c2d4e3da-39f1-e45c-38d4-6c5a31def722">
      <TestCategory>
        <TestCategoryItem TestCategory="Constraint-Aware" />
      </TestCategory>
      <Execution id="80f5e726-b4b6-483a-ab2c-05685ec0bdda" />
      <TestMethod codeBase="/workspace/SqlTestDataGenerator.Tests/bin/Debug/net8.0/SqlTestDataGenerator.Tests.dll" adapterTypeName="executor://mstestadapter/v2" className="SqlTestDataGenerator.Tests.ConstraintAwareGenerationTests" name="Test_ProveTC001Fix_FallbackOnly" />
    </UnitTest>
    <UnitTest name="ExtractInClauseConstraints_WithNumericList_ShouldExtractCorrectly" storage="/workspace/sqltestdatagenerator.tests/bin/debug/net8.0/sqltestdatagenerator.tests.dll" id="fefd0340-8d73-0ac1-2fb2-b6681d23ead9">
      <TestCategory>
        <TestCategoryItem TestCategory="ComprehensiveConstraints" />
      </TestCategory>
      <Execution id="54e36b28-a38b-423d-b625-434ef3f87646" />
      <TestMethod codeBase="/workspace/SqlTestDataGenerator.Tests/bin/Debug/net8.0/SqlTestDataGenerator.Tests.dll" adapterTypeName="executor://mstestadapter/v2" className="SqlTestDataGenerator.Tests.ComprehensiveConstraintExtractorTests" name="ExtractInClauseConstraints_WithNumericList_ShouldExtractCorrectly" />
    </UnitTest>
    <UnitTest name="ExecuteQueryWithTestDataAsync_VowisSQL_ShouldNotProduceDuplicateKeys" storage="/workspace/sqltestdatagenerator.tests/bin/debug/net8.0/sqltestdatagenerator.tests.dll" id="20e93dd1-82ff-4a3f-b298-50de6537d959">
      <TestCategory>
        <TestCategoryItem TestCategory="MySQLIntegration" />
      </TestCategory>
      <Execution id="2506d76b-0783-44d6-aefc-5dce7f7e7893" />
      <TestMethod codeBase="/workspace/SqlTestDataGenerator.Tests/bin/Debug/net8.0/SqlTestDataGenerator.Tests.dll" adapterTypeName="executor://mstestadapter/v2" className="SqlTestDataGenerator.Tests.MySQLIntegrationDuplicateKeyTests" name="ExecuteQueryWithTestDataAsync_VowisSQL_ShouldNotProduceDuplicateKeys" />
    </UnitTest>
    <UnitTest name="ConvertToMySQLSyntax_DatetimeDays_ShouldConvertToDateAdd" storage="/workspace/sqltestdatagenerator.tests/bin/debug/net8.0/sqltestdatagenerator.tests.dll" id="6b06fba3-635d-2f05-f63d-ba794c09660f">
      <TestCategory>
        <TestCategoryItem TestCategory="MySQLDateConverter" />
      </TestCategory>
      <Execution id="21d5fc8e-c18c-4b28-95b3-c2ded362b413" />
      <TestMethod codeBase="/workspace/SqlTestDataGenerator.Tests/bin/Debug/net8.0/SqlTestDataGenerator.Tests.dll" adapterTypeName="executor://mstestadapter/v2" className="SqlTestDataGenerator.Tests.MySQLDateFunctionConverterTests" name="ConvertToMySQLSyntax_DatetimeDays_ShouldConvertToDateAdd" />
    </UnitTest>
    <UnitTest name="ExtractTablesFromQuery_ComplexSQL_ShouldReturnAllTables" storage="/workspace/sqltestdatagenerator.tests/bin/debug/net8.0/sqltestdatagenerator.tests.dll" id="d8a2d2ae-737f-6b91-1529-4bb418d9ea60">
      <Execution id="b98826ed-1881-49c5-872e-92531fc542e3" />
      <TestMethod codeBase="/workspace/SqlTestDataGenerator.Tests/bin/Debug/net8.0/SqlTestDataGenerator.Tests.dll" adapterTypeName="executor://mstestadapter/v2" className="SqlTestDataGenerator.Tests.ComplexSqlGenerationTests" name="ExtractTablesFromQuery_ComplexSQL_ShouldReturnAllTables" />
    </UnitTest>
    <UnitTest name="TestConstraintExtractorInitialization" storage="/workspace/sqltestdatagenerator.tests/bin/debug/net8.0/sqltestdatagenerator.tests.dll" id="b5bfaf3f-f554-a3c7-5b59-e536fcbe0296">
      <TestCategory>
        <TestCategoryItem TestCategory="AI-Basic" />
      </TestCategory>
      <Execution id="a7e67a03-107c-451a-b3af-10d226996bc9" />
      <TestMethod codeBase="/workspace/SqlTestDataGenerator.Tests/bin/Debug/net8.0/SqlTestDataGenerator.Tests.dll" adapterTypeName="executor://mstestadapter/v2" className="SqlTestDataGenerator.Tests.AIIntegrationBasicTest" name="TestConstraintExtractorInitialization" />
    </UnitTest>
    <UnitTest name="ExtractBetweenConstraints_WithNumericValues_ShouldExtractCorrectly" storage="/workspace/sqltestdatagenerator.tests/bin/debug/net8.0/sqltestdatagenerator.tests.dll" id="2ecdc9b2-a817-8237-c422-4f63f0d355d8">
      <TestCategory>
        <TestCategoryItem TestCategory="ComprehensiveConstraints" />
      </TestCategory>
      <Execution id="8755a014-3339-4d0d-a794-77c2ee46df0c" />
      <TestMethod codeBase="/workspace/SqlTestDataGenerator.Tests/bin/Debug/net8.0/SqlTestDataGenerator.Tests.dll" adapterTypeName="executor://mstestadapter/v2" className="SqlTestDataGenerator.Tests.ComprehensiveConstraintExtractorTests" name="ExtractBetweenConstraints_WithNumericValues_ShouldExtractCorrectly" />
    </UnitTest>
    <UnitTest name="GenerateBogusData_UserRoles_ShouldCreateUserRoleData" storage="/workspace/sqltestdatagenerator.tests/bin/debug/net8.0/sqltestdatagenerator.tests.dll" id="d58b23b9-e1a6-68ae-1268-135ff59cc20d">
      <Execution id="8b33fddd-f50e-4abf-aa29-82025f04a768" />
      <TestMethod codeBase="/workspace/SqlTestDataGenerator.Tests/bin/Debug/net8.0/SqlTestDataGenerator.Tests.dll" adapterTypeName="executor://mstestadapter/v2" className="SqlTestDataGenerator.Tests.ComplexDataGenerationTests" name="GenerateBogusData_UserRoles_ShouldCreateUserRoleData" />
    </UnitTest>
    <UnitTest name="ExecuteQueryWithTestDataAsync_RealMySQL_VowisBusinessSQL_ShouldWork" storage="/workspace/sqltestdatagenerator.tests/bin/debug/net8.0/sqltestdatagenerator.tests.dll" id="4c428cc8-3af4-6e55-220b-111a2265bce0">
      <TestCategory>
        <TestCategoryItem TestCategory="RealMySQL" />
      </TestCategory>
      <Execution id="5988d45e-8023-4583-91ca-02e2fc15c8fb" />
      <TestMethod codeBase="/workspace/SqlTestDataGenerator.Tests/bin/Debug/net8.0/SqlTestDataGenerator.Tests.dll" adapterTypeName="executor://mstestadapter/v2" className="SqlTestDataGenerator.Tests.RealMySQLIntegrationTests" name="ExecuteQueryWithTestDataAsync_RealMySQL_VowisBusinessSQL_ShouldWork" />
    </UnitTest>
    <UnitTest name="TestLocalMySQL_ShouldConnect" storage="/workspace/sqltestdatagenerator.tests/bin/debug/net8.0/sqltestdatagenerator.tests.dll" id="8297bd83-583e-3f19-5a11-4d86695f0918">
      <TestCategory>
        <TestCategoryItem TestCategory="ConnectionTest" />
      </TestCategory>
      <Execution id="f691ef88-2838-4a5b-83bf-ab71c317a606" />
      <TestMethod codeBase="/workspace/SqlTestDataGenerator.Tests/bin/Debug/net8.0/SqlTestDataGenerator.Tests.dll" adapterTypeName="executor://mstestadapter/v2" className="SqlTestDataGenerator.Tests.DatabaseConnectionTest" name="TestLocalMySQL_ShouldConnect" />
    </UnitTest>
    <UnitTest name="UTF8Encoding_ConnectionString_ShouldIncludeCharset" storage="/workspace/sqltestdatagenerator.tests/bin/debug/net8.0/sqltestdatagenerator.tests.dll" id="91cf582a-d7c9-0374-af53-13b473bf0efd">
      <TestCategory>
        <TestCategoryItem TestCategory="DateAddUTF8Fixes" />
      </TestCategory>
      <Execution id="daacac5a-93b7-4318-90fc-64a9ef6c1ff2" />
      <TestMethod codeBase="/workspace/SqlTestDataGenerator.Tests/bin/Debug/net8.0/SqlTestDataGenerator.Tests.dll" adapterTypeName="executor://mstestadapter/v2" className="SqlTestDataGenerator.Tests.SqlDateAddUTF8Tests" name="UTF8Encoding_ConnectionString_ShouldIncludeCharset" />
    </UnitTest>
    <UnitTest name="ParseQuery_EmptyQuery_ReturnsEmptyRequirements" storage="/workspace/sqltestdatagenerator.tests/bin/debug/net8.0/sqltestdatagenerator.tests.dll" id="1aa96349-b7cc-39a6-ef2d-1bc94162083b">
      <TestCategory>
        <TestCategoryItem TestCategory="SqlQueryParserV3" />
      </TestCategory>
      <Execution id="f4e3e9bb-2d04-4a10-833f-669f41d91f8d" />
      <TestMethod codeBase="/workspace/SqlTestDataGenerator.Tests/bin/Debug/net8.0/SqlTestDataGenerator.Tests.dll" adapterTypeName="executor://mstestadapter/v2" className="SqlTestDataGenerator.Tests.SqlQueryParserV3Tests" name="ParseQuery_EmptyQuery_ReturnsEmptyRequirements" />
    </UnitTest>
    <UnitTest name="ParseQuery_SimpleWhereEquality_ShouldExtractCondition" storage="/workspace/sqltestdatagenerator.tests/bin/debug/net8.0/sqltestdatagenerator.tests.dll" id="436739c8-ba41-3070-687c-7515da303711">
      <Execution id="4f431dac-65db-4ef3-81d1-01308999e8a5" />
      <TestMethod codeBase="/workspace/SqlTestDataGenerator.Tests/bin/Debug/net8.0/SqlTestDataGenerator.Tests.dll" adapterTypeName="executor://mstestadapter/v2" className="SqlTestDataGenerator.Tests.SqlQueryParserTests" name="ParseQuery_SimpleWhereEquality_ShouldExtractCondition" />
    </UnitTest>
    <UnitTest name="TestExtractConstraints_SimpleLikePatterns_ShouldExtractCorrectly" storage="/workspace/sqltestdatagenerator.tests/bin/debug/net8.0/sqltestdatagenerator.tests.dll" id="50802662-e8e6-ff88-cc12-e3bd1b008cfd">
      <TestCategory>
        <TestCategoryItem TestCategory="Constraint-Extraction" />
      </TestCategory>
      <Execution id="c0997b37-9199-4d2e-96c1-5cd893c79060" />
      <TestMethod codeBase="/workspace/SqlTestDataGenerator.Tests/bin/Debug/net8.0/SqlTestDataGenerator.Tests.dll" adapterTypeName="executor://mstestadapter/v2" className="SqlTestDataGenerator.Tests.ComprehensiveConstraintExtractionTests" name="TestExtractConstraints_SimpleLikePatterns_ShouldExtractCorrectly" />
    </UnitTest>
    <UnitTest name="ExecuteQueryWithTestDataAsync_MySQLConnection_ShouldValidateConnectionString" storage="/workspace/sqltestdatagenerator.tests/bin/debug/net8.0/sqltestdatagenerator.tests.dll" id="8dbddd12-1e3d-0936-552e-7e6f9e2aaf7f">
      <Execution id="66f1189a-8c99-4714-8137-59050ab846b5" />
      <TestMethod codeBase="/workspace/SqlTestDataGenerator.Tests/bin/Debug/net8.0/SqlTestDataGenerator.Tests.dll" adapterTypeName="executor://mstestadapter/v2" className="SqlTestDataGenerator.Tests.ComplexDataGenerationTests" name="ExecuteQueryWithTestDataAsync_MySQLConnection_ShouldValidateConnectionString" />
    </UnitTest>
    <UnitTest name="GenerateBogusData_MultipleRuns_ShouldAlwaysProduceUniqueKeys" storage="/workspace/sqltestdatagenerator.tests/bin/debug/net8.0/sqltestdatagenerator.tests.dll" id="8f466810-9566-05f4-5c19-11e1c24ec4a6">
      <TestCategory>
        <TestCategoryItem TestCategory="BugFix" />
      </TestCategory>
      <Execution id="bc05896c-c573-475c-b1f9-668227fbc37d" />
      <TestMethod codeBase="/workspace/SqlTestDataGenerator.Tests/bin/Debug/net8.0/SqlTestDataGenerator.Tests.dll" adapterTypeName="executor://mstestadapter/v2" className="SqlTestDataGenerator.Tests.DuplicateKeyBugFixTests" name="GenerateBogusData_MultipleRuns_ShouldAlwaysProduceUniqueKeys" />
    </UnitTest>
    <UnitTest name="ParseDateConditions_ReverseDateAdd_ShouldParseCorrectly" storage="/workspace/sqltestdatagenerator.tests/bin/debug/net8.0/sqltestdatagenerator.tests.dll" id="1e311d18-bf3e-0cda-a43b-18e57c0d874e">
      <TestCategory>
        <TestCategoryItem TestCategory="DateAddUTF8Fixes" />
      </TestCategory>
      <Execution id="ca6346b8-aab2-4d96-bda4-f26ee40f5234" />
      <TestMethod codeBase="/workspace/SqlTestDataGenerator.Tests/bin/Debug/net8.0/SqlTestDataGenerator.Tests.dll" adapterTypeName="executor://mstestadapter/v2" className="SqlTestDataGenerator.Tests.SqlDateAddUTF8Tests" name="ParseDateConditions_ReverseDateAdd_ShouldParseCorrectly" />
    </UnitTest>
    <UnitTest name="ParseDateConditions_DateAddWithDay_ShouldParseCorrectly" storage="/workspace/sqltestdatagenerator.tests/bin/debug/net8.0/sqltestdatagenerator.tests.dll" id="8e2e17a0-7a7d-b886-35e3-73304fb181bd">
      <TestCategory>
        <TestCategoryItem TestCategory="DateAddUTF8Fixes" />
      </TestCategory>
      <Execution id="44b599c2-8f45-451b-bf3d-979af130eabf" />
      <TestMethod codeBase="/workspace/SqlTestDataGenerator.Tests/bin/Debug/net8.0/SqlTestDataGenerator.Tests.dll" adapterTypeName="executor://mstestadapter/v2" className="SqlTestDataGenerator.Tests.SqlDateAddUTF8Tests" name="ParseDateConditions_DateAddWithDay_ShouldParseCorrectly" />
    </UnitTest>
    <UnitTest name="ExecuteQueryWithTestDataAsync_LargeRecordCount_ShouldHandleEfficiently" storage="/workspace/sqltestdatagenerator.tests/bin/debug/net8.0/sqltestdatagenerator.tests.dll" id="6a837f89-6df6-acb7-0827-1ca906ffd71d">
      <TestCategory>
        <TestCategoryItem TestCategory="RecordCount" />
      </TestCategory>
      <Execution id="b2a4d4f8-b755-4051-b879-a16376d3b4d6" />
      <TestMethod codeBase="/workspace/SqlTestDataGenerator.Tests/bin/Debug/net8.0/SqlTestDataGenerator.Tests.dll" adapterTypeName="executor://mstestadapter/v2" className="SqlTestDataGenerator.Tests.RecordCountVerificationTests" name="ExecuteQueryWithTestDataAsync_LargeRecordCount_ShouldHandleEfficiently" />
    </UnitTest>
    <UnitTest name="ParseQuery_LikeCondition_ShouldExtractCondition" storage="/workspace/sqltestdatagenerator.tests/bin/debug/net8.0/sqltestdatagenerator.tests.dll" id="812afea8-78cc-8b31-7c2f-4fcf17bd6c5c">
      <Execution id="9fda3c8b-0cef-4851-91cb-ec001695ca43" />
      <TestMethod codeBase="/workspace/SqlTestDataGenerator.Tests/bin/Debug/net8.0/SqlTestDataGenerator.Tests.dll" adapterTypeName="executor://mstestadapter/v2" className="SqlTestDataGenerator.Tests.SqlQueryParserTests" name="ParseQuery_LikeCondition_ShouldExtractCondition" />
    </UnitTest>
    <UnitTest name="TC013_CommonTableExpressions_WithRecursive_ShouldHandleCTE" storage="/workspace/sqltestdatagenerator.tests/bin/debug/net8.0/sqltestdatagenerator.tests.dll" id="a2a23d28-9ccb-7b78-624f-a33453cfdb3c">
      <TestCategory>
        <TestCategoryItem TestCategory="SQL-Keywords" />
        <TestCategoryItem TestCategory="Integration" />
      </TestCategory>
      <Execution id="3d3ce53b-2182-4682-8820-1c84bddfd083" />
      <TestMethod codeBase="/workspace/SqlTestDataGenerator.Tests/bin/Debug/net8.0/SqlTestDataGenerator.Tests.dll" adapterTypeName="executor://mstestadapter/v2" className="SqlTestDataGenerator.Tests.ExecuteQueryWithTestDataAsyncDemoTests" name="TC013_CommonTableExpressions_WithRecursive_ShouldHandleCTE" />
    </UnitTest>
    <UnitTest name="Debug_ExtractConstraints_NoTableAlias_Simple" storage="/workspace/sqltestdatagenerator.tests/bin/debug/net8.0/sqltestdatagenerator.tests.dll" id="9156e5ae-757c-4d5f-9321-7cef7c8ae534">
      <TestCategory>
        <TestCategoryItem TestCategory="ComprehensiveConstraints" />
      </TestCategory>
      <Execution id="cf556049-ec6d-4437-8ded-5118b46a9248" />
      <TestMethod codeBase="/workspace/SqlTestDataGenerator.Tests/bin/Debug/net8.0/SqlTestDataGenerator.Tests.dll" adapterTypeName="executor://mstestadapter/v2" className="SqlTestDataGenerator.Tests.ComprehensiveConstraintExtractorTests" name="Debug_ExtractConstraints_NoTableAlias_Simple" />
    </UnitTest>
    <UnitTest name="TC003_10_ExecuteQueryWithTestDataAsync_MultiTableJoin_WithRealMySQL" storage="/workspace/sqltestdatagenerator.tests/bin/debug/net8.0/sqltestdatagenerator.tests.dll" id="dfafb6b7-ec58-5275-3925-c481cdb7a34a">
      <TestCategory>
        <TestCategoryItem TestCategory="MySQL-Real" />
        <TestCategoryItem TestCategory="Integration" />
      </TestCategory>
      <Execution id="b119550f-613d-48c5-a89a-8fd4d42a9a8a" />
      <TestMethod codeBase="/workspace/SqlTestDataGenerator.Tests/bin/Debug/net8.0/SqlTestDataGenerator.Tests.dll" adapterTypeName="executor://mstestadapter/v2" className="SqlTestDataGenerator.Tests.ExecuteQueryWithTestDataAsyncDemoTests" name="TC003_10_ExecuteQueryWithTestDataAsync_MultiTableJoin_WithRealMySQL" />
    </UnitTest>
    <UnitTest name="Test_ProveTC001Fix_VnextConstraintSatisfaction" storage="/workspace/sqltestdatagenerator.tests/bin/debug/net8.0/sqltestdatagenerator.tests.dll" id="50debf66-da8c-a609-79d1-35e70ddebf83">
      <TestCategory>
        <TestCategoryItem TestCategory="Constraint-Aware" />
      </TestCategory>
      <Execution id="47fda484-9b14-4f69-b15d-db05cfc22db1" />
      <TestMethod codeBase="/workspace/SqlTestDataGenerator.Tests/bin/Debug/net8.0/SqlTestDataGenerator.Tests.dll" adapterTypeName="executor://mstestadapter/v2" className="SqlTestDataGenerator.Tests.ConstraintAwareGenerationTests" name="Test_ProveTC001Fix_VnextConstraintSatisfaction" />
    </UnitTest>
    <UnitTest name="ExtractDateConstraints_WithYearFunction_ShouldExtractCorrectly" storage="/workspace/sqltestdatagenerator.tests/bin/debug/net8.0/sqltestdatagenerator.tests.dll" id="b81a237f-143b-449c-73ca-baf838b13a21">
      <TestCategory>
        <TestCategoryItem TestCategory="ComprehensiveConstraints" />
      </TestCategory>
      <Execution id="ca637261-c74c-497f-b704-ef93971d14b2" />
      <TestMethod codeBase="/workspace/SqlTestDataGenerator.Tests/bin/Debug/net8.0/SqlTestDataGenerator.Tests.dll" adapterTypeName="executor://mstestadapter/v2" className="SqlTestDataGenerator.Tests.ComprehensiveConstraintExtractorTests" name="ExtractDateConstraints_WithYearFunction_ShouldExtractCorrectly" />
    </UnitTest>
    <UnitTest name="GenerateBogusData_UserRoles_ShouldNotHaveDuplicateKeys" storage="/workspace/sqltestdatagenerator.tests/bin/debug/net8.0/sqltestdatagenerator.tests.dll" id="ca04d0d9-5902-f099-e24d-45ba7b4a4b34">
      <TestCategory>
        <TestCategoryItem TestCategory="BugFix" />
      </TestCategory>
      <Execution id="8065210c-d262-482b-86c3-d64a59bf5d30" />
      <TestMethod codeBase="/workspace/SqlTestDataGenerator.Tests/bin/Debug/net8.0/SqlTestDataGenerator.Tests.dll" adapterTypeName="executor://mstestadapter/v2" className="SqlTestDataGenerator.Tests.DuplicateKeyBugFixTests" name="GenerateBogusData_UserRoles_ShouldNotHaveDuplicateKeys" />
    </UnitTest>
    <UnitTest name="ClearLogs_ShouldRemoveAllEntries" storage="/workspace/sqltestdatagenerator.tests/bin/debug/net8.0/sqltestdatagenerator.tests.dll" id="f923bec6-3c0e-bda5-5e19-b629ccceef3f">
      <Execution id="76100e16-125e-4ba3-ab64-127c13a81e65" />
      <TestMethod codeBase="/workspace/SqlTestDataGenerator.Tests/bin/Debug/net8.0/SqlTestDataGenerator.Tests.dll" adapterTypeName="executor://mstestadapter/v2" className="SqlTestDataGenerator.Tests.LoggerServiceTests" name="ClearLogs_ShouldRemoveAllEntries" />
    </UnitTest>
    <UnitTest name="ParseQuery_EmptyQuery_ReturnsEmptyRequirements" storage="/workspace/sqltestdatagenerator.tests/bin/debug/net8.0/sqltestdatagenerator.tests.dll" id="2d90bc88-284c-4518-b015-0b8170209597">
      <TestCategory>
        <TestCategoryItem TestCategory="ScriptDom" />
      </TestCategory>
      <Execution id="224dabf3-19f4-493e-82d2-334ce1e76a98" />
      <TestMethod codeBase="/workspace/SqlTestDataGenerator.Tests/bin/Debug/net8.0/SqlTestDataGenerator.Tests.dll" adapterTypeName="executor://mstestadapter/v2" className="SqlTestDataGenerator.Tests.SqlQueryParserV2Tests" name="ParseQuery_EmptyQuery_ReturnsEmptyRequirements" />
    </UnitTest>
    <UnitTest name="ExtractTablesFromQuery_EmptySQL_ShouldReturnEmptyList" storage="/workspace/sqltestdatagenerator.tests/bin/debug/net8.0/sqltestdatagenerator.tests.dll" id="2d8e95fd-0ee0-3a36-d2f6-a6936de5aea0">
      <Execution id="e86b05aa-a508-45c0-9d9f-5b2f0621482b" />
      <TestMethod codeBase="/workspace/SqlTestDataGenerator.Tests/bin/Debug/net8.0/SqlTestDataGenerator.Tests.dll" adapterTypeName="executor://mstestadapter/v2" className="SqlTestDataGenerator.Tests.ComplexSqlGenerationTests" name="ExtractTablesFromQuery_EmptySQL_ShouldReturnEmptyList" />
    </UnitTest>
    <UnitTest name="TestExtractConstraints_NullChecks_ShouldExtractNullConstraints" storage="/workspace/sqltestdatagenerator.tests/bin/debug/net8.0/sqltestdatagenerator.tests.dll" id="46c9deed-d042-bb83-cb94-fc7b86558a4f">
      <TestCategory>
        <TestCategoryItem TestCategory="Missing-Patterns" />
      </TestCategory>
      <Execution id="88b443d0-c82b-44d8-8e05-30cb6c84e699" />
      <TestMethod codeBase="/workspace/SqlTestDataGenerator.Tests/bin/Debug/net8.0/SqlTestDataGenerator.Tests.dll" adapterTypeName="executor://mstestadapter/v2" className="SqlTestDataGenerator.Tests.MissingSqlPatternsTests" name="TestExtractConstraints_NullChecks_ShouldExtractNullConstraints" />
    </UnitTest>
    <UnitTest name="TestJoinRegexPattern" storage="/workspace/sqltestdatagenerator.tests/bin/debug/net8.0/sqltestdatagenerator.tests.dll" id="277f3b52-0570-c0b0-06bd-5c0e065db537">
      <Execution id="eb8f0fa5-6f40-4d12-82ca-0bc6224c974b" />
      <TestMethod codeBase="/workspace/SqlTestDataGenerator.Tests/bin/Debug/net8.0/SqlTestDataGenerator.Tests.dll" adapterTypeName="executor://mstestadapter/v2" className="SqlTestDataGenerator.Tests.SqlQueryParserDebugTests" name="TestJoinRegexPattern" />
    </UnitTest>
    <UnitTest name="ExtractTablesFromQuery_NullSQL_ShouldReturnEmptyList" storage="/workspace/sqltestdatagenerator.tests/bin/debug/net8.0/sqltestdatagenerator.tests.dll" id="f388ddf8-0caa-9128-127b-a49ab07dbc5a">
      <Execution id="b0488d8b-2067-4700-9532-9277b5a54154" />
      <TestMethod codeBase="/workspace/SqlTestDataGenerator.Tests/bin/Debug/net8.0/SqlTestDataGenerator.Tests.dll" adapterTypeName="executor://mstestadapter/v2" className="SqlTestDataGenerator.Tests.ComplexSqlGenerationTests" name="ExtractTablesFromQuery_NullSQL_ShouldReturnEmptyList" />
    </UnitTest>
    <UnitTest name="Test_ConstraintValidator_ValidatesVnextLikePattern" storage="/workspace/sqltestdatagenerator.tests/bin/debug/net8.0/sqltestdatagenerator.tests.dll" id="2f6d1052-3d37-17db-b801-40306c640428">
      <TestCategory>
        <TestCategoryItem TestCategory="Constraint-Aware" />
      </TestCategory>
      <Execution id="bffa0fda-5577-4092-aa44-763121fd1732" />
      <TestMethod codeBase="/workspace/SqlTestDataGenerator.Tests/bin/Debug/net8.0/SqlTestDataGenerator.Tests.dll" adapterTypeName="executor://mstestadapter/v2" className="SqlTestDataGenerator.Tests.ConstraintAwareGenerationTests" name="Test_ConstraintValidator_ValidatesVnextLikePattern" />
    </UnitTest>
    <UnitTest name="LogLevel_Warning_ShouldCreateWarningEntry" storage="/workspace/sqltestdatagenerator.tests/bin/debug/net8.0/sqltestdatagenerator.tests.dll" id="ad397400-55a5-7e01-684f-84fbfd323ba8">
      <Execution id="cfb42647-795c-47de-8c97-b1d9013aa402" />
      <TestMethod codeBase="/workspace/SqlTestDataGenerator.Tests/bin/Debug/net8.0/SqlTestDataGenerator.Tests.dll" adapterTypeName="executor://mstestadapter/v2" className="SqlTestDataGenerator.Tests.LoggerServiceTests" name="LogLevel_Warning_ShouldCreateWarningEntry" />
    </UnitTest>
    <UnitTest name="ParseQuery_InCondition_ExtractsValueList" storage="/workspace/sqltestdatagenerator.tests/bin/debug/net8.0/sqltestdatagenerator.tests.dll" id="565c593c-a1ec-efd6-3780-c53986c553c0">
      <TestCategory>
        <TestCategoryItem TestCategory="ScriptDom" />
      </TestCategory>
      <Execution id="206ae813-3783-4262-96e2-b4c5e01c1db8" />
      <TestMethod codeBase="/workspace/SqlTestDataGenerator.Tests/bin/Debug/net8.0/SqlTestDataGenerator.Tests.dll" adapterTypeName="executor://mstestadapter/v2" className="SqlTestDataGenerator.Tests.SqlQueryParserV2Tests" name="ParseQuery_InCondition_ExtractsValueList" />
    </UnitTest>
    <UnitTest name="ExtractExistsConstraints_WithExists_ShouldExtractCorrectly" storage="/workspace/sqltestdatagenerator.tests/bin/debug/net8.0/sqltestdatagenerator.tests.dll" id="d4ded20d-d3b9-1442-571c-f7dc6b78c680">
      <TestCategory>
        <TestCategoryItem TestCategory="ComprehensiveConstraints" />
      </TestCategory>
      <Execution id="d225720a-e74e-4098-9663-e621b31a1ec8" />
      <TestMethod codeBase="/workspace/SqlTestDataGenerator.Tests/bin/Debug/net8.0/SqlTestDataGenerator.Tests.dll" adapterTypeName="executor://mstestadapter/v2" className="SqlTestDataGenerator.Tests.ComprehensiveConstraintExtractorTests" name="ExtractExistsConstraints_WithExists_ShouldExtractCorrectly" />
    </UnitTest>
    <UnitTest name="ExecuteQueryWithTestDataAsync_SimpleSQL_MustMatchExactRecordCount" storage="/workspace/sqltestdatagenerator.tests/bin/debug/net8.0/sqltestdatagenerator.tests.dll" id="4d299dc1-4133-b328-b004-81a79c37f47d">
      <TestCategory>
        <TestCategoryItem TestCategory="StrictRecordCount" />
        <TestCategoryItem TestCategory="RecordCountVerification" />
      </TestCategory>
      <Execution id="0322765a-f3d6-4498-a8ef-3787328c321c" />
      <TestMethod codeBase="/workspace/SqlTestDataGenerator.Tests/bin/Debug/net8.0/SqlTestDataGenerator.Tests.dll" adapterTypeName="executor://mstestadapter/v2" className="SqlTestDataGenerator.Tests.RecordCountStrictVerificationTests" name="ExecuteQueryWithTestDataAsync_SimpleSQL_MustMatchExactRecordCount" />
    </UnitTest>
    <UnitTest name="TestExtractConstraints_InClausePatterns_ShouldExtractValues" storage="/workspace/sqltestdatagenerator.tests/bin/debug/net8.0/sqltestdatagenerator.tests.dll" id="0802db3c-025d-934c-5585-56ad7882a936">
      <TestCategory>
        <TestCategoryItem TestCategory="Missing-Patterns" />
      </TestCategory>
      <Execution id="36f8bc47-d9e1-47df-a33b-8a9e980dc563" />
      <TestMethod codeBase="/workspace/SqlTestDataGenerator.Tests/bin/Debug/net8.0/SqlTestDataGenerator.Tests.dll" adapterTypeName="executor://mstestadapter/v2" className="SqlTestDataGenerator.Tests.MissingSqlPatternsTests" name="TestExtractConstraints_InClausePatterns_ShouldExtractValues" />
    </UnitTest>
    <UnitTest name="GetOpenAiApiKey_WithValidKey_ShouldReturnKey" storage="/workspace/sqltestdatagenerator.tests/bin/debug/net8.0/sqltestdatagenerator.tests.dll" id="272b019c-d5ab-f74f-94f3-fa1ad985f3e2">
      <Execution id="e1f4e2ae-ba98-4ee2-91fc-7d1cded08a2d" />
      <TestMethod codeBase="/workspace/SqlTestDataGenerator.Tests/bin/Debug/net8.0/SqlTestDataGenerator.Tests.dll" adapterTypeName="executor://mstestadapter/v2" className="SqlTestDataGenerator.Tests.ConfigurationServiceTests" name="GetOpenAiApiKey_WithValidKey_ShouldReturnKey" />
    </UnitTest>
    <UnitTest name="TestExtractConstraints_NullChecks_ShouldExtractNullConstraints" storage="/workspace/sqltestdatagenerator.tests/bin/debug/net8.0/sqltestdatagenerator.tests.dll" id="52c82675-ffa4-23b2-c280-44843f3a7e41">
      <TestCategory>
        <TestCategoryItem TestCategory="Enhanced-Extraction" />
      </TestCategory>
      <Execution id="edc6fbdc-76b4-43c0-9fe9-dc848ab2c39e" />
      <TestMethod codeBase="/workspace/SqlTestDataGenerator.Tests/bin/Debug/net8.0/SqlTestDataGenerator.Tests.dll" adapterTypeName="executor://mstestadapter/v2" className="SqlTestDataGenerator.Tests.EnhancedConstraintExtractionTests" name="TestExtractConstraints_NullChecks_ShouldExtractNullConstraints" />
    </UnitTest>
    <UnitTest name="ParseQuery_WhereEqualityWithTableAlias_ShouldExtractCondition" storage="/workspace/sqltestdatagenerator.tests/bin/debug/net8.0/sqltestdatagenerator.tests.dll" id="1c090018-b67e-4cd0-3181-0f61bd7ea682">
      <Execution id="6948ef7b-cbac-4fbe-9364-78c4204ca75a" />
      <TestMethod codeBase="/workspace/SqlTestDataGenerator.Tests/bin/Debug/net8.0/SqlTestDataGenerator.Tests.dll" adapterTypeName="executor://mstestadapter/v2" className="SqlTestDataGenerator.Tests.SqlQueryParserTests" name="ParseQuery_WhereEqualityWithTableAlias_ShouldExtractCondition" />
    </UnitTest>
    <UnitTest name="Debug_AIService_BasicFunctionality" storage="/workspace/sqltestdatagenerator.tests/bin/debug/net8.0/sqltestdatagenerator.tests.dll" id="914ca81b-0b8a-18f3-24df-f3c71ef9cb98">
      <TestCategory>
        <TestCategoryItem TestCategory="Constraint-Aware" />
      </TestCategory>
      <Execution id="62cb70f6-0b20-4843-9577-68252334d409" />
      <TestMethod codeBase="/workspace/SqlTestDataGenerator.Tests/bin/Debug/net8.0/SqlTestDataGenerator.Tests.dll" adapterTypeName="executor://mstestadapter/v2" className="SqlTestDataGenerator.Tests.ConstraintAwareGenerationTests" name="Debug_AIService_BasicFunctionality" />
    </UnitTest>
    <UnitTest name="ExtractTablesFromQuery_MalformedSQL_ShouldHandleGracefully" storage="/workspace/sqltestdatagenerator.tests/bin/debug/net8.0/sqltestdatagenerator.tests.dll" id="8599cba4-e5d8-56d3-7d02-da5179df2128">
      <Execution id="9100e40c-2b61-4cb0-bb0b-ee867cf6b4ed" />
      <TestMethod codeBase="/workspace/SqlTestDataGenerator.Tests/bin/Debug/net8.0/SqlTestDataGenerator.Tests.dll" adapterTypeName="executor://mstestadapter/v2" className="SqlTestDataGenerator.Tests.ComplexSqlGenerationTests" name="ExtractTablesFromQuery_MalformedSQL_ShouldHandleGracefully" />
    </UnitTest>
    <UnitTest name="ParseQuery_YearFunction_ShouldExtractDateCondition" storage="/workspace/sqltestdatagenerator.tests/bin/debug/net8.0/sqltestdatagenerator.tests.dll" id="19d4536f-6566-dad7-6064-df8ecbe782f7">
      <Execution id="6e9fa53d-6685-40a6-960d-00e37580f819" />
      <TestMethod codeBase="/workspace/SqlTestDataGenerator.Tests/bin/Debug/net8.0/SqlTestDataGenerator.Tests.dll" adapterTypeName="executor://mstestadapter/v2" className="SqlTestDataGenerator.Tests.SqlQueryParserTests" name="ParseQuery_YearFunction_ShouldExtractDateCondition" />
    </UnitTest>
    <UnitTest name="LoadUserSettings_WithValidFile_ShouldReturnSettings" storage="/workspace/sqltestdatagenerator.tests/bin/debug/net8.0/sqltestdatagenerator.tests.dll" id="84550a56-94ea-5c8e-aade-b9aebae6e28a">
      <Execution id="34ed5804-9f78-42fd-84fb-506509e3e640" />
      <TestMethod codeBase="/workspace/SqlTestDataGenerator.Tests/bin/Debug/net8.0/SqlTestDataGenerator.Tests.dll" adapterTypeName="executor://mstestadapter/v2" className="SqlTestDataGenerator.Tests.ConfigurationServiceTests" name="LoadUserSettings_WithValidFile_ShouldReturnSettings" />
    </UnitTest>
    <UnitTest name="TC004_10_ExecuteQueryWithTestDataAsync_PerformanceBenchmark_MySQL" storage="/workspace/sqltestdatagenerator.tests/bin/debug/net8.0/sqltestdatagenerator.tests.dll" id="a7f106a6-971d-51f4-63e6-c4daba67e711">
      <TestCategory>
        <TestCategoryItem TestCategory="Performance" />
        <TestCategoryItem TestCategory="Integration" />
      </TestCategory>
      <Execution id="5b7fc267-9874-4d59-9dec-dd20ad1a4d8d" />
      <TestMethod codeBase="/workspace/SqlTestDataGenerator.Tests/bin/Debug/net8.0/SqlTestDataGenerator.Tests.dll" adapterTypeName="executor://mstestadapter/v2" className="SqlTestDataGenerator.Tests.ExecuteQueryWithTestDataAsyncDemoTests" name="TC004_10_ExecuteQueryWithTestDataAsync_PerformanceBenchmark_MySQL" />
    </UnitTest>
    <UnitTest name="ExtractAllConstraints_WithEmptyQuery_ShouldReturnEmptyConstraints" storage="/workspace/sqltestdatagenerator.tests/bin/debug/net8.0/sqltestdatagenerator.tests.dll" id="d59fb9e6-9639-6c3f-f09c-7e47437eb8dd">
      <TestCategory>
        <TestCategoryItem TestCategory="ComprehensiveConstraints" />
      </TestCategory>
      <Execution id="8071cf55-dc20-40be-9369-3a6546baf0f5" />
      <TestMethod codeBase="/workspace/SqlTestDataGenerator.Tests/bin/Debug/net8.0/SqlTestDataGenerator.Tests.dll" adapterTypeName="executor://mstestadapter/v2" className="SqlTestDataGenerator.Tests.ComprehensiveConstraintExtractorTests" name="ExtractAllConstraints_WithEmptyQuery_ShouldReturnEmptyConstraints" />
    </UnitTest>
    <UnitTest name="TestTimeAvailabilityChecking" storage="/workspace/sqltestdatagenerator.tests/bin/debug/net8.0/sqltestdatagenerator.tests.dll" id="f8cae70b-5890-a61a-b866-50948cb50146">
      <Execution id="6f0cb3c8-c31a-4729-8575-ae4ee6991d72" />
      <TestMethod codeBase="/workspace/SqlTestDataGenerator.Tests/bin/Debug/net8.0/SqlTestDataGenerator.Tests.dll" adapterTypeName="executor://mstestadapter/v2" className="SqlTestDataGenerator.Tests.DailyApiLimitTests" name="TestTimeAvailabilityChecking" />
    </UnitTest>
    <UnitTest name="LoadAppSettings_WithValidFile_ShouldReturnSettings" storage="/workspace/sqltestdatagenerator.tests/bin/debug/net8.0/sqltestdatagenerator.tests.dll" id="18cfefd9-6f9c-255b-7060-9d4d9eaa8f24">
      <Execution id="4fb77598-d154-4386-ad16-bcbf5ec8604a" />
      <TestMethod codeBase="/workspace/SqlTestDataGenerator.Tests/bin/Debug/net8.0/SqlTestDataGenerator.Tests.dll" adapterTypeName="executor://mstestadapter/v2" className="SqlTestDataGenerator.Tests.ConfigurationServiceTests" name="LoadAppSettings_WithValidFile_ShouldReturnSettings" />
    </UnitTest>
    <UnitTest name="ConvertToMySQLSyntax_DatetimeMonths_ShouldConvertToDateAdd" storage="/workspace/sqltestdatagenerator.tests/bin/debug/net8.0/sqltestdatagenerator.tests.dll" id="e6484859-c047-2d19-88f6-de4273fe6051">
      <TestCategory>
        <TestCategoryItem TestCategory="MySQLDateConverter" />
      </TestCategory>
      <Execution id="d8cbfd99-68d5-44ec-b428-dc04c1ff767d" />
      <TestMethod codeBase="/workspace/SqlTestDataGenerator.Tests/bin/Debug/net8.0/SqlTestDataGenerator.Tests.dll" adapterTypeName="executor://mstestadapter/v2" className="SqlTestDataGenerator.Tests.MySQLDateFunctionConverterTests" name="ConvertToMySQLSyntax_DatetimeMonths_ShouldConvertToDateAdd" />
    </UnitTest>
    <UnitTest name="ExtractExistsConstraints_SimpleExists_ShouldExtractCorrectly" storage="/workspace/sqltestdatagenerator.tests/bin/debug/net8.0/sqltestdatagenerator.tests.dll" id="5f5dc02f-2f9c-49e2-7876-e8cabf1f6fd1">
      <Execution id="ccb70f84-e636-401e-9da0-f391aeb6bdde" />
      <TestMethod codeBase="/workspace/SqlTestDataGenerator.Tests/bin/Debug/net8.0/SqlTestDataGenerator.Tests.dll" adapterTypeName="executor://mstestadapter/v2" className="SqlTestDataGenerator.Tests.ExistsConstraintExtractionTests" name="ExtractExistsConstraints_SimpleExists_ShouldExtractCorrectly" />
    </UnitTest>
    <UnitTest name="ExecuteQueryWithTestDataAsync_RequestedRecordCount_ShouldGenerateCorrectAmountOfData" storage="/workspace/sqltestdatagenerator.tests/bin/debug/net8.0/sqltestdatagenerator.tests.dll" id="5bb14654-aea4-fc7b-632f-62555f83aa62">
      <TestCategory>
        <TestCategoryItem TestCategory="RecordCount" />
      </TestCategory>
      <Execution id="4ba4360e-a105-441e-953b-9486157bd767" />
      <TestMethod codeBase="/workspace/SqlTestDataGenerator.Tests/bin/Debug/net8.0/SqlTestDataGenerator.Tests.dll" adapterTypeName="executor://mstestadapter/v2" className="SqlTestDataGenerator.Tests.RecordCountVerificationTests" name="ExecuteQueryWithTestDataAsync_RequestedRecordCount_ShouldGenerateCorrectAmountOfData" />
    </UnitTest>
    <UnitTest name="TC_Debug_CheckMySQLDataGeneration" storage="/workspace/sqltestdatagenerator.tests/bin/debug/net8.0/sqltestdatagenerator.tests.dll" id="1c9b3d7e-c6b0-eec5-53ac-d68181425b43">
      <TestCategory>
        <TestCategoryItem TestCategory="MySQL-Debug" />
        <TestCategoryItem TestCategory="Integration" />
      </TestCategory>
      <Execution id="81bd9eba-ae32-497b-99b6-741993812fef" />
      <TestMethod codeBase="/workspace/SqlTestDataGenerator.Tests/bin/Debug/net8.0/SqlTestDataGenerator.Tests.dll" adapterTypeName="executor://mstestadapter/v2" className="SqlTestDataGenerator.Tests.ExecuteQueryWithTestDataAsyncDemoTests" name="TC_Debug_CheckMySQLDataGeneration" />
    </UnitTest>
    <UnitTest name="ParseQuery_JoinConditions_ShouldExtractJoinRequirements" storage="/workspace/sqltestdatagenerator.tests/bin/debug/net8.0/sqltestdatagenerator.tests.dll" id="69ece138-e613-08f4-1468-66ec2464bc39">
      <Execution id="fd8ed11b-0fdf-4653-8fde-8357eb280e1a" />
      <TestMethod codeBase="/workspace/SqlTestDataGenerator.Tests/bin/Debug/net8.0/SqlTestDataGenerator.Tests.dll" adapterTypeName="executor://mstestadapter/v2" className="SqlTestDataGenerator.Tests.SqlQueryParserTests" name="ParseQuery_JoinConditions_ShouldExtractJoinRequirements" />
    </UnitTest>
    <UnitTest name="ExtractExistsConstraints_WithNotExists_ShouldExtractCorrectly" storage="/workspace/sqltestdatagenerator.tests/bin/debug/net8.0/sqltestdatagenerator.tests.dll" id="ca4bdeec-f4a5-473c-d409-9ce11eb71010">
      <TestCategory>
        <TestCategoryItem TestCategory="ComprehensiveConstraints" />
      </TestCategory>
      <Execution id="fcf16fb3-263a-4308-af7f-0d9d54f1889e" />
      <TestMethod codeBase="/workspace/SqlTestDataGenerator.Tests/bin/Debug/net8.0/SqlTestDataGenerator.Tests.dll" adapterTypeName="executor://mstestadapter/v2" className="SqlTestDataGenerator.Tests.ComprehensiveConstraintExtractorTests" name="ExtractExistsConstraints_WithNotExists_ShouldExtractCorrectly" />
    </UnitTest>
    <UnitTest name="ParseQuery_WithTableAlias_ExtractsCorrectAlias" storage="/workspace/sqltestdatagenerator.tests/bin/debug/net8.0/sqltestdatagenerator.tests.dll" id="5d0d9424-0da5-07a1-c647-1345f47027e9">
      <TestCategory>
        <TestCategoryItem TestCategory="ScriptDom" />
      </TestCategory>
      <Execution id="0e3ba66e-9c20-4192-94fc-af6e7f776e11" />
      <TestMethod codeBase="/workspace/SqlTestDataGenerator.Tests/bin/Debug/net8.0/SqlTestDataGenerator.Tests.dll" adapterTypeName="executor://mstestadapter/v2" className="SqlTestDataGenerator.Tests.SqlQueryParserV2Tests" name="ParseQuery_WithTableAlias_ExtractsCorrectAlias" />
    </UnitTest>
    <UnitTest name="ExtractNullConstraints_WithIsNotNull_ShouldExtractCorrectly" storage="/workspace/sqltestdatagenerator.tests/bin/debug/net8.0/sqltestdatagenerator.tests.dll" id="1e940aca-f548-be92-5f19-806853dafddb">
      <TestCategory>
        <TestCategoryItem TestCategory="ComprehensiveConstraints" />
      </TestCategory>
      <Execution id="79543184-4c55-48ad-a52b-942c6749f0b9" />
      <TestMethod codeBase="/workspace/SqlTestDataGenerator.Tests/bin/Debug/net8.0/SqlTestDataGenerator.Tests.dll" adapterTypeName="executor://mstestadapter/v2" className="SqlTestDataGenerator.Tests.ComprehensiveConstraintExtractorTests" name="ExtractNullConstraints_WithIsNotNull_ShouldExtractCorrectly" />
    </UnitTest>
    <UnitTest name="ExtractTablesFromQuery_ComplexSQL_ShouldNotContainReservedWords" storage="/workspace/sqltestdatagenerator.tests/bin/debug/net8.0/sqltestdatagenerator.tests.dll" id="c3543ecf-d632-4b92-de87-add46d298479">
      <Execution id="7da1ae93-b98e-41d0-a7ca-34560526c25c" />
      <TestMethod codeBase="/workspace/SqlTestDataGenerator.Tests/bin/Debug/net8.0/SqlTestDataGenerator.Tests.dll" adapterTypeName="executor://mstestadapter/v2" className="SqlTestDataGenerator.Tests.ComplexSqlGenerationTests" name="ExtractTablesFromQuery_ComplexSQL_ShouldNotContainReservedWords" />
    </UnitTest>
    <UnitTest name="TestExtractConstraints_FunctionCalls_ShouldExtractFunctionConstraints" storage="/workspace/sqltestdatagenerator.tests/bin/debug/net8.0/sqltestdatagenerator.tests.dll" id="051de0c9-b5ab-37e8-a17e-4a0a2016e964">
      <TestCategory>
        <TestCategoryItem TestCategory="Missing-Patterns" />
      </TestCategory>
      <Execution id="8c508bc5-de7c-481e-925b-1ce8b1d98989" />
      <TestMethod codeBase="/workspace/SqlTestDataGenerator.Tests/bin/Debug/net8.0/SqlTestDataGenerator.Tests.dll" adapterTypeName="executor://mstestadapter/v2" className="SqlTestDataGenerator.Tests.MissingSqlPatternsTests" name="TestExtractConstraints_FunctionCalls_ShouldExtractFunctionConstraints" />
    </UnitTest>
    <UnitTest name="LogError_WithException_ShouldCaptureExceptionDetails" storage="/workspace/sqltestdatagenerator.tests/bin/debug/net8.0/sqltestdatagenerator.tests.dll" id="87db66e8-3797-2582-a71f-466884f912da">
      <Execution id="7a19e5cb-5155-432e-b761-15c48ae86e05" />
      <TestMethod codeBase="/workspace/SqlTestDataGenerator.Tests/bin/Debug/net8.0/SqlTestDataGenerator.Tests.dll" adapterTypeName="executor://mstestadapter/v2" className="SqlTestDataGenerator.Tests.LoggerServiceTests" name="LogError_WithException_ShouldCaptureExceptionDetails" />
    </UnitTest>
    <UnitTest name="CreateTables_FromSqlScript_ShouldSucceed" storage="/workspace/sqltestdatagenerator.tests/bin/debug/net8.0/sqltestdatagenerator.tests.dll" id="821e93c5-ab9f-adf8-f7bc-0ff221a7796a">
      <TestCategory>
        <TestCategoryItem TestCategory="Setup" />
      </TestCategory>
      <Execution id="d392a566-5d50-420a-990e-c011697c5cba" />
      <TestMethod codeBase="/workspace/SqlTestDataGenerator.Tests/bin/Debug/net8.0/SqlTestDataGenerator.Tests.dll" adapterTypeName="executor://mstestadapter/v2" className="SqlTestDataGenerator.Tests.CreateMySQLTablesTest" name="CreateTables_FromSqlScript_ShouldSucceed" />
    </UnitTest>
    <UnitTest name="ExtractInClauseConstraints_WithStringList_ShouldExtractCorrectly" storage="/workspace/sqltestdatagenerator.tests/bin/debug/net8.0/sqltestdatagenerator.tests.dll" id="4a6b38d9-9cf7-4db2-da35-a8b63d506daa">
      <TestCategory>
        <TestCategoryItem TestCategory="ComprehensiveConstraints" />
      </TestCategory>
      <Execution id="988eca9b-984a-4409-81bc-7b8215008185" />
      <TestMethod codeBase="/workspace/SqlTestDataGenerator.Tests/bin/Debug/net8.0/SqlTestDataGenerator.Tests.dll" adapterTypeName="executor://mstestadapter/v2" className="SqlTestDataGenerator.Tests.ComprehensiveConstraintExtractorTests" name="ExtractInClauseConstraints_WithStringList_ShouldExtractCorrectly" />
    </UnitTest>
    <UnitTest name="ExtractExistsConstraints_CaseInsensitive_ShouldExtractCorrectly" storage="/workspace/sqltestdatagenerator.tests/bin/debug/net8.0/sqltestdatagenerator.tests.dll" id="b0d97344-12ad-7d1d-6969-28321e909b5f">
      <Execution id="a18eedaf-57ea-44a0-ad92-38323df66bf3" />
      <TestMethod codeBase="/workspace/SqlTestDataGenerator.Tests/bin/Debug/net8.0/SqlTestDataGenerator.Tests.dll" adapterTypeName="executor://mstestadapter/v2" className="SqlTestDataGenerator.Tests.ExistsConstraintExtractionTests" name="ExtractExistsConstraints_CaseInsensitive_ShouldExtractCorrectly" />
    </UnitTest>
    <UnitTest name="TestConnection_MySQL_ShouldConnect" storage="/workspace/sqltestdatagenerator.tests/bin/debug/net8.0/sqltestdatagenerator.tests.dll" id="67cc85c1-d6cf-52d6-b916-c4fcc25b3e21">
      <TestCategory>
        <TestCategoryItem TestCategory="MySQLIntegration" />
      </TestCategory>
      <Execution id="4bdb7232-db54-4fe5-bdeb-ed2058245442" />
      <TestMethod codeBase="/workspace/SqlTestDataGenerator.Tests/bin/Debug/net8.0/SqlTestDataGenerator.Tests.dll" adapterTypeName="executor://mstestadapter/v2" className="SqlTestDataGenerator.Tests.MySQLIntegrationDuplicateKeyTests" name="TestConnection_MySQL_ShouldConnect" />
    </UnitTest>
    <UnitTest name="TestDifferentSQLFormats" storage="/workspace/sqltestdatagenerator.tests/bin/debug/net8.0/sqltestdatagenerator.tests.dll" id="02e43938-4bb0-1b90-d0c7-1bda28998f3a">
      <Execution id="014f79ea-2218-4b45-8280-7cc40472932f" />
      <TestMethod codeBase="/workspace/SqlTestDataGenerator.Tests/bin/Debug/net8.0/SqlTestDataGenerator.Tests.dll" adapterTypeName="executor://mstestadapter/v2" className="SqlTestDataGenerator.Tests.SqlQueryParserDebugTests" name="TestDifferentSQLFormats" />
    </UnitTest>
    <UnitTest name="ConvertToMySQLSyntax_DatetimePluralUnits_ShouldNormalize" storage="/workspace/sqltestdatagenerator.tests/bin/debug/net8.0/sqltestdatagenerator.tests.dll" id="7abc8d24-30d3-d6e8-72dd-cc35953c0c69">
      <TestCategory>
        <TestCategoryItem TestCategory="MySQLDateConverter" />
      </TestCategory>
      <Execution id="b54a3a69-afd6-41e5-a6dd-216880c1b33d" />
      <TestMethod codeBase="/workspace/SqlTestDataGenerator.Tests/bin/Debug/net8.0/SqlTestDataGenerator.Tests.dll" adapterTypeName="executor://mstestadapter/v2" className="SqlTestDataGenerator.Tests.MySQLDateFunctionConverterTests" name="ConvertToMySQLSyntax_DatetimePluralUnits_ShouldNormalize" />
    </UnitTest>
    <UnitTest name="ConvertToMySQLSyntax_EmptyOrNullQuery_ShouldReturnUnchanged" storage="/workspace/sqltestdatagenerator.tests/bin/debug/net8.0/sqltestdatagenerator.tests.dll" id="2e0cc1d0-8e48-730a-36ce-d87cb24022a8">
      <TestCategory>
        <TestCategoryItem TestCategory="MySQLDateConverter" />
      </TestCategory>
      <Execution id="09440be5-7548-42d5-ad9d-2abe8fd474f5" />
      <TestMethod codeBase="/workspace/SqlTestDataGenerator.Tests/bin/Debug/net8.0/SqlTestDataGenerator.Tests.dll" adapterTypeName="executor://mstestadapter/v2" className="SqlTestDataGenerator.Tests.MySQLDateFunctionConverterTests" name="ConvertToMySQLSyntax_EmptyOrNullQuery_ShouldReturnUnchanged" />
    </UnitTest>
    <UnitTest name="ExtractInClauseConstraints_WithoutTableAlias_ShouldExtractCorrectly" storage="/workspace/sqltestdatagenerator.tests/bin/debug/net8.0/sqltestdatagenerator.tests.dll" id="3da2210e-7b6e-efa8-78ab-3f603d2cd027">
      <TestCategory>
        <TestCategoryItem TestCategory="ComprehensiveConstraints" />
      </TestCategory>
      <Execution id="78cea21e-842b-434b-b51f-da27e80777f4" />
      <TestMethod codeBase="/workspace/SqlTestDataGenerator.Tests/bin/Debug/net8.0/SqlTestDataGenerator.Tests.dll" adapterTypeName="executor://mstestadapter/v2" className="SqlTestDataGenerator.Tests.ComprehensiveConstraintExtractorTests" name="ExtractInClauseConstraints_WithoutTableAlias_ShouldExtractCorrectly" />
    </UnitTest>
    <UnitTest name="ExtractExistsConstraints_BothExistsAndNotExists_ShouldExtractBothCorrectly" storage="/workspace/sqltestdatagenerator.tests/bin/debug/net8.0/sqltestdatagenerator.tests.dll" id="ed6b3ee9-628f-42a4-56ce-554c19cf0237">
      <Execution id="c9b4cc4f-1c0b-4919-aba6-790e70c292d1" />
      <TestMethod codeBase="/workspace/SqlTestDataGenerator.Tests/bin/Debug/net8.0/SqlTestDataGenerator.Tests.dll" adapterTypeName="executor://mstestadapter/v2" className="SqlTestDataGenerator.Tests.ExistsConstraintExtractionTests" name="ExtractExistsConstraints_BothExistsAndNotExists_ShouldExtractBothCorrectly" />
    </UnitTest>
    <UnitTest name="ParseQuery_JoinConditions_ExtractsJoinRequirements" storage="/workspace/sqltestdatagenerator.tests/bin/debug/net8.0/sqltestdatagenerator.tests.dll" id="dc686220-fa09-35e9-2ada-0340bb63d269">
      <TestCategory>
        <TestCategoryItem TestCategory="SqlQueryParserV3" />
      </TestCategory>
      <Execution id="c185c429-7f78-4e61-830a-3ea0204d53dd" />
      <TestMethod codeBase="/workspace/SqlTestDataGenerator.Tests/bin/Debug/net8.0/SqlTestDataGenerator.Tests.dll" adapterTypeName="executor://mstestadapter/v2" className="SqlTestDataGenerator.Tests.SqlQueryParserV3Tests" name="ParseQuery_JoinConditions_ExtractsJoinRequirements" />
    </UnitTest>
    <UnitTest name="ValidateMySQLSyntax_SubstrFunction_ShouldReturnFalse" storage="/workspace/sqltestdatagenerator.tests/bin/debug/net8.0/sqltestdatagenerator.tests.dll" id="aac4c716-72b2-9a1e-0fe2-6659f7df6753">
      <TestCategory>
        <TestCategoryItem TestCategory="MySQLDateConverter" />
      </TestCategory>
      <Execution id="525ebd8d-6a71-4553-96f2-17f0b67e4d74" />
      <TestMethod codeBase="/workspace/SqlTestDataGenerator.Tests/bin/Debug/net8.0/SqlTestDataGenerator.Tests.dll" adapterTypeName="executor://mstestadapter/v2" className="SqlTestDataGenerator.Tests.MySQLDateFunctionConverterTests" name="ValidateMySQLSyntax_SubstrFunction_ShouldReturnFalse" />
    </UnitTest>
    <UnitTest name="ParseDateConditions_DateAddWithYear_ShouldParseCorrectly" storage="/workspace/sqltestdatagenerator.tests/bin/debug/net8.0/sqltestdatagenerator.tests.dll" id="8b3ed7f0-9282-3d91-dc55-9a522b50ee02">
      <TestCategory>
        <TestCategoryItem TestCategory="DateAddUTF8Fixes" />
      </TestCategory>
      <Execution id="5240ca2f-3405-4e5c-ad5e-522a5523ec7b" />
      <TestMethod codeBase="/workspace/SqlTestDataGenerator.Tests/bin/Debug/net8.0/SqlTestDataGenerator.Tests.dll" adapterTypeName="executor://mstestadapter/v2" className="SqlTestDataGenerator.Tests.SqlDateAddUTF8Tests" name="ParseDateConditions_DateAddWithYear_ShouldParseCorrectly" />
    </UnitTest>
    <UnitTest name="TC009_Union_Operations_ShouldHandleMultipleSelects" storage="/workspace/sqltestdatagenerator.tests/bin/debug/net8.0/sqltestdatagenerator.tests.dll" id="740c4fe7-4711-43c3-3c3e-334cc4c70bd0">
      <TestCategory>
        <TestCategoryItem TestCategory="SQL-Keywords" />
        <TestCategoryItem TestCategory="Integration" />
      </TestCategory>
      <Execution id="c4327f57-fcf4-4610-9e9b-19e3b2d67063" />
      <TestMethod codeBase="/workspace/SqlTestDataGenerator.Tests/bin/Debug/net8.0/SqlTestDataGenerator.Tests.dll" adapterTypeName="executor://mstestadapter/v2" className="SqlTestDataGenerator.Tests.ExecuteQueryWithTestDataAsyncDemoTests" name="TC009_Union_Operations_ShouldHandleMultipleSelects" />
    </UnitTest>
    <UnitTest name="ExecuteQueryWithTestDataAsync_PerformanceWithStrictCount_MustMatch" storage="/workspace/sqltestdatagenerator.tests/bin/debug/net8.0/sqltestdatagenerator.tests.dll" id="aad2f952-d9f7-c03e-94f4-c9ad3d450082">
      <TestCategory>
        <TestCategoryItem TestCategory="StrictRecordCount" />
        <TestCategoryItem TestCategory="RecordCountVerification" />
      </TestCategory>
      <Execution id="f9d57624-de19-438d-8a2c-ed0786013063" />
      <TestMethod codeBase="/workspace/SqlTestDataGenerator.Tests/bin/Debug/net8.0/SqlTestDataGenerator.Tests.dll" adapterTypeName="executor://mstestadapter/v2" className="SqlTestDataGenerator.Tests.RecordCountStrictVerificationTests" name="ExecuteQueryWithTestDataAsync_PerformanceWithStrictCount_MustMatch" />
    </UnitTest>
    <UnitTest name="ExtractBetweenConstraints_WithDateValues_ShouldExtractCorrectly" storage="/workspace/sqltestdatagenerator.tests/bin/debug/net8.0/sqltestdatagenerator.tests.dll" id="8d13d544-5f8f-925e-c535-770dd2454212">
      <TestCategory>
        <TestCategoryItem TestCategory="ComprehensiveConstraints" />
      </TestCategory>
      <Execution id="7a6cd104-879d-4e52-b8dc-9c10432fbbaf" />
      <TestMethod codeBase="/workspace/SqlTestDataGenerator.Tests/bin/Debug/net8.0/SqlTestDataGenerator.Tests.dll" adapterTypeName="executor://mstestadapter/v2" className="SqlTestDataGenerator.Tests.ComprehensiveConstraintExtractorTests" name="ExtractBetweenConstraints_WithDateValues_ShouldExtractCorrectly" />
    </UnitTest>
    <UnitTest name="TestExtractConstraints_AllNewPatternsCombined_ShouldExtractAll" storage="/workspace/sqltestdatagenerator.tests/bin/debug/net8.0/sqltestdatagenerator.tests.dll" id="56223bc0-c4e1-c666-e2df-cb845d303b68">
      <TestCategory>
        <TestCategoryItem TestCategory="Enhanced-Extraction" />
      </TestCategory>
      <Execution id="b85d6f44-ccd7-4d3c-a63f-7ecb8cccfe5c" />
      <TestMethod codeBase="/workspace/SqlTestDataGenerator.Tests/bin/Debug/net8.0/SqlTestDataGenerator.Tests.dll" adapterTypeName="executor://mstestadapter/v2" className="SqlTestDataGenerator.Tests.EnhancedConstraintExtractionTests" name="TestExtractConstraints_AllNewPatternsCombined_ShouldExtractAll" />
    </UnitTest>
    <UnitTest name="ExtractExistsConstraints_SimpleNotExists_ShouldExtractCorrectly" storage="/workspace/sqltestdatagenerator.tests/bin/debug/net8.0/sqltestdatagenerator.tests.dll" id="c0e01d56-99bd-dc71-a75c-8c6658a29dc2">
      <Execution id="5d723ff5-b6ff-4e1f-81c7-9821b20d94d3" />
      <TestMethod codeBase="/workspace/SqlTestDataGenerator.Tests/bin/Debug/net8.0/SqlTestDataGenerator.Tests.dll" adapterTypeName="executor://mstestadapter/v2" className="SqlTestDataGenerator.Tests.ExistsConstraintExtractionTests" name="ExtractExistsConstraints_SimpleNotExists_ShouldExtractCorrectly" />
    </UnitTest>
    <UnitTest name="GenerateBogusData_ComplexSchema_ShouldCreateValidInserts" storage="/workspace/sqltestdatagenerator.tests/bin/debug/net8.0/sqltestdatagenerator.tests.dll" id="9a6daf30-33f8-a7b2-ec97-a643f5b8ceae">
      <Execution id="28ee0563-d9ea-4950-852b-266aa602d328" />
      <TestMethod codeBase="/workspace/SqlTestDataGenerator.Tests/bin/Debug/net8.0/SqlTestDataGenerator.Tests.dll" adapterTypeName="executor://mstestadapter/v2" className="SqlTestDataGenerator.Tests.ComplexDataGenerationTests" name="GenerateBogusData_ComplexSchema_ShouldCreateValidInserts" />
    </UnitTest>
    <UnitTest name="ExtractTablesFromQuery_ComplexSQL_ShouldHandleMultipleJoins" storage="/workspace/sqltestdatagenerator.tests/bin/debug/net8.0/sqltestdatagenerator.tests.dll" id="2ba22d0d-6589-7197-68b1-8359f9ab44f9">
      <Execution id="927bc3d9-f3ba-4bb5-88ec-f9cea7332037" />
      <TestMethod codeBase="/workspace/SqlTestDataGenerator.Tests/bin/Debug/net8.0/SqlTestDataGenerator.Tests.dll" adapterTypeName="executor://mstestadapter/v2" className="SqlTestDataGenerator.Tests.ComplexSqlGenerationTests" name="ExtractTablesFromQuery_ComplexSQL_ShouldHandleMultipleJoins" />
    </UnitTest>
    <UnitTest name="ExtractAllConstraints_WithComplexQuery_ShouldExtractAllTypes" storage="/workspace/sqltestdatagenerator.tests/bin/debug/net8.0/sqltestdatagenerator.tests.dll" id="d94c37bd-9528-f060-511c-4dfe1f44244d">
      <TestCategory>
        <TestCategoryItem TestCategory="ComprehensiveConstraints" />
      </TestCategory>
      <Execution id="fd55de70-5cf0-4f6d-a879-da901ae4b020" />
      <TestMethod codeBase="/workspace/SqlTestDataGenerator.Tests/bin/Debug/net8.0/SqlTestDataGenerator.Tests.dll" adapterTypeName="executor://mstestadapter/v2" className="SqlTestDataGenerator.Tests.ComprehensiveConstraintExtractorTests" name="ExtractAllConstraints_WithComplexQuery_ShouldExtractAllTypes" />
    </UnitTest>
    <UnitTest name="LogMethodEntry_ShouldLogWithCorrectContext" storage="/workspace/sqltestdatagenerator.tests/bin/debug/net8.0/sqltestdatagenerator.tests.dll" id="f44ee653-06d8-88fd-5d52-7ca3b54ee5e5">
      <Execution id="de1a4c6d-4792-449e-babf-1976f6a10246" />
      <TestMethod codeBase="/workspace/SqlTestDataGenerator.Tests/bin/Debug/net8.0/SqlTestDataGenerator.Tests.dll" adapterTypeName="executor://mstestadapter/v2" className="SqlTestDataGenerator.Tests.LoggerServiceTests" name="LogMethodEntry_ShouldLogWithCorrectContext" />
    </UnitTest>
    <UnitTest name="TestExtractConstraints_InClauseNumericList_ShouldExtractValues" storage="/workspace/sqltestdatagenerator.tests/bin/debug/net8.0/sqltestdatagenerator.tests.dll" id="e180762e-d5f1-31a1-a39f-da1a238da0a2">
      <TestCategory>
        <TestCategoryItem TestCategory="Enhanced-Extraction" />
      </TestCategory>
      <Execution id="5da01556-7fe4-45b6-baf1-451eb2e5dc59" />
      <TestMethod codeBase="/workspace/SqlTestDataGenerator.Tests/bin/Debug/net8.0/SqlTestDataGenerator.Tests.dll" adapterTypeName="executor://mstestadapter/v2" className="SqlTestDataGenerator.Tests.EnhancedConstraintExtractionTests" name="TestExtractConstraints_InClauseNumericList_ShouldExtractValues" />
    </UnitTest>
    <UnitTest name="TC002_20_ExecuteQueryWithTestDataAsync_SimpleSQL_WithGeminiAI" storage="/workspace/sqltestdatagenerator.tests/bin/debug/net8.0/sqltestdatagenerator.tests.dll" id="52fb0373-feef-f3e6-6b7c-b0a6051bc365">
      <TestCategory>
        <TestCategoryItem TestCategory="AI-MySQL-Real" />
        <TestCategoryItem TestCategory="Integration" />
      </TestCategory>
      <Execution id="b64d8ef4-33c7-46d8-adc0-1f24a9dc45d2" />
      <TestMethod codeBase="/workspace/SqlTestDataGenerator.Tests/bin/Debug/net8.0/SqlTestDataGenerator.Tests.dll" adapterTypeName="executor://mstestadapter/v2" className="SqlTestDataGenerator.Tests.ExecuteQueryWithTestDataAsyncDemoTests" name="TC002_20_ExecuteQueryWithTestDataAsync_SimpleSQL_WithGeminiAI" />
    </UnitTest>
    <UnitTest name="GenerateBogusData_LargeDataset_ShouldHandleUniqueConstraints" storage="/workspace/sqltestdatagenerator.tests/bin/debug/net8.0/sqltestdatagenerator.tests.dll" id="841aba5c-167f-c0d8-d4a9-4c6ca4256425">
      <TestCategory>
        <TestCategoryItem TestCategory="BugFix" />
      </TestCategory>
      <Execution id="57e8ca3c-8625-4ace-bcbf-54445bb135fa" />
      <TestMethod codeBase="/workspace/SqlTestDataGenerator.Tests/bin/Debug/net8.0/SqlTestDataGenerator.Tests.dll" adapterTypeName="executor://mstestadapter/v2" className="SqlTestDataGenerator.Tests.DuplicateKeyBugFixTests" name="GenerateBogusData_LargeDataset_ShouldHandleUniqueConstraints" />
    </UnitTest>
    <UnitTest name="TC011_Subqueries_WithExistsAndIn_ShouldHandleComplexLogic" storage="/workspace/sqltestdatagenerator.tests/bin/debug/net8.0/sqltestdatagenerator.tests.dll" id="cb5bffe8-1b8a-0d8d-5a3f-e1ad0ad5499c">
      <TestCategory>
        <TestCategoryItem TestCategory="SQL-Keywords" />
        <TestCategoryItem TestCategory="Integration" />
      </TestCategory>
      <Execution id="9d420289-682a-4f0f-b978-2e85f67dc643" />
      <TestMethod codeBase="/workspace/SqlTestDataGenerator.Tests/bin/Debug/net8.0/SqlTestDataGenerator.Tests.dll" adapterTypeName="executor://mstestadapter/v2" className="SqlTestDataGenerator.Tests.ExecuteQueryWithTestDataAsyncDemoTests" name="TC011_Subqueries_WithExistsAndIn_ShouldHandleComplexLogic" />
    </UnitTest>
    <UnitTest name="TestConnection_AlternativeMySQL_ShouldConnect" storage="/workspace/sqltestdatagenerator.tests/bin/debug/net8.0/sqltestdatagenerator.tests.dll" id="de2148e8-fb9e-8b47-4b81-491d8235a8ac">
      <TestCategory>
        <TestCategoryItem TestCategory="RealMySQL" />
      </TestCategory>
      <Execution id="3e385a55-e3fb-4917-bc96-f9ea261e5ba6" />
      <TestMethod codeBase="/workspace/SqlTestDataGenerator.Tests/bin/Debug/net8.0/SqlTestDataGenerator.Tests.dll" adapterTypeName="executor://mstestadapter/v2" className="SqlTestDataGenerator.Tests.RealMySQLIntegrationTests" name="TestConnection_AlternativeMySQL_ShouldConnect" />
    </UnitTest>
    <UnitTest name="GetLogEntries_ShouldReturnEntriesInDescendingOrder" storage="/workspace/sqltestdatagenerator.tests/bin/debug/net8.0/sqltestdatagenerator.tests.dll" id="f3efa36b-3e8e-e41d-23c1-29c1d865b7b2">
      <Execution id="d99c1612-5deb-4d8d-862f-9b277773f7c3" />
      <TestMethod codeBase="/workspace/SqlTestDataGenerator.Tests/bin/Debug/net8.0/SqlTestDataGenerator.Tests.dll" adapterTypeName="executor://mstestadapter/v2" className="SqlTestDataGenerator.Tests.LoggerServiceTests" name="GetLogEntries_ShouldReturnEntriesInDescendingOrder" />
    </UnitTest>
    <UnitTest name="ValidateMySQLSyntax_InvalidQuery_ShouldReturnFalse" storage="/workspace/sqltestdatagenerator.tests/bin/debug/net8.0/sqltestdatagenerator.tests.dll" id="e0fbe67e-bf5e-0a04-e1b9-1f890e4b8443">
      <TestCategory>
        <TestCategoryItem TestCategory="MySQLDateConverter" />
      </TestCategory>
      <Execution id="d4c4e55e-194d-4df2-a7b0-481cfe36c8b0" />
      <TestMethod codeBase="/workspace/SqlTestDataGenerator.Tests/bin/Debug/net8.0/SqlTestDataGenerator.Tests.dll" adapterTypeName="executor://mstestadapter/v2" className="SqlTestDataGenerator.Tests.MySQLDateFunctionConverterTests" name="ValidateMySQLSyntax_InvalidQuery_ShouldReturnFalse" />
    </UnitTest>
    <UnitTest name="Debug_StepByStep_FallbackGeneration" storage="/workspace/sqltestdatagenerator.tests/bin/debug/net8.0/sqltestdatagenerator.tests.dll" id="68ffb8d5-c832-0bdb-ccdf-f2c0712818bc">
      <TestCategory>
        <TestCategoryItem TestCategory="Constraint-Aware" />
      </TestCategory>
      <Execution id="b05640f5-afcb-4459-85ac-694645e65bb9" />
      <TestMethod codeBase="/workspace/SqlTestDataGenerator.Tests/bin/Debug/net8.0/SqlTestDataGenerator.Tests.dll" adapterTypeName="executor://mstestadapter/v2" className="SqlTestDataGenerator.Tests.ConstraintAwareGenerationTests" name="Debug_StepByStep_FallbackGeneration" />
    </UnitTest>
    <UnitTest name="TestGeminiServiceInitialization" storage="/workspace/sqltestdatagenerator.tests/bin/debug/net8.0/sqltestdatagenerator.tests.dll" id="c6f2c04c-f677-456c-51ca-b43e9a462015">
      <TestCategory>
        <TestCategoryItem TestCategory="AI-Basic" />
      </TestCategory>
      <Execution id="28673b73-4ec7-4972-b8d7-f40bafaf1114" />
      <TestMethod codeBase="/workspace/SqlTestDataGenerator.Tests/bin/Debug/net8.0/SqlTestDataGenerator.Tests.dll" adapterTypeName="executor://mstestadapter/v2" className="SqlTestDataGenerator.Tests.AIIntegrationBasicTest" name="TestGeminiServiceInitialization" />
    </UnitTest>
    <UnitTest name="IsApiKeyConfigured_WithNoKey_ShouldReturnFalse" storage="/workspace/sqltestdatagenerator.tests/bin/debug/net8.0/sqltestdatagenerator.tests.dll" id="1144c8a3-62a7-cc5f-27cf-4ae9d2e2115c">
      <Execution id="52df3dc6-d3d7-419a-835b-a00985e2e456" />
      <TestMethod codeBase="/workspace/SqlTestDataGenerator.Tests/bin/Debug/net8.0/SqlTestDataGenerator.Tests.dll" adapterTypeName="executor://mstestadapter/v2" className="SqlTestDataGenerator.Tests.ConfigurationServiceTests" name="IsApiKeyConfigured_WithNoKey_ShouldReturnFalse" />
    </UnitTest>
    <UnitTest name="ExtractAllConstraints_WithoutTableAlias_ShouldExtractCorrectly" storage="/workspace/sqltestdatagenerator.tests/bin/debug/net8.0/sqltestdatagenerator.tests.dll" id="dd4dcdfc-3229-d26a-a927-8c8874ede311">
      <TestCategory>
        <TestCategoryItem TestCategory="ComprehensiveConstraints" />
      </TestCategory>
      <Execution id="d2c7144a-45b7-4a8a-8706-521bcaab3367" />
      <TestMethod codeBase="/workspace/SqlTestDataGenerator.Tests/bin/Debug/net8.0/SqlTestDataGenerator.Tests.dll" adapterTypeName="executor://mstestadapter/v2" className="SqlTestDataGenerator.Tests.ComprehensiveConstraintExtractorTests" name="ExtractAllConstraints_WithoutTableAlias_ShouldExtractCorrectly" />
    </UnitTest>
    <UnitTest name="ExecuteQueryWithTestDataAsync_MultipleRuns_ShouldAlwaysBeUnique" storage="/workspace/sqltestdatagenerator.tests/bin/debug/net8.0/sqltestdatagenerator.tests.dll" id="f6459aea-f0c1-f81e-519d-6d38d4140c43">
      <TestCategory>
        <TestCategoryItem TestCategory="MySQLIntegration" />
      </TestCategory>
      <Execution id="2766048f-fe75-49f9-aeb5-9b1a2cba08cb" />
      <TestMethod codeBase="/workspace/SqlTestDataGenerator.Tests/bin/Debug/net8.0/SqlTestDataGenerator.Tests.dll" adapterTypeName="executor://mstestadapter/v2" className="SqlTestDataGenerator.Tests.MySQLIntegrationDuplicateKeyTests" name="ExecuteQueryWithTestDataAsync_MultipleRuns_ShouldAlwaysBeUnique" />
    </UnitTest>
    <UnitTest name="TestCompleteWorkflow_DesiredToGeneratedToCommittedToVerified" storage="/workspace/sqltestdatagenerator.tests/bin/debug/net8.0/sqltestdatagenerator.tests.dll" id="70128367-1104-e472-1271-9c18ebb476f8">
      <Execution id="faf7e03d-1b8a-4728-b9e3-5b59ca27a750" />
      <TestMethod codeBase="/workspace/SqlTestDataGenerator.Tests/bin/Debug/net8.0/SqlTestDataGenerator.Tests.dll" adapterTypeName="executor://mstestadapter/v2" className="SqlTestDataGenerator.Tests.CompleteWorkflowAutomatedTest" name="TestCompleteWorkflow_DesiredToGeneratedToCommittedToVerified" />
    </UnitTest>
    <UnitTest name="TC010_AggregateFunction_WithGroupBy_ShouldGenerateData" storage="/workspace/sqltestdatagenerator.tests/bin/debug/net8.0/sqltestdatagenerator.tests.dll" id="7ec98a93-65bc-1691-fbcb-29f0384b3e5f">
      <TestCategory>
        <TestCategoryItem TestCategory="SQL-Keywords" />
        <TestCategoryItem TestCategory="Integration" />
      </TestCategory>
      <Execution id="5497cb99-66cd-4fdb-9c61-7ad6d98c0504" />
      <TestMethod codeBase="/workspace/SqlTestDataGenerator.Tests/bin/Debug/net8.0/SqlTestDataGenerator.Tests.dll" adapterTypeName="executor://mstestadapter/v2" className="SqlTestDataGenerator.Tests.ExecuteQueryWithTestDataAsyncDemoTests" name="TC010_AggregateFunction_WithGroupBy_ShouldGenerateData" />
    </UnitTest>
    <UnitTest name="TC015_DateTimeFunctions_WithCalculations_ShouldHandleTemporalData" storage="/workspace/sqltestdatagenerator.tests/bin/debug/net8.0/sqltestdatagenerator.tests.dll" id="2e266685-4e99-7827-1a5f-a9f5bc730d79">
      <TestCategory>
        <TestCategoryItem TestCategory="SQL-Keywords" />
        <TestCategoryItem TestCategory="Integration" />
      </TestCategory>
      <Execution id="628effda-81d6-423a-bc53-3e01fff6877f" />
      <TestMethod codeBase="/workspace/SqlTestDataGenerator.Tests/bin/Debug/net8.0/SqlTestDataGenerator.Tests.dll" adapterTypeName="executor://mstestadapter/v2" className="SqlTestDataGenerator.Tests.ExecuteQueryWithTestDataAsyncDemoTests" name="TC015_DateTimeFunctions_WithCalculations_ShouldHandleTemporalData" />
    </UnitTest>
    <UnitTest name="SaveUserSettings_WithValidSettings_ShouldReturnTrue" storage="/workspace/sqltestdatagenerator.tests/bin/debug/net8.0/sqltestdatagenerator.tests.dll" id="1e0cca3b-ca0b-0a7f-a62a-a76fda7ff72a">
      <Execution id="e6ac5750-e8e2-4958-810c-c79f180066c0" />
      <TestMethod codeBase="/workspace/SqlTestDataGenerator.Tests/bin/Debug/net8.0/SqlTestDataGenerator.Tests.dll" adapterTypeName="executor://mstestadapter/v2" className="SqlTestDataGenerator.Tests.ConfigurationServiceTests" name="SaveUserSettings_WithValidSettings_ShouldReturnTrue" />
    </UnitTest>
    <UnitTest name="TestExtractConstraints_BooleanConstraints_ShouldExtractCorrectly" storage="/workspace/sqltestdatagenerator.tests/bin/debug/net8.0/sqltestdatagenerator.tests.dll" id="14d87284-5071-f880-5b2b-ddbe92bfcff3">
      <TestCategory>
        <TestCategoryItem TestCategory="Constraint-Extraction" />
      </TestCategory>
      <Execution id="61a83ddb-14c9-4018-a090-686e983bd438" />
      <TestMethod codeBase="/workspace/SqlTestDataGenerator.Tests/bin/Debug/net8.0/SqlTestDataGenerator.Tests.dll" adapterTypeName="executor://mstestadapter/v2" className="SqlTestDataGenerator.Tests.ComprehensiveConstraintExtractionTests" name="TestExtractConstraints_BooleanConstraints_ShouldExtractCorrectly" />
    </UnitTest>
    <UnitTest name="Test_RegenerationPerformance_AcceptableTimeFrame" storage="/workspace/sqltestdatagenerator.tests/bin/debug/net8.0/sqltestdatagenerator.tests.dll" id="40ff5d80-f68a-7ba8-c0f1-893d478cb72e">
      <TestCategory>
        <TestCategoryItem TestCategory="Constraint-Aware" />
      </TestCategory>
      <Execution id="30d4a325-3655-413c-a686-255908b82f89" />
      <TestMethod codeBase="/workspace/SqlTestDataGenerator.Tests/bin/Debug/net8.0/SqlTestDataGenerator.Tests.dll" adapterTypeName="executor://mstestadapter/v2" className="SqlTestDataGenerator.Tests.ConstraintAwareGenerationTests" name="Test_RegenerationPerformance_AcceptableTimeFrame" />
    </UnitTest>
    <UnitTest name="ParseQuery_ComplexVietnameseSQL_ShouldHandleAllElements" storage="/workspace/sqltestdatagenerator.tests/bin/debug/net8.0/sqltestdatagenerator.tests.dll" id="d35ae7fa-bd41-8e33-426d-126198b0fc12">
      <TestCategory>
        <TestCategoryItem TestCategory="DateAddUTF8Fixes" />
      </TestCategory>
      <Execution id="4ccd8eaf-6722-453b-bc79-231ff114341e" />
      <TestMethod codeBase="/workspace/SqlTestDataGenerator.Tests/bin/Debug/net8.0/SqlTestDataGenerator.Tests.dll" adapterTypeName="executor://mstestadapter/v2" className="SqlTestDataGenerator.Tests.SqlDateAddUTF8Tests" name="ParseQuery_ComplexVietnameseSQL_ShouldHandleAllElements" />
    </UnitTest>
    <UnitTest name="ExtractExistsConstraints_MultipleWhitespaces_ShouldExtractCorrectly" storage="/workspace/sqltestdatagenerator.tests/bin/debug/net8.0/sqltestdatagenerator.tests.dll" id="91935916-0cd6-2247-f98b-684553fbf0fb">
      <Execution id="a85e0401-8e3d-4d02-ba5d-87cf36275cd3" />
      <TestMethod codeBase="/workspace/SqlTestDataGenerator.Tests/bin/Debug/net8.0/SqlTestDataGenerator.Tests.dll" adapterTypeName="executor://mstestadapter/v2" className="SqlTestDataGenerator.Tests.ExistsConstraintExtractionTests" name="ExtractExistsConstraints_MultipleWhitespaces_ShouldExtractCorrectly" />
    </UnitTest>
    <UnitTest name="ConvertToMySQLSyntax_DatetimeYears_ShouldConvertToDateAdd" storage="/workspace/sqltestdatagenerator.tests/bin/debug/net8.0/sqltestdatagenerator.tests.dll" id="03c035d2-b594-de46-1c22-55fd252fe9a7">
      <TestCategory>
        <TestCategoryItem TestCategory="MySQLDateConverter" />
      </TestCategory>
      <Execution id="a0377e3d-0383-4f19-9d3b-b8a134dcd09e" />
      <TestMethod codeBase="/workspace/SqlTestDataGenerator.Tests/bin/Debug/net8.0/SqlTestDataGenerator.Tests.dll" adapterTypeName="executor://mstestadapter/v2" className="SqlTestDataGenerator.Tests.MySQLDateFunctionConverterTests" name="ConvertToMySQLSyntax_DatetimeYears_ShouldConvertToDateAdd" />
    </UnitTest>
    <UnitTest name="GenerateBogusData_Companies_ShouldCreateCompanyData" storage="/workspace/sqltestdatagenerator.tests/bin/debug/net8.0/sqltestdatagenerator.tests.dll" id="738bd56e-e4d1-f571-372f-1f02cb5587ac">
      <Execution id="cccbb52b-90b1-4a75-8fde-3573d09fb9a6" />
      <TestMethod codeBase="/workspace/SqlTestDataGenerator.Tests/bin/Debug/net8.0/SqlTestDataGenerator.Tests.dll" adapterTypeName="executor://mstestadapter/v2" className="SqlTestDataGenerator.Tests.ComplexDataGenerationTests" name="GenerateBogusData_Companies_ShouldCreateCompanyData" />
    </UnitTest>
    <UnitTest name="TestExtractConstraints_EmptyWhere_ShouldHandleGracefully" storage="/workspace/sqltestdatagenerator.tests/bin/debug/net8.0/sqltestdatagenerator.tests.dll" id="68f3e440-4885-c4c9-72f3-92ff5e100405">
      <TestCategory>
        <TestCategoryItem TestCategory="Missing-Patterns" />
      </TestCategory>
      <Execution id="f7cf297a-2db3-4a18-9b4f-5885ba287750" />
      <TestMethod codeBase="/workspace/SqlTestDataGenerator.Tests/bin/Debug/net8.0/SqlTestDataGenerator.Tests.dll" adapterTypeName="executor://mstestadapter/v2" className="SqlTestDataGenerator.Tests.MissingSqlPatternsTests" name="TestExtractConstraints_EmptyWhere_ShouldHandleGracefully" />
    </UnitTest>
    <UnitTest name="LogInfo_ShouldCreateLogEntry" storage="/workspace/sqltestdatagenerator.tests/bin/debug/net8.0/sqltestdatagenerator.tests.dll" id="675d804e-7ee5-6644-2c5b-a336f6ed033e">
      <Execution id="c623d98e-6f79-49c7-a163-9e5b73356438" />
      <TestMethod codeBase="/workspace/SqlTestDataGenerator.Tests/bin/Debug/net8.0/SqlTestDataGenerator.Tests.dll" adapterTypeName="executor://mstestadapter/v2" className="SqlTestDataGenerator.Tests.LoggerServiceTests" name="LogInfo_ShouldCreateLogEntry" />
    </UnitTest>
    <UnitTest name="LoadAppSettings_WithMissingFile_ShouldReturnDefaults" storage="/workspace/sqltestdatagenerator.tests/bin/debug/net8.0/sqltestdatagenerator.tests.dll" id="e3d9b8e8-1d08-66db-840d-a960aae363de">
      <Execution id="c3f4e447-2d79-4449-bb7a-ff070d3739c9" />
      <TestMethod codeBase="/workspace/SqlTestDataGenerator.Tests/bin/Debug/net8.0/SqlTestDataGenerator.Tests.dll" adapterTypeName="executor://mstestadapter/v2" className="SqlTestDataGenerator.Tests.ConfigurationServiceTests" name="LoadAppSettings_WithMissingFile_ShouldReturnDefaults" />
    </UnitTest>
    <UnitTest name="TestGetNextFlashModel" storage="/workspace/sqltestdatagenerator.tests/bin/debug/net8.0/sqltestdatagenerator.tests.dll" id="e66a12a6-2992-4559-0940-4e677c37d285">
      <Execution id="f18736c7-59d4-493f-96b4-104e433a7601" />
      <TestMethod codeBase="/workspace/SqlTestDataGenerator.Tests/bin/Debug/net8.0/SqlTestDataGenerator.Tests.dll" adapterTypeName="executor://mstestadapter/v2" className="SqlTestDataGenerator.Tests.DailyApiLimitTests" name="TestGetNextFlashModel" />
    </UnitTest>
    <UnitTest name="AddRecentQuery_ShouldLimitTo20Queries" storage="/workspace/sqltestdatagenerator.tests/bin/debug/net8.0/sqltestdatagenerator.tests.dll" id="8b41ed37-8e2a-590a-c55d-20fbb8244176">
      <Execution id="23de4ab1-9104-46c9-9719-9bff186190a3" />
      <TestMethod codeBase="/workspace/SqlTestDataGenerator.Tests/bin/Debug/net8.0/SqlTestDataGenerator.Tests.dll" adapterTypeName="executor://mstestadapter/v2" className="SqlTestDataGenerator.Tests.ConfigurationServiceTests" name="AddRecentQuery_ShouldLimitTo20Queries" />
    </UnitTest>
    <UnitTest name="TestExtractConstraints_BetweenOperators_ShouldExtractRanges" storage="/workspace/sqltestdatagenerator.tests/bin/debug/net8.0/sqltestdatagenerator.tests.dll" id="cfa4458e-912b-84e4-7950-bc08d42037b2">
      <TestCategory>
        <TestCategoryItem TestCategory="Missing-Patterns" />
      </TestCategory>
      <Execution id="1c57dc5b-2064-4528-b9f7-ddef3e258189" />
      <TestMethod codeBase="/workspace/SqlTestDataGenerator.Tests/bin/Debug/net8.0/SqlTestDataGenerator.Tests.dll" adapterTypeName="executor://mstestadapter/v2" className="SqlTestDataGenerator.Tests.MissingSqlPatternsTests" name="TestExtractConstraints_BetweenOperators_ShouldExtractRanges" />
    </UnitTest>
    <UnitTest name="ExtractLikePatterns_WithVariousPatterns_ShouldExtractCorrectly" storage="/workspace/sqltestdatagenerator.tests/bin/debug/net8.0/sqltestdatagenerator.tests.dll" id="b2d44d35-af78-e80c-973a-cc11463c0ff3">
      <TestCategory>
        <TestCategoryItem TestCategory="ComprehensiveConstraints" />
      </TestCategory>
      <Execution id="317f4df7-f8ce-499d-8fa4-c1d2ae6d4b33" />
      <TestMethod codeBase="/workspace/SqlTestDataGenerator.Tests/bin/Debug/net8.0/SqlTestDataGenerator.Tests.dll" adapterTypeName="executor://mstestadapter/v2" className="SqlTestDataGenerator.Tests.ComprehensiveConstraintExtractorTests" name="ExtractLikePatterns_WithVariousPatterns_ShouldExtractCorrectly" />
    </UnitTest>
    <UnitTest name="TC008_LeftJoin_WithComplexWhere_ShouldGenerateCorrectData" storage="/workspace/sqltestdatagenerator.tests/bin/debug/net8.0/sqltestdatagenerator.tests.dll" id="cce9f4cf-aa90-ecb3-649e-ff4fc00300d7">
      <TestCategory>
        <TestCategoryItem TestCategory="SQL-Keywords" />
        <TestCategoryItem TestCategory="Integration" />
      </TestCategory>
      <Execution id="e7e3a6dd-5795-474a-8f2a-1f4c31226d91" />
      <TestMethod codeBase="/workspace/SqlTestDataGenerator.Tests/bin/Debug/net8.0/SqlTestDataGenerator.Tests.dll" adapterTypeName="executor://mstestadapter/v2" className="SqlTestDataGenerator.Tests.ExecuteQueryWithTestDataAsyncDemoTests" name="TC008_LeftJoin_WithComplexWhere_ShouldGenerateCorrectData" />
    </UnitTest>
    <UnitTest name="Debug_ConstraintValidation_WithoutAI" storage="/workspace/sqltestdatagenerator.tests/bin/debug/net8.0/sqltestdatagenerator.tests.dll" id="5a366c63-f307-9fef-f255-5d7561c90c4a">
      <TestCategory>
        <TestCategoryItem TestCategory="Constraint-Aware" />
      </TestCategory>
      <Execution id="3a2e4064-be45-449f-9762-b4d090c045d2" />
      <TestMethod codeBase="/workspace/SqlTestDataGenerator.Tests/bin/Debug/net8.0/SqlTestDataGenerator.Tests.dll" adapterTypeName="executor://mstestadapter/v2" className="SqlTestDataGenerator.Tests.ConstraintAwareGenerationTests" name="Debug_ConstraintValidation_WithoutAI" />
    </UnitTest>
    <UnitTest name="TC006_5_ProveEngineGeneratesRecords_WriteToFile" storage="/workspace/sqltestdatagenerator.tests/bin/debug/net8.0/sqltestdatagenerator.tests.dll" id="214c1e4f-b53b-6028-1f71-6aa1cf0fa2a7">
      <TestCategory>
        <TestCategoryItem TestCategory="Final-Proof" />
        <TestCategoryItem TestCategory="Integration" />
      </TestCategory>
      <Execution id="59bb2e5c-f247-45a7-9973-d211436fa881" />
      <TestMethod codeBase="/workspace/SqlTestDataGenerator.Tests/bin/Debug/net8.0/SqlTestDataGenerator.Tests.dll" adapterTypeName="executor://mstestadapter/v2" className="SqlTestDataGenerator.Tests.ExecuteQueryWithTestDataAsyncDemoTests" name="TC006_5_ProveEngineGeneratesRecords_WriteToFile" />
    </UnitTest>
    <UnitTest name="AddRecentConnection_WithEmptyString_ShouldNotAdd" storage="/workspace/sqltestdatagenerator.tests/bin/debug/net8.0/sqltestdatagenerator.tests.dll" id="703fd9c0-da25-fce0-1fc5-49f590616917">
      <Execution id="b92c90f9-96e0-4461-8411-1dae10c6ef81" />
      <TestMethod codeBase="/workspace/SqlTestDataGenerator.Tests/bin/Debug/net8.0/SqlTestDataGenerator.Tests.dll" adapterTypeName="executor://mstestadapter/v2" className="SqlTestDataGenerator.Tests.ConfigurationServiceTests" name="AddRecentConnection_WithEmptyString_ShouldNotAdd" />
    </UnitTest>
    <UnitTest name="ParseQuery_WhereEqualityWithBoolean_ShouldExtractCondition" storage="/workspace/sqltestdatagenerator.tests/bin/debug/net8.0/sqltestdatagenerator.tests.dll" id="792092c6-d93a-8f16-adcb-8adecb948e81">
      <Execution id="80ec0b11-da2a-49b7-9394-db64cff96778" />
      <TestMethod codeBase="/workspace/SqlTestDataGenerator.Tests/bin/Debug/net8.0/SqlTestDataGenerator.Tests.dll" adapterTypeName="executor://mstestadapter/v2" className="SqlTestDataGenerator.Tests.SqlQueryParserTests" name="ParseQuery_WhereEqualityWithBoolean_ShouldExtractCondition" />
    </UnitTest>
    <UnitTest name="ExtractTablesFromQuery_WithSubqueries_ShouldExtractAllTables" storage="/workspace/sqltestdatagenerator.tests/bin/debug/net8.0/sqltestdatagenerator.tests.dll" id="0a1468aa-72ea-7a6a-8d19-43a4651e3cc0">
      <Execution id="e1d8a6b1-7eea-45d6-a540-f843f0b48c0c" />
      <TestMethod codeBase="/workspace/SqlTestDataGenerator.Tests/bin/Debug/net8.0/SqlTestDataGenerator.Tests.dll" adapterTypeName="executor://mstestadapter/v2" className="SqlTestDataGenerator.Tests.ComplexSqlGenerationTests" name="ExtractTablesFromQuery_WithSubqueries_ShouldExtractAllTables" />
    </UnitTest>
    <UnitTest name="ExecuteQueryWithTestDataAsync_ComplexSQL_ShouldAnalyzeTablesCorrectly" storage="/workspace/sqltestdatagenerator.tests/bin/debug/net8.0/sqltestdatagenerator.tests.dll" id="fe2ba93f-5cee-b7ee-2351-438a93efe0da">
      <Execution id="8a9ee7b3-15ab-474d-8d23-8b7e366801ba" />
      <TestMethod codeBase="/workspace/SqlTestDataGenerator.Tests/bin/Debug/net8.0/SqlTestDataGenerator.Tests.dll" adapterTypeName="executor://mstestadapter/v2" className="SqlTestDataGenerator.Tests.ComplexDataGenerationTests" name="ExecuteQueryWithTestDataAsync_ComplexSQL_ShouldAnalyzeTablesCorrectly" />
    </UnitTest>
    <UnitTest name="ParseQuery_InCondition_ShouldExtractCondition" storage="/workspace/sqltestdatagenerator.tests/bin/debug/net8.0/sqltestdatagenerator.tests.dll" id="85993953-c5ea-34f3-0be1-91b596396f0a">
      <Execution id="ddf1a5b6-8441-48ac-b6e1-a91d339631b4" />
      <TestMethod codeBase="/workspace/SqlTestDataGenerator.Tests/bin/Debug/net8.0/SqlTestDataGenerator.Tests.dll" adapterTypeName="executor://mstestadapter/v2" className="SqlTestDataGenerator.Tests.SqlQueryParserTests" name="ParseQuery_InCondition_ShouldExtractCondition" />
    </UnitTest>
    <UnitTest name="Test_ConstraintAwareAI_GeneratesValidMultiConstraintData" storage="/workspace/sqltestdatagenerator.tests/bin/debug/net8.0/sqltestdatagenerator.tests.dll" id="f41a6de3-78c5-2b8f-5956-6caff97ebdbf">
      <TestCategory>
        <TestCategoryItem TestCategory="Constraint-Aware" />
      </TestCategory>
      <Execution id="487bb06a-4a13-4989-8d1e-84ca5db71da9" />
      <TestMethod codeBase="/workspace/SqlTestDataGenerator.Tests/bin/Debug/net8.0/SqlTestDataGenerator.Tests.dll" adapterTypeName="executor://mstestadapter/v2" className="SqlTestDataGenerator.Tests.ConstraintAwareGenerationTests" name="Test_ConstraintAwareAI_GeneratesValidMultiConstraintData" />
    </UnitTest>
    <UnitTest name="ExtractWhereConstraints_WithEquality_ShouldExtractCorrectly" storage="/workspace/sqltestdatagenerator.tests/bin/debug/net8.0/sqltestdatagenerator.tests.dll" id="2e3a2884-35f6-a539-5e71-989f9d7d6414">
      <TestCategory>
        <TestCategoryItem TestCategory="ComprehensiveConstraints" />
      </TestCategory>
      <Execution id="9e9d7cd4-1840-43c5-a7ef-e7026300ba49" />
      <TestMethod codeBase="/workspace/SqlTestDataGenerator.Tests/bin/Debug/net8.0/SqlTestDataGenerator.Tests.dll" adapterTypeName="executor://mstestadapter/v2" className="SqlTestDataGenerator.Tests.ComprehensiveConstraintExtractorTests" name="ExtractWhereConstraints_WithEquality_ShouldExtractCorrectly" />
    </UnitTest>
    <UnitTest name="ParseQuery_ComplexVowisQuery_ExtractsAllConstraints" storage="/workspace/sqltestdatagenerator.tests/bin/debug/net8.0/sqltestdatagenerator.tests.dll" id="bbeef4d7-958f-2851-0543-d9f6c6ae356f">
      <TestCategory>
        <TestCategoryItem TestCategory="ScriptDom" />
      </TestCategory>
      <Execution id="22842b51-5228-4070-8fff-3f429533da15" />
      <TestMethod codeBase="/workspace/SqlTestDataGenerator.Tests/bin/Debug/net8.0/SqlTestDataGenerator.Tests.dll" adapterTypeName="executor://mstestadapter/v2" className="SqlTestDataGenerator.Tests.SqlQueryParserV2Tests" name="ParseQuery_ComplexVowisQuery_ExtractsAllConstraints" />
    </UnitTest>
    <UnitTest name="GenerateBogusData_Roles_ShouldCreateRoleData" storage="/workspace/sqltestdatagenerator.tests/bin/debug/net8.0/sqltestdatagenerator.tests.dll" id="73b4e0f6-cf3c-19a3-0ea6-75f4d1acac05">
      <Execution id="5b528287-50ee-4ec0-83a2-37f469b54498" />
      <TestMethod codeBase="/workspace/SqlTestDataGenerator.Tests/bin/Debug/net8.0/SqlTestDataGenerator.Tests.dll" adapterTypeName="executor://mstestadapter/v2" className="SqlTestDataGenerator.Tests.ComplexDataGenerationTests" name="GenerateBogusData_Roles_ShouldCreateRoleData" />
    </UnitTest>
    <UnitTest name="ParseQuery_LikeCondition_ExtractsCleanValue" storage="/workspace/sqltestdatagenerator.tests/bin/debug/net8.0/sqltestdatagenerator.tests.dll" id="29c39ae5-9cce-1642-84cb-dfbfca4d141f">
      <TestCategory>
        <TestCategoryItem TestCategory="ScriptDom" />
      </TestCategory>
      <Execution id="61720804-f4de-4ed3-ad49-b015085adcd2" />
      <TestMethod codeBase="/workspace/SqlTestDataGenerator.Tests/bin/Debug/net8.0/SqlTestDataGenerator.Tests.dll" adapterTypeName="executor://mstestadapter/v2" className="SqlTestDataGenerator.Tests.SqlQueryParserV2Tests" name="ParseQuery_LikeCondition_ExtractsCleanValue" />
    </UnitTest>
    <UnitTest name="LogMethodExit_ShouldLogWithReturnValue" storage="/workspace/sqltestdatagenerator.tests/bin/debug/net8.0/sqltestdatagenerator.tests.dll" id="782553cb-21f7-84ee-e145-2339af4a7fb8">
      <Execution id="d4f749e9-9687-4e3c-9cad-78f313310cd1" />
      <TestMethod codeBase="/workspace/SqlTestDataGenerator.Tests/bin/Debug/net8.0/SqlTestDataGenerator.Tests.dll" adapterTypeName="executor://mstestadapter/v2" className="SqlTestDataGenerator.Tests.LoggerServiceTests" name="LogMethodExit_ShouldLogWithReturnValue" />
    </UnitTest>
    <UnitTest name="TestExtractConstraints_InClauseSubquery_ShouldExtractSubquery" storage="/workspace/sqltestdatagenerator.tests/bin/debug/net8.0/sqltestdatagenerator.tests.dll" id="bf7011a5-9321-ec3e-fc18-281f6a788ac4">
      <TestCategory>
        <TestCategoryItem TestCategory="Enhanced-Extraction" />
      </TestCategory>
      <Execution id="4f1ee4ee-5684-4242-85bb-5b96db7f5079" />
      <TestMethod codeBase="/workspace/SqlTestDataGenerator.Tests/bin/Debug/net8.0/SqlTestDataGenerator.Tests.dll" adapterTypeName="executor://mstestadapter/v2" className="SqlTestDataGenerator.Tests.EnhancedConstraintExtractionTests" name="TestExtractConstraints_InClauseSubquery_ShouldExtractSubquery" />
    </UnitTest>
    <UnitTest name="ParseQuery_NullCondition_ExtractsCorrectly" storage="/workspace/sqltestdatagenerator.tests/bin/debug/net8.0/sqltestdatagenerator.tests.dll" id="641ee920-3d9f-c1e4-4220-092e77dba1f3">
      <TestCategory>
        <TestCategoryItem TestCategory="SqlQueryParserV3" />
      </TestCategory>
      <Execution id="81f7a358-a0c5-4e77-b296-ada5a069c33a" />
      <TestMethod codeBase="/workspace/SqlTestDataGenerator.Tests/bin/Debug/net8.0/SqlTestDataGenerator.Tests.dll" adapterTypeName="executor://mstestadapter/v2" className="SqlTestDataGenerator.Tests.SqlQueryParserV3Tests" name="ParseQuery_NullCondition_ExtractsCorrectly" />
    </UnitTest>
    <UnitTest name="ParseQuery_SimpleSelect_ExtractsBasicInfo" storage="/workspace/sqltestdatagenerator.tests/bin/debug/net8.0/sqltestdatagenerator.tests.dll" id="8ff78ea0-9547-b89c-150e-ad1ff9a9e72a">
      <TestCategory>
        <TestCategoryItem TestCategory="ScriptDom" />
      </TestCategory>
      <Execution id="74f2f84d-9231-4b37-b3d3-2d723d1e9820" />
      <TestMethod codeBase="/workspace/SqlTestDataGenerator.Tests/bin/Debug/net8.0/SqlTestDataGenerator.Tests.dll" adapterTypeName="executor://mstestadapter/v2" className="SqlTestDataGenerator.Tests.SqlQueryParserV2Tests" name="ParseQuery_SimpleSelect_ExtractsBasicInfo" />
    </UnitTest>
    <UnitTest name="LoadAppSettings_WithInvalidJson_ShouldReturnDefaults" storage="/workspace/sqltestdatagenerator.tests/bin/debug/net8.0/sqltestdatagenerator.tests.dll" id="09384688-af92-b310-fc14-d9dedce48bb9">
      <Execution id="a145ce08-55e8-4496-aabc-66384c96f366" />
      <TestMethod codeBase="/workspace/SqlTestDataGenerator.Tests/bin/Debug/net8.0/SqlTestDataGenerator.Tests.dll" adapterTypeName="executor://mstestadapter/v2" className="SqlTestDataGenerator.Tests.ConfigurationServiceTests" name="LoadAppSettings_WithInvalidJson_ShouldReturnDefaults" />
    </UnitTest>
    <UnitTest name="TC_FULL_WORKFLOW_001_ComplexSQL_GenerateExportCommit" storage="/workspace/sqltestdatagenerator.tests/bin/debug/net8.0/sqltestdatagenerator.tests.dll" id="7e2bc572-ab64-60fb-b05f-959acda39dc2">
      <Execution id="7ab6060f-0213-4f19-ae0e-016930acc0df" />
      <TestMethod codeBase="/workspace/SqlTestDataGenerator.Tests/bin/Debug/net8.0/SqlTestDataGenerator.Tests.dll" adapterTypeName="executor://mstestadapter/v2" className="SqlTestDataGenerator.Tests.FullWorkflowIntegrationTests" name="TC_FULL_WORKFLOW_001_ComplexSQL_GenerateExportCommit" />
    </UnitTest>
    <UnitTest name="GetConstraintsForColumn_WithSpecificColumn_ShouldReturnOnlyColumnConstraints" storage="/workspace/sqltestdatagenerator.tests/bin/debug/net8.0/sqltestdatagenerator.tests.dll" id="20ee9d7c-8101-2eda-002f-53ca537517d6">
      <TestCategory>
        <TestCategoryItem TestCategory="ComprehensiveConstraints" />
      </TestCategory>
      <Execution id="4837163d-ce79-4a86-9f62-c1b81c5aab58" />
      <TestMethod codeBase="/workspace/SqlTestDataGenerator.Tests/bin/Debug/net8.0/SqlTestDataGenerator.Tests.dll" adapterTypeName="executor://mstestadapter/v2" className="SqlTestDataGenerator.Tests.ComprehensiveConstraintExtractorTests" name="GetConstraintsForColumn_WithSpecificColumn_ShouldReturnOnlyColumnConstraints" />
    </UnitTest>
    <UnitTest name="ParseQuery_WithJoin_ExtractsJoinRequirements" storage="/workspace/sqltestdatagenerator.tests/bin/debug/net8.0/sqltestdatagenerator.tests.dll" id="421a5565-ddc6-10fa-8d73-07739fee5ff0">
      <TestCategory>
        <TestCategoryItem TestCategory="ScriptDom" />
      </TestCategory>
      <Execution id="4f3a43ee-4682-4209-af7f-9de608ec73f3" />
      <TestMethod codeBase="/workspace/SqlTestDataGenerator.Tests/bin/Debug/net8.0/SqlTestDataGenerator.Tests.dll" adapterTypeName="executor://mstestadapter/v2" className="SqlTestDataGenerator.Tests.SqlQueryParserV2Tests" name="ParseQuery_WithJoin_ExtractsJoinRequirements" />
    </UnitTest>
    <UnitTest name="ExtractDateConstraints_ComplexDateAddQuery_ShouldParseAll" storage="/workspace/sqltestdatagenerator.tests/bin/debug/net8.0/sqltestdatagenerator.tests.dll" id="4d0c6d38-bd12-6bbb-d3b6-600299f706cd">
      <TestCategory>
        <TestCategoryItem TestCategory="DateAddUTF8Fixes" />
      </TestCategory>
      <Execution id="c874f550-6b8c-4105-802f-a88945a09c90" />
      <TestMethod codeBase="/workspace/SqlTestDataGenerator.Tests/bin/Debug/net8.0/SqlTestDataGenerator.Tests.dll" adapterTypeName="executor://mstestadapter/v2" className="SqlTestDataGenerator.Tests.SqlDateAddUTF8Tests" name="ExtractDateConstraints_ComplexDateAddQuery_ShouldParseAll" />
    </UnitTest>
    <UnitTest name="TestConnection_RealMySQL_ShouldConnect" storage="/workspace/sqltestdatagenerator.tests/bin/debug/net8.0/sqltestdatagenerator.tests.dll" id="ac906b8e-7608-0616-ce10-5e68b0415e31">
      <TestCategory>
        <TestCategoryItem TestCategory="RealMySQL" />
      </TestCategory>
      <Execution id="9436e373-3c19-4a92-8063-91fca05a701e" />
      <TestMethod codeBase="/workspace/SqlTestDataGenerator.Tests/bin/Debug/net8.0/SqlTestDataGenerator.Tests.dll" adapterTypeName="executor://mstestadapter/v2" className="SqlTestDataGenerator.Tests.RealMySQLIntegrationTests" name="TestConnection_RealMySQL_ShouldConnect" />
    </UnitTest>
    <UnitTest name="ParseQuery_MultipleConditionsWithAnd_ExtractsAllConditions" storage="/workspace/sqltestdatagenerator.tests/bin/debug/net8.0/sqltestdatagenerator.tests.dll" id="2961e15a-0a3d-3b2e-3f18-6eafe65af0cf">
      <TestCategory>
        <TestCategoryItem TestCategory="ScriptDom" />
      </TestCategory>
      <Execution id="99541d1a-9d81-483d-85b0-ca5369b57ef9" />
      <TestMethod codeBase="/workspace/SqlTestDataGenerator.Tests/bin/Debug/net8.0/SqlTestDataGenerator.Tests.dll" adapterTypeName="executor://mstestadapter/v2" className="SqlTestDataGenerator.Tests.SqlQueryParserV2Tests" name="ParseQuery_MultipleConditionsWithAnd_ExtractsAllConditions" />
    </UnitTest>
    <UnitTest name="ExecuteQueryWithTestDataAsync_ComplexSQL_MySQL_ShouldGenerateAndExecute" storage="/workspace/sqltestdatagenerator.tests/bin/debug/net8.0/sqltestdatagenerator.tests.dll" id="87d98090-fa30-9a96-a551-3b4155dfeb29">
      <Execution id="b516cfef-c764-4d0a-b940-9398d78e072d" />
      <TestMethod codeBase="/workspace/SqlTestDataGenerator.Tests/bin/Debug/net8.0/SqlTestDataGenerator.Tests.dll" adapterTypeName="executor://mstestadapter/v2" className="SqlTestDataGenerator.Tests.ComplexDataGenerationTests" name="ExecuteQueryWithTestDataAsync_ComplexSQL_MySQL_ShouldGenerateAndExecute" />
    </UnitTest>
    <UnitTest name="TC016_StringFunctions_WithTextProcessing_ShouldHandleTextData" storage="/workspace/sqltestdatagenerator.tests/bin/debug/net8.0/sqltestdatagenerator.tests.dll" id="4b0fe614-589b-02cc-6add-321c3b0d4dcc">
      <TestCategory>
        <TestCategoryItem TestCategory="SQL-Keywords" />
        <TestCategoryItem TestCategory="Integration" />
      </TestCategory>
      <Execution id="c71e9d2d-a23c-4913-8f83-2bab0fc51fbe" />
      <TestMethod codeBase="/workspace/SqlTestDataGenerator.Tests/bin/Debug/net8.0/SqlTestDataGenerator.Tests.dll" adapterTypeName="executor://mstestadapter/v2" className="SqlTestDataGenerator.Tests.ExecuteQueryWithTestDataAsyncDemoTests" name="TC016_StringFunctions_WithTextProcessing_ShouldHandleTextData" />
    </UnitTest>
    <UnitTest name="TestExtractConstraints_ExistsSubqueries_ShouldExtractExistsLogic" storage="/workspace/sqltestdatagenerator.tests/bin/debug/net8.0/sqltestdatagenerator.tests.dll" id="139f964d-2ed3-9b03-c583-30ed1c65c31c">
      <TestCategory>
        <TestCategoryItem TestCategory="Missing-Patterns" />
      </TestCategory>
      <Execution id="e3fec467-7e9a-435c-bad4-f5e2da1ce467" />
      <TestMethod codeBase="/workspace/SqlTestDataGenerator.Tests/bin/Debug/net8.0/SqlTestDataGenerator.Tests.dll" adapterTypeName="executor://mstestadapter/v2" className="SqlTestDataGenerator.Tests.MissingSqlPatternsTests" name="TestExtractConstraints_ExistsSubqueries_ShouldExtractExistsLogic" />
    </UnitTest>
    <UnitTest name="ParseQuery_ComplexQuery_ShouldHandleAllConditionTypes" storage="/workspace/sqltestdatagenerator.tests/bin/debug/net8.0/sqltestdatagenerator.tests.dll" id="6c8fe354-0fbf-caad-5153-93da1c924108">
      <Execution id="8d661c3a-e878-412f-84e8-dfb441b4c7dd" />
      <TestMethod codeBase="/workspace/SqlTestDataGenerator.Tests/bin/Debug/net8.0/SqlTestDataGenerator.Tests.dll" adapterTypeName="executor://mstestadapter/v2" className="SqlTestDataGenerator.Tests.SqlQueryParserTests" name="ParseQuery_ComplexQuery_ShouldHandleAllConditionTypes" />
    </UnitTest>
    <UnitTest name="TestApiUsageStatistics" storage="/workspace/sqltestdatagenerator.tests/bin/debug/net8.0/sqltestdatagenerator.tests.dll" id="f78d7304-2501-8055-abba-3ae1d4828eb2">
      <Execution id="22dc2c15-f3ef-4ee7-a7e3-b42f224716ca" />
      <TestMethod codeBase="/workspace/SqlTestDataGenerator.Tests/bin/Debug/net8.0/SqlTestDataGenerator.Tests.dll" adapterTypeName="executor://mstestadapter/v2" className="SqlTestDataGenerator.Tests.DailyApiLimitTests" name="TestApiUsageStatistics" />
    </UnitTest>
    <UnitTest name="TestDailyLimitSimulation" storage="/workspace/sqltestdatagenerator.tests/bin/debug/net8.0/sqltestdatagenerator.tests.dll" id="1b599d83-b28e-d15e-5626-7477a1fe1c55">
      <Execution id="03d1539c-a10c-4ec4-a6e3-96fdaa5ab1a9" />
      <TestMethod codeBase="/workspace/SqlTestDataGenerator.Tests/bin/Debug/net8.0/SqlTestDataGenerator.Tests.dll" adapterTypeName="executor://mstestadapter/v2" className="SqlTestDataGenerator.Tests.DailyApiLimitTests" name="TestDailyLimitSimulation" />
    </UnitTest>
    <UnitTest name="ExtractAllConstraints_WithCommentsAndWhitespace_ShouldCleanAndExtract" storage="/workspace/sqltestdatagenerator.tests/bin/debug/net8.0/sqltestdatagenerator.tests.dll" id="866b0d3a-b4e9-b29d-5399-970cdfc928ee">
      <TestCategory>
        <TestCategoryItem TestCategory="ComprehensiveConstraints" />
      </TestCategory>
      <Execution id="d0030a3e-76b6-4cc9-9976-bed626863931" />
      <TestMethod codeBase="/workspace/SqlTestDataGenerator.Tests/bin/Debug/net8.0/SqlTestDataGenerator.Tests.dll" adapterTypeName="executor://mstestadapter/v2" className="SqlTestDataGenerator.Tests.ComprehensiveConstraintExtractorTests" name="ExtractAllConstraints_WithCommentsAndWhitespace_ShouldCleanAndExtract" />
    </UnitTest>
    <UnitTest name="TC005_10_ExecuteQueryWithTestDataAsync_ProveEngineWorked_WithQuotaExceeded" storage="/workspace/sqltestdatagenerator.tests/bin/debug/net8.0/sqltestdatagenerator.tests.dll" id="ac734ebd-fa4e-3d65-08af-7925674fc60e">
      <TestCategory>
        <TestCategoryItem TestCategory="MySQL-QuotaProof" />
        <TestCategoryItem TestCategory="Integration" />
      </TestCategory>
      <Execution id="26d723e3-827c-4900-8e1f-579535ec8604" />
      <TestMethod codeBase="/workspace/SqlTestDataGenerator.Tests/bin/Debug/net8.0/SqlTestDataGenerator.Tests.dll" adapterTypeName="executor://mstestadapter/v2" className="SqlTestDataGenerator.Tests.ExecuteQueryWithTestDataAsyncDemoTests" name="TC005_10_ExecuteQueryWithTestDataAsync_ProveEngineWorked_WithQuotaExceeded" />
    </UnitTest>
    <UnitTest name="ParseQuery_InCondition_ExtractsValues" storage="/workspace/sqltestdatagenerator.tests/bin/debug/net8.0/sqltestdatagenerator.tests.dll" id="2fa55c7d-005e-6918-5d22-2aa304fbd3ea">
      <TestCategory>
        <TestCategoryItem TestCategory="SqlQueryParserV3" />
      </TestCategory>
      <Execution id="516a48bd-fa6a-4735-8053-75307369c926" />
      <TestMethod codeBase="/workspace/SqlTestDataGenerator.Tests/bin/Debug/net8.0/SqlTestDataGenerator.Tests.dll" adapterTypeName="executor://mstestadapter/v2" className="SqlTestDataGenerator.Tests.SqlQueryParserV3Tests" name="ParseQuery_InCondition_ExtractsValues" />
    </UnitTest>
    <UnitTest name="ExecuteQueryWithTestDataAsync_VietnameseBusinessQuery_MustMatchExpectedRecords" storage="/workspace/sqltestdatagenerator.tests/bin/debug/net8.0/sqltestdatagenerator.tests.dll" id="5e00d5b1-4727-db09-8981-fa70944ad954">
      <TestCategory>
        <TestCategoryItem TestCategory="StrictRecordCount" />
        <TestCategoryItem TestCategory="RecordCountVerification" />
      </TestCategory>
      <Execution id="7b033bae-ae9d-4f09-8bdd-1c1b041569a2" />
      <TestMethod codeBase="/workspace/SqlTestDataGenerator.Tests/bin/Debug/net8.0/SqlTestDataGenerator.Tests.dll" adapterTypeName="executor://mstestadapter/v2" className="SqlTestDataGenerator.Tests.RecordCountStrictVerificationTests" name="ExecuteQueryWithTestDataAsync_VietnameseBusinessQuery_MustMatchExpectedRecords" />
    </UnitTest>
    <UnitTest name="ExecuteQueryWithTestDataAsync_RealMySQL_ComplexJoin_ShouldWork" storage="/workspace/sqltestdatagenerator.tests/bin/debug/net8.0/sqltestdatagenerator.tests.dll" id="ee222a8f-8775-cb61-ba8e-0d406e0fadb8">
      <TestCategory>
        <TestCategoryItem TestCategory="RealMySQL" />
      </TestCategory>
      <Execution id="8b64da9a-ce61-4384-8bc7-e546309bcbb5" />
      <TestMethod codeBase="/workspace/SqlTestDataGenerator.Tests/bin/Debug/net8.0/SqlTestDataGenerator.Tests.dll" adapterTypeName="executor://mstestadapter/v2" className="SqlTestDataGenerator.Tests.RealMySQLIntegrationTests" name="ExecuteQueryWithTestDataAsync_RealMySQL_ComplexJoin_ShouldWork" />
    </UnitTest>
    <UnitTest name="ExtractTablesFromQuery_BusinessSQL_ShouldHandleComplexJoins" storage="/workspace/sqltestdatagenerator.tests/bin/debug/net8.0/sqltestdatagenerator.tests.dll" id="a1c2a851-2b3c-da00-084b-1b2db17868fc">
      <Execution id="1aa5916f-b787-4d28-8e0d-ccc45c4266cd" />
      <TestMethod codeBase="/workspace/SqlTestDataGenerator.Tests/bin/Debug/net8.0/SqlTestDataGenerator.Tests.dll" adapterTypeName="executor://mstestadapter/v2" className="SqlTestDataGenerator.Tests.ComplexDataGenerationTests" name="ExtractTablesFromQuery_BusinessSQL_ShouldHandleComplexJoins" />
    </UnitTest>
    <UnitTest name="TC012_WindowFunctions_WithPartitionBy_ShouldGenerateRankedData" storage="/workspace/sqltestdatagenerator.tests/bin/debug/net8.0/sqltestdatagenerator.tests.dll" id="b3b940d3-9e45-ea47-3b09-97145cecb2a3">
      <TestCategory>
        <TestCategoryItem TestCategory="SQL-Keywords" />
        <TestCategoryItem TestCategory="Integration" />
      </TestCategory>
      <Execution id="c5b387f3-c181-432e-b60e-6c6713db41b4" />
      <TestMethod codeBase="/workspace/SqlTestDataGenerator.Tests/bin/Debug/net8.0/SqlTestDataGenerator.Tests.dll" adapterTypeName="executor://mstestadapter/v2" className="SqlTestDataGenerator.Tests.ExecuteQueryWithTestDataAsyncDemoTests" name="TC012_WindowFunctions_WithPartitionBy_ShouldGenerateRankedData" />
    </UnitTest>
    <UnitTest name="ExtractWhereConstraints_WithComparison_ShouldExtractCorrectly" storage="/workspace/sqltestdatagenerator.tests/bin/debug/net8.0/sqltestdatagenerator.tests.dll" id="760b8c6c-883b-dc5b-32da-1ca02fa16c88">
      <TestCategory>
        <TestCategoryItem TestCategory="ComprehensiveConstraints" />
      </TestCategory>
      <Execution id="c7edc20e-0926-4ca9-b29e-015f0c18370a" />
      <TestMethod codeBase="/workspace/SqlTestDataGenerator.Tests/bin/Debug/net8.0/SqlTestDataGenerator.Tests.dll" adapterTypeName="executor://mstestadapter/v2" className="SqlTestDataGenerator.Tests.ComprehensiveConstraintExtractorTests" name="ExtractWhereConstraints_WithComparison_ShouldExtractCorrectly" />
    </UnitTest>
    <UnitTest name="ExtractConstraints_VietnameseCompanyNames_ShouldHandleUTF8" storage="/workspace/sqltestdatagenerator.tests/bin/debug/net8.0/sqltestdatagenerator.tests.dll" id="278e084f-9a34-6925-0e6c-7057c40b7f0a">
      <TestCategory>
        <TestCategoryItem TestCategory="DateAddUTF8Fixes" />
      </TestCategory>
      <Execution id="cb163f3a-5c52-4558-bf5f-f49b1fcef36c" />
      <TestMethod codeBase="/workspace/SqlTestDataGenerator.Tests/bin/Debug/net8.0/SqlTestDataGenerator.Tests.dll" adapterTypeName="executor://mstestadapter/v2" className="SqlTestDataGenerator.Tests.SqlDateAddUTF8Tests" name="ExtractConstraints_VietnameseCompanyNames_ShouldHandleUTF8" />
    </UnitTest>
    <UnitTest name="ExtractInClauseConstraints_WithSubquery_ShouldExtractCorrectly" storage="/workspace/sqltestdatagenerator.tests/bin/debug/net8.0/sqltestdatagenerator.tests.dll" id="423c4f37-64a8-ef35-39db-e60b85768eb5">
      <TestCategory>
        <TestCategoryItem TestCategory="ComprehensiveConstraints" />
      </TestCategory>
      <Execution id="08ddf405-5fd1-453e-b3d5-6762f72690b4" />
      <TestMethod codeBase="/workspace/SqlTestDataGenerator.Tests/bin/Debug/net8.0/SqlTestDataGenerator.Tests.dll" adapterTypeName="executor://mstestadapter/v2" className="SqlTestDataGenerator.Tests.ComprehensiveConstraintExtractorTests" name="ExtractInClauseConstraints_WithSubquery_ShouldExtractCorrectly" />
    </UnitTest>
    <UnitTest name="GenerateBogusData_EdgeCase_SmallRecordCount_ShouldWork" storage="/workspace/sqltestdatagenerator.tests/bin/debug/net8.0/sqltestdatagenerator.tests.dll" id="3aedb538-9959-6d5e-04af-0c2cfee7284b">
      <TestCategory>
        <TestCategoryItem TestCategory="BugFix" />
      </TestCategory>
      <Execution id="3307442d-792d-463c-895d-d7a4843f0a72" />
      <TestMethod codeBase="/workspace/SqlTestDataGenerator.Tests/bin/Debug/net8.0/SqlTestDataGenerator.Tests.dll" adapterTypeName="executor://mstestadapter/v2" className="SqlTestDataGenerator.Tests.DuplicateKeyBugFixTests" name="GenerateBogusData_EdgeCase_SmallRecordCount_ShouldWork" />
    </UnitTest>
    <UnitTest name="ParseQuery_InvalidSQL_FallsBackToRegexParser" storage="/workspace/sqltestdatagenerator.tests/bin/debug/net8.0/sqltestdatagenerator.tests.dll" id="a9a3fdfb-fc6c-0289-9351-e1328a7a24c5">
      <TestCategory>
        <TestCategoryItem TestCategory="ScriptDom" />
      </TestCategory>
      <Execution id="0f1cc5d7-989e-4f14-ba24-7d7d92c32464" />
      <TestMethod codeBase="/workspace/SqlTestDataGenerator.Tests/bin/Debug/net8.0/SqlTestDataGenerator.Tests.dll" adapterTypeName="executor://mstestadapter/v2" className="SqlTestDataGenerator.Tests.SqlQueryParserV2Tests" name="ParseQuery_InvalidSQL_FallsBackToRegexParser" />
    </UnitTest>
    <UnitTest name="ExecuteQueryWithTestDataAsync_RealMySQL_SimpleUsers_ShouldWork" storage="/workspace/sqltestdatagenerator.tests/bin/debug/net8.0/sqltestdatagenerator.tests.dll" id="1cc1fb92-e16d-82c2-933a-f52034eb3af8">
      <TestCategory>
        <TestCategoryItem TestCategory="RealMySQL" />
      </TestCategory>
      <Execution id="cccfb7d7-5e48-4c3a-ae0c-7e48e07b5af9" />
      <TestMethod codeBase="/workspace/SqlTestDataGenerator.Tests/bin/Debug/net8.0/SqlTestDataGenerator.Tests.dll" adapterTypeName="executor://mstestadapter/v2" className="SqlTestDataGenerator.Tests.RealMySQLIntegrationTests" name="ExecuteQueryWithTestDataAsync_RealMySQL_SimpleUsers_ShouldWork" />
    </UnitTest>
    <UnitTest name="StringEncoding_VietnameseText_ShouldPreserveCharacters" storage="/workspace/sqltestdatagenerator.tests/bin/debug/net8.0/sqltestdatagenerator.tests.dll" id="0b31b055-dd09-9ece-b730-b2afc725f7ea">
      <TestCategory>
        <TestCategoryItem TestCategory="DateAddUTF8Fixes" />
      </TestCategory>
      <Execution id="9a0fce8d-553d-40b6-9374-fca2ce51b17c" />
      <TestMethod codeBase="/workspace/SqlTestDataGenerator.Tests/bin/Debug/net8.0/SqlTestDataGenerator.Tests.dll" adapterTypeName="executor://mstestadapter/v2" className="SqlTestDataGenerator.Tests.SqlDateAddUTF8Tests" name="StringEncoding_VietnameseText_ShouldPreserveCharacters" />
    </UnitTest>
    <UnitTest name="EngineService_ComplexSQL_ShouldGenerateAndExecute" storage="/workspace/sqltestdatagenerator.tests/bin/debug/net8.0/sqltestdatagenerator.tests.dll" id="33c5568e-bbee-9fcd-f82b-149fcb93c6af">
      <Execution id="9f3f9a63-a8c1-4eee-a4c5-622d5f23c4f2" />
      <TestMethod codeBase="/workspace/SqlTestDataGenerator.Tests/bin/Debug/net8.0/SqlTestDataGenerator.Tests.dll" adapterTypeName="executor://mstestadapter/v2" className="SqlTestDataGenerator.Tests.ComplexDataGenerationTests" name="EngineService_ComplexSQL_ShouldGenerateAndExecute" />
    </UnitTest>
    <UnitTest name="GenerateBogusData_Performance_ShouldHandleLargeDataGeneration" storage="/workspace/sqltestdatagenerator.tests/bin/debug/net8.0/sqltestdatagenerator.tests.dll" id="32e944a3-567c-3548-b7a9-d08caf3da627">
      <Execution id="abf324ca-e315-4504-a1b5-352f6e24ef03" />
      <TestMethod codeBase="/workspace/SqlTestDataGenerator.Tests/bin/Debug/net8.0/SqlTestDataGenerator.Tests.dll" adapterTypeName="executor://mstestadapter/v2" className="SqlTestDataGenerator.Tests.ComplexDataGenerationTests" name="GenerateBogusData_Performance_ShouldHandleLargeDataGeneration" />
    </UnitTest>
    <UnitTest name="TestExtractConstraints_InClauseStringList_ShouldExtractValues" storage="/workspace/sqltestdatagenerator.tests/bin/debug/net8.0/sqltestdatagenerator.tests.dll" id="0c9b3b0d-f01b-6247-7450-dcba24b5eb70">
      <TestCategory>
        <TestCategoryItem TestCategory="Enhanced-Extraction" />
      </TestCategory>
      <Execution id="dd430bea-b873-453e-a041-b1871df79548" />
      <TestMethod codeBase="/workspace/SqlTestDataGenerator.Tests/bin/Debug/net8.0/SqlTestDataGenerator.Tests.dll" adapterTypeName="executor://mstestadapter/v2" className="SqlTestDataGenerator.Tests.EnhancedConstraintExtractionTests" name="TestExtractConstraints_InClauseStringList_ShouldExtractValues" />
    </UnitTest>
    <UnitTest name="TestSimpleWorkflow_GenericQuery" storage="/workspace/sqltestdatagenerator.tests/bin/debug/net8.0/sqltestdatagenerator.tests.dll" id="bc5324e6-bb6a-ee73-021c-bdeb249f570a">
      <Execution id="3a3fdaa7-526d-4cf8-88ed-5375b190a20e" />
      <TestMethod codeBase="/workspace/SqlTestDataGenerator.Tests/bin/Debug/net8.0/SqlTestDataGenerator.Tests.dll" adapterTypeName="executor://mstestadapter/v2" className="SqlTestDataGenerator.Tests.SimpleWorkflowTest" name="TestSimpleWorkflow_GenericQuery" />
    </UnitTest>
    <UnitTest name="AddRecentConnection_WithNewConnection_ShouldAddToList" storage="/workspace/sqltestdatagenerator.tests/bin/debug/net8.0/sqltestdatagenerator.tests.dll" id="ab7d94f6-5ca5-f08f-3e41-1182b84f4daa">
      <Execution id="b9887993-6db9-4207-986b-882f0d7c71de" />
      <TestMethod codeBase="/workspace/SqlTestDataGenerator.Tests/bin/Debug/net8.0/SqlTestDataGenerator.Tests.dll" adapterTypeName="executor://mstestadapter/v2" className="SqlTestDataGenerator.Tests.ConfigurationServiceTests" name="AddRecentConnection_WithNewConnection_ShouldAddToList" />
    </UnitTest>
    <UnitTest name="ExecuteQueryWithTestDataAsync_SmallRecordCount_ShouldRespectMinimumRecords" storage="/workspace/sqltestdatagenerator.tests/bin/debug/net8.0/sqltestdatagenerator.tests.dll" id="23cc72f6-1284-a2ea-98e9-9489eed12fa1">
      <TestCategory>
        <TestCategoryItem TestCategory="RecordCount" />
      </TestCategory>
      <Execution id="74cb33d1-9303-4377-a6dc-42611bb7964d" />
      <TestMethod codeBase="/workspace/SqlTestDataGenerator.Tests/bin/Debug/net8.0/SqlTestDataGenerator.Tests.dll" adapterTypeName="executor://mstestadapter/v2" className="SqlTestDataGenerator.Tests.RecordCountVerificationTests" name="ExecuteQueryWithTestDataAsync_SmallRecordCount_ShouldRespectMinimumRecords" />
    </UnitTest>
    <UnitTest name="TC014_CaseStatements_WithNestedConditions_ShouldGenerateBusinessLogic" storage="/workspace/sqltestdatagenerator.tests/bin/debug/net8.0/sqltestdatagenerator.tests.dll" id="2acdce03-4502-c064-9941-04cc0d8bb0ed">
      <TestCategory>
        <TestCategoryItem TestCategory="SQL-Keywords" />
        <TestCategoryItem TestCategory="Integration" />
      </TestCategory>
      <Execution id="2012193f-5435-46be-b374-80c63f0c36a4" />
      <TestMethod codeBase="/workspace/SqlTestDataGenerator.Tests/bin/Debug/net8.0/SqlTestDataGenerator.Tests.dll" adapterTypeName="executor://mstestadapter/v2" className="SqlTestDataGenerator.Tests.ExecuteQueryWithTestDataAsyncDemoTests" name="TC014_CaseStatements_WithNestedConditions_ShouldGenerateBusinessLogic" />
    </UnitTest>
    <UnitTest name="ParseQuery_LikeCondition_ExtractsPattern" storage="/workspace/sqltestdatagenerator.tests/bin/debug/net8.0/sqltestdatagenerator.tests.dll" id="0f1b5e3b-a740-7c67-898e-c93ae524edbe">
      <TestCategory>
        <TestCategoryItem TestCategory="SqlQueryParserV3" />
      </TestCategory>
      <Execution id="3d5a8d22-2746-4654-b6a1-41989da56a11" />
      <TestMethod codeBase="/workspace/SqlTestDataGenerator.Tests/bin/Debug/net8.0/SqlTestDataGenerator.Tests.dll" adapterTypeName="executor://mstestadapter/v2" className="SqlTestDataGenerator.Tests.SqlQueryParserV3Tests" name="ParseQuery_LikeCondition_ExtractsPattern" />
    </UnitTest>
    <UnitTest name="Test_ConstraintValidator_AcceptsValidVnextCompanyName" storage="/workspace/sqltestdatagenerator.tests/bin/debug/net8.0/sqltestdatagenerator.tests.dll" id="de22f4a7-8831-63d7-f688-faf32738999d">
      <TestCategory>
        <TestCategoryItem TestCategory="Constraint-Aware" />
      </TestCategory>
      <Execution id="7ec34bfe-e916-486d-93e9-37e6a6975c3f" />
      <TestMethod codeBase="/workspace/SqlTestDataGenerator.Tests/bin/Debug/net8.0/SqlTestDataGenerator.Tests.dll" adapterTypeName="executor://mstestadapter/v2" className="SqlTestDataGenerator.Tests.ConstraintAwareGenerationTests" name="Test_ConstraintValidator_AcceptsValidVnextCompanyName" />
    </UnitTest>
    <UnitTest name="ParseQuery_WithJoinAdditionalConditions_ExtractsBothJoinAndWhere" storage="/workspace/sqltestdatagenerator.tests/bin/debug/net8.0/sqltestdatagenerator.tests.dll" id="b921dbe5-c96f-5732-982c-eb4ed8e2a56f">
      <TestCategory>
        <TestCategoryItem TestCategory="ScriptDom" />
      </TestCategory>
      <Execution id="f1c5e0cf-85a8-42dc-9bbf-ecba1809deac" />
      <TestMethod codeBase="/workspace/SqlTestDataGenerator.Tests/bin/Debug/net8.0/SqlTestDataGenerator.Tests.dll" adapterTypeName="executor://mstestadapter/v2" className="SqlTestDataGenerator.Tests.SqlQueryParserV2Tests" name="ParseQuery_WithJoinAdditionalConditions_ExtractsBothJoinAndWhere" />
    </UnitTest>
    <UnitTest name="ExtractTablesFromQuery_SQLWithComments_ShouldIgnoreComments" storage="/workspace/sqltestdatagenerator.tests/bin/debug/net8.0/sqltestdatagenerator.tests.dll" id="7d12d01e-dee5-0e97-3f0b-9d5358bf1a9d">
      <Execution id="a4cfa5c0-32c2-410c-b3c5-f94a9a151164" />
      <TestMethod codeBase="/workspace/SqlTestDataGenerator.Tests/bin/Debug/net8.0/SqlTestDataGenerator.Tests.dll" adapterTypeName="executor://mstestadapter/v2" className="SqlTestDataGenerator.Tests.ComplexSqlGenerationTests" name="ExtractTablesFromQuery_SQLWithComments_ShouldIgnoreComments" />
    </UnitTest>
    <UnitTest name="SaveUserSettings_WithNullSettings_ShouldReturnFalse" storage="/workspace/sqltestdatagenerator.tests/bin/debug/net8.0/sqltestdatagenerator.tests.dll" id="470a0bfe-993f-05df-1d10-a213d08a730a">
      <Execution id="a649994a-42f1-467f-a416-69b4fddf76fb" />
      <TestMethod codeBase="/workspace/SqlTestDataGenerator.Tests/bin/Debug/net8.0/SqlTestDataGenerator.Tests.dll" adapterTypeName="executor://mstestadapter/v2" className="SqlTestDataGenerator.Tests.ConfigurationServiceTests" name="SaveUserSettings_WithNullSettings_ShouldReturnFalse" />
    </UnitTest>
    <UnitTest name="ExtractNullConstraints_WithoutTableAlias_ShouldExtractCorrectly" storage="/workspace/sqltestdatagenerator.tests/bin/debug/net8.0/sqltestdatagenerator.tests.dll" id="9b97f53b-9d68-7c6d-0aa2-b2322ea14026">
      <TestCategory>
        <TestCategoryItem TestCategory="ComprehensiveConstraints" />
      </TestCategory>
      <Execution id="b3f703f9-d808-49de-99d5-76dc466de4d5" />
      <TestMethod codeBase="/workspace/SqlTestDataGenerator.Tests/bin/Debug/net8.0/SqlTestDataGenerator.Tests.dll" adapterTypeName="executor://mstestadapter/v2" className="SqlTestDataGenerator.Tests.ComprehensiveConstraintExtractorTests" name="ExtractNullConstraints_WithoutTableAlias_ShouldExtractCorrectly" />
    </UnitTest>
    <UnitTest name="ConvertToMySQLSyntax_CaseStatementWithDatetime_ShouldConvert" storage="/workspace/sqltestdatagenerator.tests/bin/debug/net8.0/sqltestdatagenerator.tests.dll" id="13133e83-ddb6-06e7-5855-8b90ef2b579a">
      <TestCategory>
        <TestCategoryItem TestCategory="MySQLDateConverter" />
      </TestCategory>
      <Execution id="63e5be95-1b31-4cb9-ba63-a6cb6079beac" />
      <TestMethod codeBase="/workspace/SqlTestDataGenerator.Tests/bin/Debug/net8.0/SqlTestDataGenerator.Tests.dll" adapterTypeName="executor://mstestadapter/v2" className="SqlTestDataGenerator.Tests.MySQLDateFunctionConverterTests" name="ConvertToMySQLSyntax_CaseStatementWithDatetime_ShouldConvert" />
    </UnitTest>
    <UnitTest name="TestExtractConstraints_ComplexParentheses_ShouldHandleNestedLogic" storage="/workspace/sqltestdatagenerator.tests/bin/debug/net8.0/sqltestdatagenerator.tests.dll" id="d561a39e-b3ae-5830-d2e6-51256ca89cb1">
      <TestCategory>
        <TestCategoryItem TestCategory="Missing-Patterns" />
      </TestCategory>
      <Execution id="100e687d-9af1-4564-b51a-5cd3b4133b02" />
      <TestMethod codeBase="/workspace/SqlTestDataGenerator.Tests/bin/Debug/net8.0/SqlTestDataGenerator.Tests.dll" adapterTypeName="executor://mstestadapter/v2" className="SqlTestDataGenerator.Tests.MissingSqlPatternsTests" name="TestExtractConstraints_ComplexParentheses_ShouldHandleNestedLogic" />
    </UnitTest>
    <UnitTest name="ExtractExistsConstraints_NestedParentheses_ShouldHandleCorrectly" storage="/workspace/sqltestdatagenerator.tests/bin/debug/net8.0/sqltestdatagenerator.tests.dll" id="e2987904-5347-d86b-0f48-2a0688bae6a3">
      <Execution id="b67f190e-b1d5-4241-a5c9-880161a9b8c6" />
      <TestMethod codeBase="/workspace/SqlTestDataGenerator.Tests/bin/Debug/net8.0/SqlTestDataGenerator.Tests.dll" adapterTypeName="executor://mstestadapter/v2" className="SqlTestDataGenerator.Tests.ExistsConstraintExtractionTests" name="ExtractExistsConstraints_NestedParentheses_ShouldHandleCorrectly" />
    </UnitTest>
    <UnitTest name="ParseDateConditions_DateAddWithMonth_ShouldParseCorrectly" storage="/workspace/sqltestdatagenerator.tests/bin/debug/net8.0/sqltestdatagenerator.tests.dll" id="fb448c11-0f7f-5b00-42aa-f078814d3bca">
      <TestCategory>
        <TestCategoryItem TestCategory="DateAddUTF8Fixes" />
      </TestCategory>
      <Execution id="dde74f9c-d44d-4084-a8df-b9c853e0d6c3" />
      <TestMethod codeBase="/workspace/SqlTestDataGenerator.Tests/bin/Debug/net8.0/SqlTestDataGenerator.Tests.dll" adapterTypeName="executor://mstestadapter/v2" className="SqlTestDataGenerator.Tests.SqlDateAddUTF8Tests" name="ParseDateConditions_DateAddWithMonth_ShouldParseCorrectly" />
    </UnitTest>
    <UnitTest name="TestApiLimitBoundaryConditions" storage="/workspace/sqltestdatagenerator.tests/bin/debug/net8.0/sqltestdatagenerator.tests.dll" id="46564af2-7fd2-2128-da44-3a733601d023">
      <Execution id="2abc9b42-b0b5-423d-8f64-149f42a9c788" />
      <TestMethod codeBase="/workspace/SqlTestDataGenerator.Tests/bin/Debug/net8.0/SqlTestDataGenerator.Tests.dll" adapterTypeName="executor://mstestadapter/v2" className="SqlTestDataGenerator.Tests.DailyApiLimitTests" name="TestApiLimitBoundaryConditions" />
    </UnitTest>
    <UnitTest name="ExtractBooleanConstraints_WithVariousFormats_ShouldExtractCorrectly" storage="/workspace/sqltestdatagenerator.tests/bin/debug/net8.0/sqltestdatagenerator.tests.dll" id="a07f75f8-8051-4207-c8e1-9b50be77e563">
      <TestCategory>
        <TestCategoryItem TestCategory="ComprehensiveConstraints" />
      </TestCategory>
      <Execution id="eeb0629a-71a1-47d5-ad6a-a7edfd063853" />
      <TestMethod codeBase="/workspace/SqlTestDataGenerator.Tests/bin/Debug/net8.0/SqlTestDataGenerator.Tests.dll" adapterTypeName="executor://mstestadapter/v2" className="SqlTestDataGenerator.Tests.ComprehensiveConstraintExtractorTests" name="ExtractBooleanConstraints_WithVariousFormats_ShouldExtractCorrectly" />
    </UnitTest>
    <UnitTest name="ParseQuery_NullCondition_ExtractsCorrectly" storage="/workspace/sqltestdatagenerator.tests/bin/debug/net8.0/sqltestdatagenerator.tests.dll" id="79b3e653-2e42-5747-8f83-4719364b0792">
      <TestCategory>
        <TestCategoryItem TestCategory="ScriptDom" />
      </TestCategory>
      <Execution id="4dc3ac71-846e-4a0f-a949-058cce305c0f" />
      <TestMethod codeBase="/workspace/SqlTestDataGenerator.Tests/bin/Debug/net8.0/SqlTestDataGenerator.Tests.dll" adapterTypeName="executor://mstestadapter/v2" className="SqlTestDataGenerator.Tests.SqlQueryParserV2Tests" name="ParseQuery_NullCondition_ExtractsCorrectly" />
    </UnitTest>
    <UnitTest name="TC019_AdvancedWhereClauses_WithComplexConditions_ShouldFilterCorrectly" storage="/workspace/sqltestdatagenerator.tests/bin/debug/net8.0/sqltestdatagenerator.tests.dll" id="8967fa17-c299-4e47-9dde-a8f0a5915c9f">
      <TestCategory>
        <TestCategoryItem TestCategory="SQL-Keywords" />
        <TestCategoryItem TestCategory="Integration" />
      </TestCategory>
      <Execution id="c03b76bd-0ce8-4c9f-af9e-00b5ef1a64d3" />
      <TestMethod codeBase="/workspace/SqlTestDataGenerator.Tests/bin/Debug/net8.0/SqlTestDataGenerator.Tests.dll" adapterTypeName="executor://mstestadapter/v2" className="SqlTestDataGenerator.Tests.ExecuteQueryWithTestDataAsyncDemoTests" name="TC019_AdvancedWhereClauses_WithComplexConditions_ShouldFilterCorrectly" />
    </UnitTest>
    <UnitTest name="ExtractBetweenConstraints_WithStringValues_ShouldExtractCorrectly" storage="/workspace/sqltestdatagenerator.tests/bin/debug/net8.0/sqltestdatagenerator.tests.dll" id="9095faf9-dd7f-d7fb-e451-67e3bb815ecc">
      <TestCategory>
        <TestCategoryItem TestCategory="ComprehensiveConstraints" />
      </TestCategory>
      <Execution id="6c30cdf2-b58a-441b-925c-6fcb87e58c05" />
      <TestMethod codeBase="/workspace/SqlTestDataGenerator.Tests/bin/Debug/net8.0/SqlTestDataGenerator.Tests.dll" adapterTypeName="executor://mstestadapter/v2" className="SqlTestDataGenerator.Tests.ComprehensiveConstraintExtractorTests" name="ExtractBetweenConstraints_WithStringValues_ShouldExtractCorrectly" />
    </UnitTest>
    <UnitTest name="ConvertToMySQLSyntax_BusinessQuery_ShouldFixAllIssues" storage="/workspace/sqltestdatagenerator.tests/bin/debug/net8.0/sqltestdatagenerator.tests.dll" id="181dabdf-6994-9cd1-332b-f3a238c352e6">
      <TestCategory>
        <TestCategoryItem TestCategory="MySQLDateConverter" />
      </TestCategory>
      <Execution id="e133febe-c8d7-4c5c-8202-b91a453effeb" />
      <TestMethod codeBase="/workspace/SqlTestDataGenerator.Tests/bin/Debug/net8.0/SqlTestDataGenerator.Tests.dll" adapterTypeName="executor://mstestadapter/v2" className="SqlTestDataGenerator.Tests.MySQLDateFunctionConverterTests" name="ConvertToMySQLSyntax_BusinessQuery_ShouldFixAllIssues" />
    </UnitTest>
    <UnitTest name="ExecuteQueryWithTestDataAsync_MultiTable_MustGenerateCorrectDistribution" storage="/workspace/sqltestdatagenerator.tests/bin/debug/net8.0/sqltestdatagenerator.tests.dll" id="cff95060-9a70-96c1-ba36-b42d05db42bf">
      <TestCategory>
        <TestCategoryItem TestCategory="StrictRecordCount" />
        <TestCategoryItem TestCategory="RecordCountVerification" />
      </TestCategory>
      <Execution id="7c99807c-d933-454a-a151-f5be229ff4d6" />
      <TestMethod codeBase="/workspace/SqlTestDataGenerator.Tests/bin/Debug/net8.0/SqlTestDataGenerator.Tests.dll" adapterTypeName="executor://mstestadapter/v2" className="SqlTestDataGenerator.Tests.RecordCountStrictVerificationTests" name="ExecuteQueryWithTestDataAsync_MultiTable_MustGenerateCorrectDistribution" />
    </UnitTest>
    <UnitTest name="TestMethod1" storage="/workspace/sqltestdatagenerator.tests/bin/debug/net8.0/sqltestdatagenerator.tests.dll" id="a47e926a-7ce2-0f09-babb-322e9f60373e">
      <Execution id="b3bee123-b3eb-4402-92f2-68531d59dc3d" />
      <TestMethod codeBase="/workspace/SqlTestDataGenerator.Tests/bin/Debug/net8.0/SqlTestDataGenerator.Tests.dll" adapterTypeName="executor://mstestadapter/v2" className="SqlTestDataGenerator.Tests.UnitTest1" name="TestMethod1" />
    </UnitTest>
    <UnitTest name="TC001_AI_ExecuteQueryWithTestDataAsync_ComplexVowisSQL_WithGeminiAI" storage="/workspace/sqltestdatagenerator.tests/bin/debug/net8.0/sqltestdatagenerator.tests.dll" id="4faffafa-f6dd-cf6d-8efc-478e6d6bdbf6">
      <TestCategory>
        <TestCategoryItem TestCategory="AI-Enhanced" />
        <TestCategoryItem TestCategory="Integration" />
      </TestCategory>
      <Execution id="95dc5c83-df82-4fdb-81d4-ac23e703bd5f" />
      <TestMethod codeBase="/workspace/SqlTestDataGenerator.Tests/bin/Debug/net8.0/SqlTestDataGenerator.Tests.dll" adapterTypeName="executor://mstestadapter/v2" className="SqlTestDataGenerator.Tests.ExecuteQueryWithTestDataAsyncDemoTests" name="TC001_AI_ExecuteQueryWithTestDataAsync_ComplexVowisSQL_WithGeminiAI" />
    </UnitTest>
    <UnitTest name="IsApiKeyConfigured_WithValidKey_ShouldReturnTrue" storage="/workspace/sqltestdatagenerator.tests/bin/debug/net8.0/sqltestdatagenerator.tests.dll" id="f718a06e-91df-1e49-9317-91d0e283ac3b">
      <Execution id="774ddf02-0583-4a6b-b061-3eb0a5cbd7eb" />
      <TestMethod codeBase="/workspace/SqlTestDataGenerator.Tests/bin/Debug/net8.0/SqlTestDataGenerator.Tests.dll" adapterTypeName="executor://mstestadapter/v2" className="SqlTestDataGenerator.Tests.ConfigurationServiceTests" name="IsApiKeyConfigured_WithValidKey_ShouldReturnTrue" />
    </UnitTest>
    <UnitTest name="Test_SimplifiedConstraintValidation" storage="/workspace/sqltestdatagenerator.tests/bin/debug/net8.0/sqltestdatagenerator.tests.dll" id="0ec26798-ed4f-fe6b-4885-38fccb91d1c9">
      <TestCategory>
        <TestCategoryItem TestCategory="Constraint-Aware" />
      </TestCategory>
      <Execution id="bc3556ec-359f-433b-835a-3d94894c43e6" />
      <TestMethod codeBase="/workspace/SqlTestDataGenerator.Tests/bin/Debug/net8.0/SqlTestDataGenerator.Tests.dll" adapterTypeName="executor://mstestadapter/v2" className="SqlTestDataGenerator.Tests.ConstraintAwareGenerationTests" name="Test_SimplifiedConstraintValidation" />
    </UnitTest>
    <UnitTest name="TestDailyResetTimeCalculation" storage="/workspace/sqltestdatagenerator.tests/bin/debug/net8.0/sqltestdatagenerator.tests.dll" id="90be9f3f-f7e8-5087-dcab-84ab99d22feb">
      <Execution id="45fe73aa-b22c-4da0-a6f2-8e6a1221b5cb" />
      <TestMethod codeBase="/workspace/SqlTestDataGenerator.Tests/bin/Debug/net8.0/SqlTestDataGenerator.Tests.dll" adapterTypeName="executor://mstestadapter/v2" className="SqlTestDataGenerator.Tests.DailyApiLimitTests" name="TestDailyResetTimeCalculation" />
    </UnitTest>
    <UnitTest name="ExtractNullConstraints_WithIsNull_ShouldExtractCorrectly" storage="/workspace/sqltestdatagenerator.tests/bin/debug/net8.0/sqltestdatagenerator.tests.dll" id="6db14700-ee73-a039-ac8a-97d4f91c8c74">
      <TestCategory>
        <TestCategoryItem TestCategory="ComprehensiveConstraints" />
      </TestCategory>
      <Execution id="b8540ecc-9802-4ad3-b10d-d97e3800bbf7" />
      <TestMethod codeBase="/workspace/SqlTestDataGenerator.Tests/bin/Debug/net8.0/SqlTestDataGenerator.Tests.dll" adapterTypeName="executor://mstestadapter/v2" className="SqlTestDataGenerator.Tests.ComprehensiveConstraintExtractorTests" name="ExtractNullConstraints_WithIsNull_ShouldExtractCorrectly" />
    </UnitTest>
    <UnitTest name="TestModelStatistics" storage="/workspace/sqltestdatagenerator.tests/bin/debug/net8.0/sqltestdatagenerator.tests.dll" id="08b6ce0a-2ce9-b04e-8168-c06998ed03af">
      <Execution id="d0a706e6-c3a9-408a-9307-d39e8998a797" />
      <TestMethod codeBase="/workspace/SqlTestDataGenerator.Tests/bin/Debug/net8.0/SqlTestDataGenerator.Tests.dll" adapterTypeName="executor://mstestadapter/v2" className="SqlTestDataGenerator.Tests.DailyApiLimitTests" name="TestModelStatistics" />
    </UnitTest>
    <UnitTest name="GetOpenAiApiKey_WithPlaceholderKey_ShouldReturnEmpty" storage="/workspace/sqltestdatagenerator.tests/bin/debug/net8.0/sqltestdatagenerator.tests.dll" id="c3d5ba8f-0448-b059-a097-c2b045cc8185">
      <Execution id="a4be48b4-5598-4809-bc3c-bd7bd05b7670" />
      <TestMethod codeBase="/workspace/SqlTestDataGenerator.Tests/bin/Debug/net8.0/SqlTestDataGenerator.Tests.dll" adapterTypeName="executor://mstestadapter/v2" className="SqlTestDataGenerator.Tests.ConfigurationServiceTests" name="GetOpenAiApiKey_WithPlaceholderKey_ShouldReturnEmpty" />
    </UnitTest>
    <UnitTest name="LogWithNullParameters_ShouldNotThrow" storage="/workspace/sqltestdatagenerator.tests/bin/debug/net8.0/sqltestdatagenerator.tests.dll" id="4a6ad4dd-b680-702f-6923-b349b5729e8a">
      <Execution id="7f00df27-c627-4e9c-980c-f8b400bb0c7f" />
      <TestMethod codeBase="/workspace/SqlTestDataGenerator.Tests/bin/Debug/net8.0/SqlTestDataGenerator.Tests.dll" adapterTypeName="executor://mstestadapter/v2" className="SqlTestDataGenerator.Tests.LoggerServiceTests" name="LogWithNullParameters_ShouldNotThrow" />
    </UnitTest>
    <UnitTest name="DisposedLogger_ShouldNotLog" storage="/workspace/sqltestdatagenerator.tests/bin/debug/net8.0/sqltestdatagenerator.tests.dll" id="9ddb3c70-4652-b32c-72ff-06adb9dbe978">
      <Execution id="5f8d9fac-28ff-4430-b768-4235184bdb25" />
      <TestMethod codeBase="/workspace/SqlTestDataGenerator.Tests/bin/Debug/net8.0/SqlTestDataGenerator.Tests.dll" adapterTypeName="executor://mstestadapter/v2" className="SqlTestDataGenerator.Tests.LoggerServiceTests" name="DisposedLogger_ShouldNotLog" />
    </UnitTest>
    <UnitTest name="ParseDateConditions_DateAddWithDays_ShouldParseCorrectly" storage="/workspace/sqltestdatagenerator.tests/bin/debug/net8.0/sqltestdatagenerator.tests.dll" id="29d4bc57-5870-c7dc-b85d-667b481ded6c">
      <TestCategory>
        <TestCategoryItem TestCategory="DateAddUTF8Fixes" />
      </TestCategory>
      <Execution id="19e2bce4-2134-4a4d-8932-200254235fd6" />
      <TestMethod codeBase="/workspace/SqlTestDataGenerator.Tests/bin/Debug/net8.0/SqlTestDataGenerator.Tests.dll" adapterTypeName="executor://mstestadapter/v2" className="SqlTestDataGenerator.Tests.SqlDateAddUTF8Tests" name="ParseDateConditions_DateAddWithDays_ShouldParseCorrectly" />
    </UnitTest>
    <UnitTest name="TestDataGenServiceWithAI" storage="/workspace/sqltestdatagenerator.tests/bin/debug/net8.0/sqltestdatagenerator.tests.dll" id="6f75d98a-bfe6-3583-9772-f6c9d7fc53a6">
      <TestCategory>
        <TestCategoryItem TestCategory="AI-Basic" />
      </TestCategory>
      <Execution id="ffface09-932f-4bf1-b03a-2d54e7513e2d" />
      <TestMethod codeBase="/workspace/SqlTestDataGenerator.Tests/bin/Debug/net8.0/SqlTestDataGenerator.Tests.dll" adapterTypeName="executor://mstestadapter/v2" className="SqlTestDataGenerator.Tests.AIIntegrationBasicTest" name="TestDataGenServiceWithAI" />
    </UnitTest>
    <UnitTest name="IntegrationTest_DateAddAndUTF8_ShouldWorkTogether" storage="/workspace/sqltestdatagenerator.tests/bin/debug/net8.0/sqltestdatagenerator.tests.dll" id="32052917-9976-f6c7-cfe6-55ea2ddeb7ed">
      <TestCategory>
        <TestCategoryItem TestCategory="DateAddUTF8Fixes" />
      </TestCategory>
      <Execution id="d4bd2aaf-7381-45c1-a0b9-05444e39e3c2" />
      <TestMethod codeBase="/workspace/SqlTestDataGenerator.Tests/bin/Debug/net8.0/SqlTestDataGenerator.Tests.dll" adapterTypeName="executor://mstestadapter/v2" className="SqlTestDataGenerator.Tests.SqlDateAddUTF8Tests" name="IntegrationTest_DateAddAndUTF8_ShouldWorkTogether" />
    </UnitTest>
    <UnitTest name="TestJoinRegexPattern" storage="/workspace/sqltestdatagenerator.tests/bin/debug/net8.0/sqltestdatagenerator.tests.dll" id="4f82a6c9-7939-1c4e-f9ef-b71164866bfd">
      <Execution id="df281ceb-d6cf-4e6b-80dd-8e657ed03935" />
      <TestMethod codeBase="/workspace/SqlTestDataGenerator.Tests/bin/Debug/net8.0/SqlTestDataGenerator.Tests.dll" adapterTypeName="executor://mstestadapter/v2" className="SqlTestDataGenerator.Tests.SqlQueryParserTests" name="TestJoinRegexPattern" />
    </UnitTest>
    <UnitTest name="ParseVietnameseQuery_CaseStatement_ShouldHandleUTF8" storage="/workspace/sqltestdatagenerator.tests/bin/debug/net8.0/sqltestdatagenerator.tests.dll" id="fd5281bd-ebeb-6ce9-7bce-991b4cce7130">
      <TestCategory>
        <TestCategoryItem TestCategory="DateAddUTF8Fixes" />
      </TestCategory>
      <Execution id="a4d10525-4a82-490c-8e0e-2f390af476cf" />
      <TestMethod codeBase="/workspace/SqlTestDataGenerator.Tests/bin/Debug/net8.0/SqlTestDataGenerator.Tests.dll" adapterTypeName="executor://mstestadapter/v2" className="SqlTestDataGenerator.Tests.SqlDateAddUTF8Tests" name="ParseVietnameseQuery_CaseStatement_ShouldHandleUTF8" />
    </UnitTest>
    <UnitTest name="ValidateMySQLSyntax_ValidMySQLQuery_ShouldReturnTrue" storage="/workspace/sqltestdatagenerator.tests/bin/debug/net8.0/sqltestdatagenerator.tests.dll" id="945c5a29-a83a-bb9e-d813-f6a456412c4c">
      <TestCategory>
        <TestCategoryItem TestCategory="MySQLDateConverter" />
      </TestCategory>
      <Execution id="0bd46ccd-8d9c-482e-a817-ec36d591dc56" />
      <TestMethod codeBase="/workspace/SqlTestDataGenerator.Tests/bin/Debug/net8.0/SqlTestDataGenerator.Tests.dll" adapterTypeName="executor://mstestadapter/v2" className="SqlTestDataGenerator.Tests.MySQLDateFunctionConverterTests" name="ValidateMySQLSyntax_ValidMySQLQuery_ShouldReturnTrue" />
    </UnitTest>
    <UnitTest name="Debug_ConfigReading" storage="/workspace/sqltestdatagenerator.tests/bin/debug/net8.0/sqltestdatagenerator.tests.dll" id="ad7885a9-7dd6-4c0c-215c-14429f005ad5">
      <TestCategory>
        <TestCategoryItem TestCategory="Constraint-Aware" />
      </TestCategory>
      <Execution id="7500fbfb-9140-41a1-97fc-85f37ea8b50c" />
      <TestMethod codeBase="/workspace/SqlTestDataGenerator.Tests/bin/Debug/net8.0/SqlTestDataGenerator.Tests.dll" adapterTypeName="executor://mstestadapter/v2" className="SqlTestDataGenerator.Tests.ConstraintAwareGenerationTests" name="Debug_ConfigReading" />
    </UnitTest>
    <UnitTest name="GenerateBogusData_Users_ShouldCreateUserData" storage="/workspace/sqltestdatagenerator.tests/bin/debug/net8.0/sqltestdatagenerator.tests.dll" id="fcb2ca1e-19a6-4e0c-9949-28148335f239">
      <Execution id="bd9baecf-dab2-4d46-b4b9-9fc2dd5ee0a3" />
      <TestMethod codeBase="/workspace/SqlTestDataGenerator.Tests/bin/Debug/net8.0/SqlTestDataGenerator.Tests.dll" adapterTypeName="executor://mstestadapter/v2" className="SqlTestDataGenerator.Tests.ComplexDataGenerationTests" name="GenerateBogusData_Users_ShouldCreateUserData" />
    </UnitTest>
    <UnitTest name="ExtractExistsConstraints_WithMultipleExists_ShouldExtractCorrectly" storage="/workspace/sqltestdatagenerator.tests/bin/debug/net8.0/sqltestdatagenerator.tests.dll" id="c14fc3b8-bc44-a128-3b0c-52c2da94b6d9">
      <TestCategory>
        <TestCategoryItem TestCategory="ComprehensiveConstraints" />
      </TestCategory>
      <Execution id="8caf1976-5b48-4b6b-a661-1bb4066ec1b0" />
      <TestMethod codeBase="/workspace/SqlTestDataGenerator.Tests/bin/Debug/net8.0/SqlTestDataGenerator.Tests.dll" adapterTypeName="executor://mstestadapter/v2" className="SqlTestDataGenerator.Tests.ComprehensiveConstraintExtractorTests" name="ExtractExistsConstraints_WithMultipleExists_ShouldExtractCorrectly" />
    </UnitTest>
    <UnitTest name="ParseQuery_FallbackToRegexParser_WhenSqlParserCSFails" storage="/workspace/sqltestdatagenerator.tests/bin/debug/net8.0/sqltestdatagenerator.tests.dll" id="b093390d-92d9-0a60-9313-1f139744ab3d">
      <TestCategory>
        <TestCategoryItem TestCategory="SqlQueryParserV3" />
      </TestCategory>
      <Execution id="234fa921-4594-4527-990c-0278f28c014e" />
      <TestMethod codeBase="/workspace/SqlTestDataGenerator.Tests/bin/Debug/net8.0/SqlTestDataGenerator.Tests.dll" adapterTypeName="executor://mstestadapter/v2" className="SqlTestDataGenerator.Tests.SqlQueryParserV3Tests" name="ParseQuery_FallbackToRegexParser_WhenSqlParserCSFails" />
    </UnitTest>
    <UnitTest name="GetConversionSuggestions_InvalidQuery_ShouldReturnSuggestions" storage="/workspace/sqltestdatagenerator.tests/bin/debug/net8.0/sqltestdatagenerator.tests.dll" id="3087e7cd-ea9d-56e0-22de-fd46d7c32d6b">
      <TestCategory>
        <TestCategoryItem TestCategory="MySQLDateConverter" />
      </TestCategory>
      <Execution id="3f350519-3f68-4ee0-97c6-d11249f94195" />
      <TestMethod codeBase="/workspace/SqlTestDataGenerator.Tests/bin/Debug/net8.0/SqlTestDataGenerator.Tests.dll" adapterTypeName="executor://mstestadapter/v2" className="SqlTestDataGenerator.Tests.MySQLDateFunctionConverterTests" name="GetConversionSuggestions_InvalidQuery_ShouldReturnSuggestions" />
    </UnitTest>
    <UnitTest name="TestExtractConstraints_TC001_ComplexVowisSQL_ShouldExtractVNEXTAndIsActive" storage="/workspace/sqltestdatagenerator.tests/bin/debug/net8.0/sqltestdatagenerator.tests.dll" id="0b8c0b93-a94c-5756-79af-a4f6167eeb3d">
      <TestCategory>
        <TestCategoryItem TestCategory="Constraint-Extraction" />
      </TestCategory>
      <Execution id="95bfadc3-c88f-425f-96bb-c46690383c7b" />
      <TestMethod codeBase="/workspace/SqlTestDataGenerator.Tests/bin/Debug/net8.0/SqlTestDataGenerator.Tests.dll" adapterTypeName="executor://mstestadapter/v2" className="SqlTestDataGenerator.Tests.ComprehensiveConstraintExtractionTests" name="TestExtractConstraints_TC001_ComplexVowisSQL_ShouldExtractVNEXTAndIsActive" />
    </UnitTest>
    <UnitTest name="TC001_15_ExecuteQueryWithTestDataAsync_ComplexVowisSQL_WithGeminiAI" storage="/workspace/sqltestdatagenerator.tests/bin/debug/net8.0/sqltestdatagenerator.tests.dll" id="fe50fae3-1b6d-c1e9-9f37-ae217b07f539">
      <TestCategory>
        <TestCategoryItem TestCategory="AI-MySQL-Real" />
        <TestCategoryItem TestCategory="Integration" />
      </TestCategory>
      <Execution id="b00f39e2-ef9a-4139-8c4e-bc163ea300e3" />
      <TestMethod codeBase="/workspace/SqlTestDataGenerator.Tests/bin/Debug/net8.0/SqlTestDataGenerator.Tests.dll" adapterTypeName="executor://mstestadapter/v2" className="SqlTestDataGenerator.Tests.ExecuteQueryWithTestDataAsyncDemoTests" name="TC001_15_ExecuteQueryWithTestDataAsync_ComplexVowisSQL_WithGeminiAI" />
    </UnitTest>
    <UnitTest name="ExtractExistsConstraints_NoExistsStatements_ShouldReturnEmpty" storage="/workspace/sqltestdatagenerator.tests/bin/debug/net8.0/sqltestdatagenerator.tests.dll" id="31f12ab7-954e-c46c-3c20-787137cd9d64">
      <Execution id="95f26d2b-3f34-439e-b110-6b0735cf26cb" />
      <TestMethod codeBase="/workspace/SqlTestDataGenerator.Tests/bin/Debug/net8.0/SqlTestDataGenerator.Tests.dll" adapterTypeName="executor://mstestadapter/v2" className="SqlTestDataGenerator.Tests.ExistsConstraintExtractionTests" name="ExtractExistsConstraints_NoExistsStatements_ShouldReturnEmpty" />
    </UnitTest>
    <UnitTest name="GenerateBogusData_FourTables_ShouldRespectDependencyOrder" storage="/workspace/sqltestdatagenerator.tests/bin/debug/net8.0/sqltestdatagenerator.tests.dll" id="a3ac2347-e7bd-d1ae-5074-a17546db31bc">
      <Execution id="f9fe3fb0-d800-44b6-ab2d-de51aed3b3d0" />
      <TestMethod codeBase="/workspace/SqlTestDataGenerator.Tests/bin/Debug/net8.0/SqlTestDataGenerator.Tests.dll" adapterTypeName="executor://mstestadapter/v2" className="SqlTestDataGenerator.Tests.ComplexDataGenerationTests" name="GenerateBogusData_FourTables_ShouldRespectDependencyOrder" />
    </UnitTest>
    <UnitTest name="ParseQuery_MySqlDateFunction_HandlesCorrectly" storage="/workspace/sqltestdatagenerator.tests/bin/debug/net8.0/sqltestdatagenerator.tests.dll" id="78800cf4-c501-8eb0-8d10-d522b560fff2">
      <TestCategory>
        <TestCategoryItem TestCategory="SqlQueryParserV3" />
      </TestCategory>
      <Execution id="1733f63f-4314-420a-b805-05040f612e6b" />
      <TestMethod codeBase="/workspace/SqlTestDataGenerator.Tests/bin/Debug/net8.0/SqlTestDataGenerator.Tests.dll" adapterTypeName="executor://mstestadapter/v2" className="SqlTestDataGenerator.Tests.SqlQueryParserV3Tests" name="ParseQuery_MySqlDateFunction_HandlesCorrectly" />
    </UnitTest>
    <UnitTest name="Mock_AIGeneration_ManualRecordCreation" storage="/workspace/sqltestdatagenerator.tests/bin/debug/net8.0/sqltestdatagenerator.tests.dll" id="a360ec56-40aa-5772-8b61-56b24d403398">
      <TestCategory>
        <TestCategoryItem TestCategory="Constraint-Aware" />
      </TestCategory>
      <Execution id="ec17d678-eacf-4c87-a21b-f151810128db" />
      <TestMethod codeBase="/workspace/SqlTestDataGenerator.Tests/bin/Debug/net8.0/SqlTestDataGenerator.Tests.dll" adapterTypeName="executor://mstestadapter/v2" className="SqlTestDataGenerator.Tests.ConstraintAwareGenerationTests" name="Mock_AIGeneration_ManualRecordCreation" />
    </UnitTest>
    <UnitTest name="GetConstraintsForTable_WithMultipleConstraintTypes_ShouldReturnCorrectConstraints" storage="/workspace/sqltestdatagenerator.tests/bin/debug/net8.0/sqltestdatagenerator.tests.dll" id="1cb42ef4-060e-402a-1304-dbbc4f14f5c3">
      <TestCategory>
        <TestCategoryItem TestCategory="ComprehensiveConstraints" />
      </TestCategory>
      <Execution id="9a0bacab-9184-4593-936d-737279a895e7" />
      <TestMethod codeBase="/workspace/SqlTestDataGenerator.Tests/bin/Debug/net8.0/SqlTestDataGenerator.Tests.dll" adapterTypeName="executor://mstestadapter/v2" className="SqlTestDataGenerator.Tests.ComprehensiveConstraintExtractorTests" name="GetConstraintsForTable_WithMultipleConstraintTypes_ShouldReturnCorrectConstraints" />
    </UnitTest>
    <UnitTest name="ExtractTablesFromQuery_VietnameseComments_ShouldIgnoreComments" storage="/workspace/sqltestdatagenerator.tests/bin/debug/net8.0/sqltestdatagenerator.tests.dll" id="c6fc10ce-1b8c-db5d-82b8-35ec909d3152">
      <Execution id="6da48fc9-f66b-4cda-bea8-0bc611b64f97" />
      <TestMethod codeBase="/workspace/SqlTestDataGenerator.Tests/bin/Debug/net8.0/SqlTestDataGenerator.Tests.dll" adapterTypeName="executor://mstestadapter/v2" className="SqlTestDataGenerator.Tests.ComplexDataGenerationTests" name="ExtractTablesFromQuery_VietnameseComments_ShouldIgnoreComments" />
    </UnitTest>
    <UnitTest name="ExtractTablesFromQuery_CaseInsensitive_ShouldWork" storage="/workspace/sqltestdatagenerator.tests/bin/debug/net8.0/sqltestdatagenerator.tests.dll" id="74ad718a-680d-06c3-7660-2d0d9a9fc9f2">
      <Execution id="0750b540-e011-4979-9fbd-4d10dfc95ddb" />
      <TestMethod codeBase="/workspace/SqlTestDataGenerator.Tests/bin/Debug/net8.0/SqlTestDataGenerator.Tests.dll" adapterTypeName="executor://mstestadapter/v2" className="SqlTestDataGenerator.Tests.ComplexSqlGenerationTests" name="ExtractTablesFromQuery_CaseInsensitive_ShouldWork" />
    </UnitTest>
    <UnitTest name="ExtractJoinConstraints_WithAdditionalConditions_ShouldExtractBoth" storage="/workspace/sqltestdatagenerator.tests/bin/debug/net8.0/sqltestdatagenerator.tests.dll" id="a8c55508-0818-7079-489b-cfa127cdf6c5">
      <TestCategory>
        <TestCategoryItem TestCategory="ComprehensiveConstraints" />
      </TestCategory>
      <Execution id="275b5f7d-8dae-4108-a75e-d958a1244995" />
      <TestMethod codeBase="/workspace/SqlTestDataGenerator.Tests/bin/Debug/net8.0/SqlTestDataGenerator.Tests.dll" adapterTypeName="executor://mstestadapter/v2" className="SqlTestDataGenerator.Tests.ComprehensiveConstraintExtractorTests" name="ExtractJoinConstraints_WithAdditionalConditions_ShouldExtractBoth" />
    </UnitTest>
    <UnitTest name="AddRecentConnection_WithDuplicateConnection_ShouldNotAddDuplicate" storage="/workspace/sqltestdatagenerator.tests/bin/debug/net8.0/sqltestdatagenerator.tests.dll" id="2162217a-6a03-5264-6e90-0701a49439c9">
      <Execution id="88017939-38d8-47e7-8e66-097594da3ec4" />
      <TestMethod codeBase="/workspace/SqlTestDataGenerator.Tests/bin/Debug/net8.0/SqlTestDataGenerator.Tests.dll" adapterTypeName="executor://mstestadapter/v2" className="SqlTestDataGenerator.Tests.ConfigurationServiceTests" name="AddRecentConnection_WithDuplicateConnection_ShouldNotAddDuplicate" />
    </UnitTest>
    <UnitTest name="ExtractTablesFromQuery_ComplexSQL_ShouldHandleAliases" storage="/workspace/sqltestdatagenerator.tests/bin/debug/net8.0/sqltestdatagenerator.tests.dll" id="be36ced7-63a2-b405-e092-a295f9f5f466">
      <Execution id="dbb360bd-a42a-4ea4-83cb-83fc313fcc6f" />
      <TestMethod codeBase="/workspace/SqlTestDataGenerator.Tests/bin/Debug/net8.0/SqlTestDataGenerator.Tests.dll" adapterTypeName="executor://mstestadapter/v2" className="SqlTestDataGenerator.Tests.ComplexSqlGenerationTests" name="ExtractTablesFromQuery_ComplexSQL_ShouldHandleAliases" />
    </UnitTest>
    <UnitTest name="TC018_MathematicalOperations_WithCalculations_ShouldHandleMath" storage="/workspace/sqltestdatagenerator.tests/bin/debug/net8.0/sqltestdatagenerator.tests.dll" id="0fdb9169-0da5-ba99-1388-117a5fa1e5c6">
      <TestCategory>
        <TestCategoryItem TestCategory="SQL-Keywords" />
        <TestCategoryItem TestCategory="Integration" />
      </TestCategory>
      <Execution id="6c728ae2-7894-4d93-b2db-908527e5542a" />
      <TestMethod codeBase="/workspace/SqlTestDataGenerator.Tests/bin/Debug/net8.0/SqlTestDataGenerator.Tests.dll" adapterTypeName="executor://mstestadapter/v2" className="SqlTestDataGenerator.Tests.ExecuteQueryWithTestDataAsyncDemoTests" name="TC018_MathematicalOperations_WithCalculations_ShouldHandleMath" />
    </UnitTest>
    <UnitTest name="ExecuteQueryWithTestDataAsync_EdgeCase_ZeroRecords_MustHandleCorrectly" storage="/workspace/sqltestdatagenerator.tests/bin/debug/net8.0/sqltestdatagenerator.tests.dll" id="49b5ac08-67b7-9e8d-f8dd-3c80296ab249">
      <TestCategory>
        <TestCategoryItem TestCategory="StrictRecordCount" />
        <TestCategoryItem TestCategory="RecordCountVerification" />
      </TestCategory>
      <Execution id="3325aaa0-0437-4cc3-b86e-97b886a7750d" />
      <TestMethod codeBase="/workspace/SqlTestDataGenerator.Tests/bin/Debug/net8.0/SqlTestDataGenerator.Tests.dll" adapterTypeName="executor://mstestadapter/v2" className="SqlTestDataGenerator.Tests.RecordCountStrictVerificationTests" name="ExecuteQueryWithTestDataAsync_EdgeCase_ZeroRecords_MustHandleCorrectly" />
    </UnitTest>
    <UnitTest name="ExecuteQueryWithTestDataAsync_WithValidConnection_ShouldCompleteWorkflow" storage="/workspace/sqltestdatagenerator.tests/bin/debug/net8.0/sqltestdatagenerator.tests.dll" id="ef360172-a68a-6348-fde5-8601fa099fa3">
      <Execution id="9146419b-3709-418a-9f00-3c510cb099ec" />
      <TestMethod codeBase="/workspace/SqlTestDataGenerator.Tests/bin/Debug/net8.0/SqlTestDataGenerator.Tests.dll" adapterTypeName="executor://mstestadapter/v2" className="SqlTestDataGenerator.Tests.ComplexDataGenerationTests" name="ExecuteQueryWithTestDataAsync_WithValidConnection_ShouldCompleteWorkflow" />
    </UnitTest>
    <UnitTest name="TestWhereClauseRegex" storage="/workspace/sqltestdatagenerator.tests/bin/debug/net8.0/sqltestdatagenerator.tests.dll" id="02ff96e2-ba85-766f-e79a-a17a7bbfe07b">
      <Execution id="eb8b1e2f-b228-4d59-88cb-d0aad2597dfa" />
      <TestMethod codeBase="/workspace/SqlTestDataGenerator.Tests/bin/Debug/net8.0/SqlTestDataGenerator.Tests.dll" adapterTypeName="executor://mstestadapter/v2" className="SqlTestDataGenerator.Tests.SqlQueryParserDebugTests" name="TestWhereClauseRegex" />
    </UnitTest>
    <UnitTest name="GenerateBogusData_DateConstraints_ShouldGenerateDateValues" storage="/workspace/sqltestdatagenerator.tests/bin/debug/net8.0/sqltestdatagenerator.tests.dll" id="ff704aa0-e144-9fd1-6bac-09fc4a255f36">
      <Execution id="e60ca16f-c137-4ebb-9417-6270f9e1ec5e" />
      <TestMethod codeBase="/workspace/SqlTestDataGenerator.Tests/bin/Debug/net8.0/SqlTestDataGenerator.Tests.dll" adapterTypeName="executor://mstestadapter/v2" className="SqlTestDataGenerator.Tests.ComplexDataGenerationTests" name="GenerateBogusData_DateConstraints_ShouldGenerateDateValues" />
    </UnitTest>
    <UnitTest name="ConvertToMySQLSyntax_NestedCaseStatements_ShouldConvertAll" storage="/workspace/sqltestdatagenerator.tests/bin/debug/net8.0/sqltestdatagenerator.tests.dll" id="5ef42c5d-cc7f-66b5-dd72-56f848fdc2ad">
      <TestCategory>
        <TestCategoryItem TestCategory="MySQLDateConverter" />
      </TestCategory>
      <Execution id="502d649b-fbc0-4c0e-9e1e-c4eb7c46193e" />
      <TestMethod codeBase="/workspace/SqlTestDataGenerator.Tests/bin/Debug/net8.0/SqlTestDataGenerator.Tests.dll" adapterTypeName="executor://mstestadapter/v2" className="SqlTestDataGenerator.Tests.MySQLDateFunctionConverterTests" name="ConvertToMySQLSyntax_NestedCaseStatements_ShouldConvertAll" />
    </UnitTest>
    <UnitTest name="ConvertToMySQLSyntax_ComplexCaseWithMultipleDateFunctions_ShouldConvertAll" storage="/workspace/sqltestdatagenerator.tests/bin/debug/net8.0/sqltestdatagenerator.tests.dll" id="4910f641-4998-8515-a7d2-a2f20f653df7">
      <TestCategory>
        <TestCategoryItem TestCategory="MySQLDateConverter" />
      </TestCategory>
      <Execution id="01d6c1de-b07c-4b32-8e1f-9eec98598cf2" />
      <TestMethod codeBase="/workspace/SqlTestDataGenerator.Tests/bin/Debug/net8.0/SqlTestDataGenerator.Tests.dll" adapterTypeName="executor://mstestadapter/v2" className="SqlTestDataGenerator.Tests.MySQLDateFunctionConverterTests" name="ConvertToMySQLSyntax_ComplexCaseWithMultipleDateFunctions_ShouldConvertAll" />
    </UnitTest>
    <UnitTest name="ExecuteQueryWithTestDataAsync_EmptySQL_ShouldHandleGracefully" storage="/workspace/sqltestdatagenerator.tests/bin/debug/net8.0/sqltestdatagenerator.tests.dll" id="ebcc226a-d4d6-e04f-6a23-b323c4d35009">
      <Execution id="c8be61e6-e95c-48ab-97e0-e299a25df061" />
      <TestMethod codeBase="/workspace/SqlTestDataGenerator.Tests/bin/Debug/net8.0/SqlTestDataGenerator.Tests.dll" adapterTypeName="executor://mstestadapter/v2" className="SqlTestDataGenerator.Tests.ComplexDataGenerationTests" name="ExecuteQueryWithTestDataAsync_EmptySQL_ShouldHandleGracefully" />
    </UnitTest>
    <UnitTest name="Debug_GeminiAPICall_WithRateLimiting" storage="/workspace/sqltestdatagenerator.tests/bin/debug/net8.0/sqltestdatagenerator.tests.dll" id="bdc6218b-2cc3-93bb-38e0-86e20726e46d">
      <TestCategory>
        <TestCategoryItem TestCategory="Constraint-Aware" />
      </TestCategory>
      <Execution id="7701793f-70f5-4657-ae90-49a56def1c98" />
      <TestMethod codeBase="/workspace/SqlTestDataGenerator.Tests/bin/Debug/net8.0/SqlTestDataGenerator.Tests.dll" adapterTypeName="executor://mstestadapter/v2" className="SqlTestDataGenerator.Tests.ConstraintAwareGenerationTests" name="Debug_GeminiAPICall_WithRateLimiting" />
    </UnitTest>
    <UnitTest name="Test_FallbackGeneration_WhenAIUnavailable" storage="/workspace/sqltestdatagenerator.tests/bin/debug/net8.0/sqltestdatagenerator.tests.dll" id="dfaae416-13aa-b907-a01f-1695bbdfaf71">
      <TestCategory>
        <TestCategoryItem TestCategory="Constraint-Aware" />
      </TestCategory>
      <Execution id="ba7c7421-3d0e-4dac-8b53-6d3c0a6e8471" />
      <TestMethod codeBase="/workspace/SqlTestDataGenerator.Tests/bin/Debug/net8.0/SqlTestDataGenerator.Tests.dll" adapterTypeName="executor://mstestadapter/v2" className="SqlTestDataGenerator.Tests.ConstraintAwareGenerationTests" name="Test_FallbackGeneration_WhenAIUnavailable" />
    </UnitTest>
    <UnitTest name="ParseQuery_ComplexVowisQuery_ExtractsAllConstraints" storage="/workspace/sqltestdatagenerator.tests/bin/debug/net8.0/sqltestdatagenerator.tests.dll" id="6c5d5d33-1a99-7e67-e818-0fa2aa6b5a6b">
      <TestCategory>
        <TestCategoryItem TestCategory="SqlQueryParserV3" />
      </TestCategory>
      <Execution id="f9d51a09-29b0-43b7-ab10-44af0ce0ad13" />
      <TestMethod codeBase="/workspace/SqlTestDataGenerator.Tests/bin/Debug/net8.0/SqlTestDataGenerator.Tests.dll" adapterTypeName="executor://mstestadapter/v2" className="SqlTestDataGenerator.Tests.SqlQueryParserV3Tests" name="ParseQuery_ComplexVowisQuery_ExtractsAllConstraints" />
    </UnitTest>
    <UnitTest name="ConvertToMySQLSyntax_MixedSyntax_ShouldConvertOnlyNonMySQL" storage="/workspace/sqltestdatagenerator.tests/bin/debug/net8.0/sqltestdatagenerator.tests.dll" id="5ddaa2eb-71bb-6afb-d7b7-8346fc647577">
      <TestCategory>
        <TestCategoryItem TestCategory="MySQLDateConverter" />
      </TestCategory>
      <Execution id="7179394f-5fa6-4799-9fa1-05889bf907a1" />
      <TestMethod codeBase="/workspace/SqlTestDataGenerator.Tests/bin/Debug/net8.0/SqlTestDataGenerator.Tests.dll" adapterTypeName="executor://mstestadapter/v2" className="SqlTestDataGenerator.Tests.MySQLDateFunctionConverterTests" name="ConvertToMySQLSyntax_MixedSyntax_ShouldConvertOnlyNonMySQL" />
    </UnitTest>
    <UnitTest name="TC017_RightJoin_WithNullHandling_ShouldGenerateCorrectData" storage="/workspace/sqltestdatagenerator.tests/bin/debug/net8.0/sqltestdatagenerator.tests.dll" id="198251d9-c903-0e2b-dcda-1d746dd7a792">
      <TestCategory>
        <TestCategoryItem TestCategory="SQL-Keywords" />
        <TestCategoryItem TestCategory="Integration" />
      </TestCategory>
      <Execution id="3e2ce5e4-bd1c-4c58-927e-0a2476a319b0" />
      <TestMethod codeBase="/workspace/SqlTestDataGenerator.Tests/bin/Debug/net8.0/SqlTestDataGenerator.Tests.dll" adapterTypeName="executor://mstestadapter/v2" className="SqlTestDataGenerator.Tests.ExecuteQueryWithTestDataAsyncDemoTests" name="TC017_RightJoin_WithNullHandling_ShouldGenerateCorrectData" />
    </UnitTest>
    <UnitTest name="ParseQuery_ComparisonOperators_ShouldExtractConditions" storage="/workspace/sqltestdatagenerator.tests/bin/debug/net8.0/sqltestdatagenerator.tests.dll" id="31ca75ff-f621-eb88-c366-60598c354854">
      <Execution id="de9f847c-63ea-4d7b-931f-620a3fb2c422" />
      <TestMethod codeBase="/workspace/SqlTestDataGenerator.Tests/bin/Debug/net8.0/SqlTestDataGenerator.Tests.dll" adapterTypeName="executor://mstestadapter/v2" className="SqlTestDataGenerator.Tests.SqlQueryParserTests" name="ParseQuery_ComparisonOperators_ShouldExtractConditions" />
    </UnitTest>
    <UnitTest name="ParseQuery_WhereEqualityWithNumbers_ShouldExtractCondition" storage="/workspace/sqltestdatagenerator.tests/bin/debug/net8.0/sqltestdatagenerator.tests.dll" id="ac41b066-7e5e-ccde-36c5-33f94001f207">
      <Execution id="d7634ace-f1b4-49d1-a1cc-8daf280b3117" />
      <TestMethod codeBase="/workspace/SqlTestDataGenerator.Tests/bin/Debug/net8.0/SqlTestDataGenerator.Tests.dll" adapterTypeName="executor://mstestadapter/v2" className="SqlTestDataGenerator.Tests.SqlQueryParserTests" name="ParseQuery_WhereEqualityWithNumbers_ShouldExtractCondition" />
    </UnitTest>
    <UnitTest name="ExecuteQueryWithTestDataAsync_Performance_ShouldCompleteWithinTimeout" storage="/workspace/sqltestdatagenerator.tests/bin/debug/net8.0/sqltestdatagenerator.tests.dll" id="e42d574f-37e1-f5cf-4f56-2ca52ebfaa46">
      <Execution id="31853410-f566-44c6-9211-05539b730e3c" />
      <TestMethod codeBase="/workspace/SqlTestDataGenerator.Tests/bin/Debug/net8.0/SqlTestDataGenerator.Tests.dll" adapterTypeName="executor://mstestadapter/v2" className="SqlTestDataGenerator.Tests.ComplexDataGenerationTests" name="ExecuteQueryWithTestDataAsync_Performance_ShouldCompleteWithinTimeout" />
    </UnitTest>
    <UnitTest name="ExtractExistsConstraints_MultipleExistsAndNotExists_ShouldExtractAllCorrectly" storage="/workspace/sqltestdatagenerator.tests/bin/debug/net8.0/sqltestdatagenerator.tests.dll" id="21ece978-a12a-f4c1-72a3-37e93bcaa880">
      <Execution id="e34ed36b-41d9-41fd-9416-2ccdb99b8350" />
      <TestMethod codeBase="/workspace/SqlTestDataGenerator.Tests/bin/Debug/net8.0/SqlTestDataGenerator.Tests.dll" adapterTypeName="executor://mstestadapter/v2" className="SqlTestDataGenerator.Tests.ExistsConstraintExtractionTests" name="ExtractExistsConstraints_MultipleExistsAndNotExists_ShouldExtractAllCorrectly" />
    </UnitTest>
    <UnitTest name="TestExtractConstraints_MalformedSQL_ShouldHandleGracefully" storage="/workspace/sqltestdatagenerator.tests/bin/debug/net8.0/sqltestdatagenerator.tests.dll" id="b625b9c7-136a-f400-db5f-f7386e06c9f3">
      <TestCategory>
        <TestCategoryItem TestCategory="Missing-Patterns" />
      </TestCategory>
      <Execution id="63875ac4-3bb6-43bc-a9ab-d41168099eb2" />
      <TestMethod codeBase="/workspace/SqlTestDataGenerator.Tests/bin/Debug/net8.0/SqlTestDataGenerator.Tests.dll" adapterTypeName="executor://mstestadapter/v2" className="SqlTestDataGenerator.Tests.MissingSqlPatternsTests" name="TestExtractConstraints_MalformedSQL_ShouldHandleGracefully" />
    </UnitTest>
    <UnitTest name="TestExtractConstraints_BetweenOperators_ShouldExtractRanges" storage="/workspace/sqltestdatagenerator.tests/bin/debug/net8.0/sqltestdatagenerator.tests.dll" id="1fb00485-e7e0-f10c-e5ab-349cf56d0767">
      <TestCategory>
        <TestCategoryItem TestCategory="Enhanced-Extraction" />
      </TestCategory>
      <Execution id="6bd5df5f-147c-40be-b86f-b3240710c347" />
      <TestMethod codeBase="/workspace/SqlTestDataGenerator.Tests/bin/Debug/net8.0/SqlTestDataGenerator.Tests.dll" adapterTypeName="executor://mstestadapter/v2" className="SqlTestDataGenerator.Tests.EnhancedConstraintExtractionTests" name="TestExtractConstraints_BetweenOperators_ShouldExtractRanges" />
    </UnitTest>
    <UnitTest name="ParseQuery_BasicSelectWithWhere_ExtractsConditions" storage="/workspace/sqltestdatagenerator.tests/bin/debug/net8.0/sqltestdatagenerator.tests.dll" id="0a97d66e-327f-ecb2-065a-a2513241b750">
      <TestCategory>
        <TestCategoryItem TestCategory="SqlQueryParserV3" />
      </TestCategory>
      <Execution id="5982a1eb-79b9-4641-b6b4-d8d7a318d3b1" />
      <TestMethod codeBase="/workspace/SqlTestDataGenerator.Tests/bin/Debug/net8.0/SqlTestDataGenerator.Tests.dll" adapterTypeName="executor://mstestadapter/v2" className="SqlTestDataGenerator.Tests.SqlQueryParserV3Tests" name="ParseQuery_BasicSelectWithWhere_ExtractsConditions" />
    </UnitTest>
  </TestDefinitions>
  <TestEntries>
    <TestEntry testId="a7f106a6-971d-51f4-63e6-c4daba67e711" executionId="5b7fc267-9874-4d59-9dec-dd20ad1a4d8d" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="f78d7304-2501-8055-abba-3ae1d4828eb2" executionId="22dc2c15-f3ef-4ee7-a7e3-b42f224716ca" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="19d4536f-6566-dad7-6064-df8ecbe782f7" executionId="6e9fa53d-6685-40a6-960d-00e37580f819" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="9a6daf30-33f8-a7b2-ec97-a643f5b8ceae" executionId="28ee0563-d9ea-4950-852b-266aa602d328" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="fe2ba93f-5cee-b7ee-2351-438a93efe0da" executionId="8a9ee7b3-15ab-474d-8d23-8b7e366801ba" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="b5bfaf3f-f554-a3c7-5b59-e536fcbe0296" executionId="a7e67a03-107c-451a-b3af-10d226996bc9" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="ad7885a9-7dd6-4c0c-215c-14429f005ad5" executionId="7500fbfb-9140-41a1-97fc-85f37ea8b50c" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="d59fb9e6-9639-6c3f-f09c-7e47437eb8dd" executionId="8071cf55-dc20-40be-9369-3a6546baf0f5" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="aad2f952-d9f7-c03e-94f4-c9ad3d450082" executionId="f9d57624-de19-438d-8a2c-ed0786013063" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="40ff5d80-f68a-7ba8-c0f1-893d478cb72e" executionId="30d4a325-3655-413c-a686-255908b82f89" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="703fd9c0-da25-fce0-1fc5-49f590616917" executionId="b92c90f9-96e0-4461-8411-1dae10c6ef81" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="2d8e95fd-0ee0-3a36-d2f6-a6936de5aea0" executionId="e86b05aa-a508-45c0-9d9f-5b2f0621482b" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="b2d44d35-af78-e80c-973a-cc11463c0ff3" executionId="317f4df7-f8ce-499d-8fa4-c1d2ae6d4b33" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="4a6ad4dd-b680-702f-6923-b349b5729e8a" executionId="7f00df27-c627-4e9c-980c-f8b400bb0c7f" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="18cfefd9-6f9c-255b-7060-9d4d9eaa8f24" executionId="4fb77598-d154-4386-ad16-bcbf5ec8604a" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="74ad718a-680d-06c3-7660-2d0d9a9fc9f2" executionId="0750b540-e011-4979-9fbd-4d10dfc95ddb" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="8ff78ea0-9547-b89c-150e-ad1ff9a9e72a" executionId="74f2f84d-9231-4b37-b3d3-2d723d1e9820" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="bbeef4d7-958f-2851-0543-d9f6c6ae356f" executionId="22842b51-5228-4070-8fff-3f429533da15" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="aac4c716-72b2-9a1e-0fe2-6659f7df6753" executionId="525ebd8d-6a71-4553-96f2-17f0b67e4d74" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="0b8c0b93-a94c-5756-79af-a4f6167eeb3d" executionId="95bfadc3-c88f-425f-96bb-c46690383c7b" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="0a1468aa-72ea-7a6a-8d19-43a4651e3cc0" executionId="e1d8a6b1-7eea-45d6-a540-f843f0b48c0c" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="565c593c-a1ec-efd6-3780-c53986c553c0" executionId="206ae813-3783-4262-96e2-b4c5e01c1db8" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="c2d4e3da-39f1-e45c-38d4-6c5a31def722" executionId="80f5e726-b4b6-483a-ab2c-05685ec0bdda" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="46564af2-7fd2-2128-da44-3a733601d023" executionId="2abc9b42-b0b5-423d-8f64-149f42a9c788" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="278e084f-9a34-6925-0e6c-7057c40b7f0a" executionId="cb163f3a-5c52-4558-bf5f-f49b1fcef36c" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="1e940aca-f548-be92-5f19-806853dafddb" executionId="79543184-4c55-48ad-a52b-942c6749f0b9" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="2e0cc1d0-8e48-730a-36ce-d87cb24022a8" executionId="09440be5-7548-42d5-ad9d-2abe8fd474f5" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="5f5dc02f-2f9c-49e2-7876-e8cabf1f6fd1" executionId="ccb70f84-e636-401e-9da0-f391aeb6bdde" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="e0fbe67e-bf5e-0a04-e1b9-1f890e4b8443" executionId="d4c4e55e-194d-4df2-a7b0-481cfe36c8b0" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="f6459aea-f0c1-f81e-519d-6d38d4140c43" executionId="2766048f-fe75-49f9-aeb5-9b1a2cba08cb" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="52c82675-ffa4-23b2-c280-44843f3a7e41" executionId="edc6fbdc-76b4-43c0-9fe9-dc848ab2c39e" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="c6f2c04c-f677-456c-51ca-b43e9a462015" executionId="28673b73-4ec7-4972-b8d7-f40bafaf1114" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="9ddb3c70-4652-b32c-72ff-06adb9dbe978" executionId="5f8d9fac-28ff-4430-b768-4235184bdb25" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="8dbddd12-1e3d-0936-552e-7e6f9e2aaf7f" executionId="66f1189a-8c99-4714-8137-59050ab846b5" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="2ba22d0d-6589-7197-68b1-8359f9ab44f9" executionId="927bc3d9-f3ba-4bb5-88ec-f9cea7332037" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="0b31b055-dd09-9ece-b730-b2afc725f7ea" executionId="9a0fce8d-553d-40b6-9374-fca2ce51b17c" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="5a366c63-f307-9fef-f255-5d7561c90c4a" executionId="3a2e4064-be45-449f-9762-b4d090c045d2" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="02ff96e2-ba85-766f-e79a-a17a7bbfe07b" executionId="eb8b1e2f-b228-4d59-88cb-d0aad2597dfa" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="812afea8-78cc-8b31-7c2f-4fcf17bd6c5c" executionId="9fda3c8b-0cef-4851-91cb-ec001695ca43" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="bdc6218b-2cc3-93bb-38e0-86e20726e46d" executionId="7701793f-70f5-4657-ae90-49a56def1c98" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="ac41b066-7e5e-ccde-36c5-33f94001f207" executionId="d7634ace-f1b4-49d1-a1cc-8daf280b3117" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="d94c37bd-9528-f060-511c-4dfe1f44244d" executionId="fd55de70-5cf0-4f6d-a879-da901ae4b020" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="d58b23b9-e1a6-68ae-1268-135ff59cc20d" executionId="8b33fddd-f50e-4abf-aa29-82025f04a768" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="91935916-0cd6-2247-f98b-684553fbf0fb" executionId="a85e0401-8e3d-4d02-ba5d-87cf36275cd3" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="20ee9d7c-8101-2eda-002f-53ca537517d6" executionId="4837163d-ce79-4a86-9f62-c1b81c5aab58" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="2cb2f523-d773-3e66-7075-be5cb7772187" executionId="109f85a5-abd5-4c42-8ea7-64ec281a15dd" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="277f3b52-0570-c0b0-06bd-5c0e065db537" executionId="eb8f0fa5-6f40-4d12-82ca-0bc6224c974b" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="0fdb9169-0da5-ba99-1388-117a5fa1e5c6" executionId="6c728ae2-7894-4d93-b2db-908527e5542a" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="ed6b3ee9-628f-42a4-56ce-554c19cf0237" executionId="c9b4cc4f-1c0b-4919-aba6-790e70c292d1" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="dd4dcdfc-3229-d26a-a927-8c8874ede311" executionId="d2c7144a-45b7-4a8a-8706-521bcaab3367" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="b0d97344-12ad-7d1d-6969-28321e909b5f" executionId="a18eedaf-57ea-44a0-ad92-38323df66bf3" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="198251d9-c903-0e2b-dcda-1d746dd7a792" executionId="3e2ce5e4-bd1c-4c58-927e-0a2476a319b0" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="214c1e4f-b53b-6028-1f71-6aa1cf0fa2a7" executionId="59bb2e5c-f247-45a7-9973-d211436fa881" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="8b41ed37-8e2a-590a-c55d-20fbb8244176" executionId="23de4ab1-9104-46c9-9719-9bff186190a3" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="d561a39e-b3ae-5830-d2e6-51256ca89cb1" executionId="100e687d-9af1-4564-b51a-5cd3b4133b02" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="52fb0373-feef-f3e6-6b7c-b0a6051bc365" executionId="b64d8ef4-33c7-46d8-adc0-1f24a9dc45d2" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="2e266685-4e99-7827-1a5f-a9f5bc730d79" executionId="628effda-81d6-423a-bc53-3e01fff6877f" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="4d299dc1-4133-b328-b004-81a79c37f47d" executionId="0322765a-f3d6-4498-a8ef-3787328c321c" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="ca04d0d9-5902-f099-e24d-45ba7b4a4b34" executionId="8065210c-d262-482b-86c3-d64a59bf5d30" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="ef360172-a68a-6348-fde5-8601fa099fa3" executionId="9146419b-3709-418a-9f00-3c510cb099ec" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="21ece978-a12a-f4c1-72a3-37e93bcaa880" executionId="e34ed36b-41d9-41fd-9416-2ccdb99b8350" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="c0e01d56-99bd-dc71-a75c-8c6658a29dc2" executionId="5d723ff5-b6ff-4e1f-81c7-9821b20d94d3" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="fd5281bd-ebeb-6ce9-7bce-991b4cce7130" executionId="a4d10525-4a82-490c-8e0e-2f390af476cf" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="7ec98a93-65bc-1691-fbcb-29f0384b3e5f" executionId="5497cb99-66cd-4fdb-9c61-7ad6d98c0504" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="20e93dd1-82ff-4a3f-b298-50de6537d959" executionId="2506d76b-0783-44d6-aefc-5dce7f7e7893" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="3087e7cd-ea9d-56e0-22de-fd46d7c32d6b" executionId="3f350519-3f68-4ee0-97c6-d11249f94195" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="d8a2d2ae-737f-6b91-1529-4bb418d9ea60" executionId="b98826ed-1881-49c5-872e-92531fc542e3" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="8b3ed7f0-9282-3d91-dc55-9a522b50ee02" executionId="5240ca2f-3405-4e5c-ad5e-522a5523ec7b" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="70128367-1104-e472-1271-9c18ebb476f8" executionId="faf7e03d-1b8a-4728-b9e3-5b59ca27a750" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="bf7011a5-9321-ec3e-fc18-281f6a788ac4" executionId="4f1ee4ee-5684-4242-85bb-5b96db7f5079" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="02e43938-4bb0-1b90-d0c7-1bda28998f3a" executionId="014f79ea-2218-4b45-8280-7cc40472932f" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="e66a12a6-2992-4559-0940-4e677c37d285" executionId="f18736c7-59d4-493f-96b4-104e433a7601" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="841aba5c-167f-c0d8-d4a9-4c6ca4256425" executionId="57e8ca3c-8625-4ace-bcbf-54445bb135fa" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="9095faf9-dd7f-d7fb-e451-67e3bb815ecc" executionId="6c30cdf2-b58a-441b-925c-6fcb87e58c05" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="79b3e653-2e42-5747-8f83-4719364b0792" executionId="4dc3ac71-846e-4a0f-a949-058cce305c0f" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="9b97f53b-9d68-7c6d-0aa2-b2322ea14026" executionId="b3f703f9-d808-49de-99d5-76dc466de4d5" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="0ec26798-ed4f-fe6b-4885-38fccb91d1c9" executionId="bc3556ec-359f-433b-835a-3d94894c43e6" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="6a837f89-6df6-acb7-0827-1ca906ffd71d" executionId="b2a4d4f8-b755-4051-b879-a16376d3b4d6" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="6db14700-ee73-a039-ac8a-97d4f91c8c74" executionId="b8540ecc-9802-4ad3-b10d-d97e3800bbf7" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="738bd56e-e4d1-f571-372f-1f02cb5587ac" executionId="cccbb52b-90b1-4a75-8fde-3573d09fb9a6" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="a360ec56-40aa-5772-8b61-56b24d403398" executionId="ec17d678-eacf-4c87-a21b-f151810128db" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="8f466810-9566-05f4-5c19-11e1c24ec4a6" executionId="bc05896c-c573-475c-b1f9-668227fbc37d" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="a07f75f8-8051-4207-c8e1-9b50be77e563" executionId="eeb0629a-71a1-47d5-ad6a-a7edfd063853" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="1b599d83-b28e-d15e-5626-7477a1fe1c55" executionId="03d1539c-a10c-4ec4-a6e3-96fdaa5ab1a9" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="ab7d94f6-5ca5-f08f-3e41-1182b84f4daa" executionId="b9887993-6db9-4207-986b-882f0d7c71de" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="5bb14654-aea4-fc7b-632f-62555f83aa62" executionId="4ba4360e-a105-441e-953b-9486157bd767" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="ee222a8f-8775-cb61-ba8e-0d406e0fadb8" executionId="8b64da9a-ce61-4384-8bc7-e546309bcbb5" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="67cc85c1-d6cf-52d6-b916-c4fcc25b3e21" executionId="4bdb7232-db54-4fe5-bdeb-ed2058245442" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="31f12ab7-954e-c46c-3c20-787137cd9d64" executionId="95f26d2b-3f34-439e-b110-6b0735cf26cb" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="09384688-af92-b310-fc14-d9dedce48bb9" executionId="a145ce08-55e8-4496-aabc-66384c96f366" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="5e00d5b1-4727-db09-8981-fa70944ad954" executionId="7b033bae-ae9d-4f09-8bdd-1c1b041569a2" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="91cf582a-d7c9-0374-af53-13b473bf0efd" executionId="daacac5a-93b7-4318-90fc-64a9ef6c1ff2" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="2162217a-6a03-5264-6e90-0701a49439c9" executionId="88017939-38d8-47e7-8e66-097594da3ec4" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="6c5d5d33-1a99-7e67-e818-0fa2aa6b5a6b" executionId="f9d51a09-29b0-43b7-ab10-44af0ce0ad13" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="f8cae70b-5890-a61a-b866-50948cb50146" executionId="6f0cb3c8-c31a-4729-8575-ae4ee6991d72" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="69ece138-e613-08f4-1468-66ec2464bc39" executionId="fd8ed11b-0fdf-4653-8fde-8357eb280e1a" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="e2987904-5347-d86b-0f48-2a0688bae6a3" executionId="b67f190e-b1d5-4241-a5c9-880161a9b8c6" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="5d0d9424-0da5-07a1-c647-1345f47027e9" executionId="0e3ba66e-9c20-4192-94fc-af6e7f776e11" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="0802db3c-025d-934c-5585-56ad7882a936" executionId="36f8bc47-d9e1-47df-a33b-8a9e980dc563" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="272b019c-d5ab-f74f-94f3-fa1ad985f3e2" executionId="e1f4e2ae-ba98-4ee2-91fc-7d1cded08a2d" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="5ef42c5d-cc7f-66b5-dd72-56f848fdc2ad" executionId="502d649b-fbc0-4c0e-9e1e-c4eb7c46193e" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="ca4bdeec-f4a5-473c-d409-9ce11eb71010" executionId="fcf16fb3-263a-4308-af7f-0d9d54f1889e" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="c3543ecf-d632-4b92-de87-add46d298479" executionId="7da1ae93-b98e-41d0-a7ca-34560526c25c" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="85993953-c5ea-34f3-0be1-91b596396f0a" executionId="ddf1a5b6-8441-48ac-b6e1-a91d339631b4" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="0f1b5e3b-a740-7c67-898e-c93ae524edbe" executionId="3d5a8d22-2746-4654-b6a1-41989da56a11" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="675d804e-7ee5-6644-2c5b-a336f6ed033e" executionId="c623d98e-6f79-49c7-a163-9e5b73356438" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="ac734ebd-fa4e-3d65-08af-7925674fc60e" executionId="26d723e3-827c-4900-8e1f-579535ec8604" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="5ddaa2eb-71bb-6afb-d7b7-8346fc647577" executionId="7179394f-5fa6-4799-9fa1-05889bf907a1" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="cce9f4cf-aa90-ecb3-649e-ff4fc00300d7" executionId="e7e3a6dd-5795-474a-8f2a-1f4c31226d91" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="792092c6-d93a-8f16-adcb-8adecb948e81" executionId="80ec0b11-da2a-49b7-9394-db64cff96778" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="641ee920-3d9f-c1e4-4220-092e77dba1f3" executionId="81f7a358-a0c5-4e77-b296-ada5a069c33a" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="6b06fba3-635d-2f05-f63d-ba794c09660f" executionId="21d5fc8e-c18c-4b28-95b3-c2ded362b413" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="8967fa17-c299-4e47-9dde-a8f0a5915c9f" executionId="c03b76bd-0ce8-4c9f-af9e-00b5ef1a64d3" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="e3d9b8e8-1d08-66db-840d-a960aae363de" executionId="c3f4e447-2d79-4449-bb7a-ff070d3739c9" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="e6484859-c047-2d19-88f6-de4273fe6051" executionId="d8cbfd99-68d5-44ec-b428-dc04c1ff767d" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="31ca75ff-f621-eb88-c366-60598c354854" executionId="de9f847c-63ea-4d7b-931f-620a3fb2c422" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="0a97d66e-327f-ecb2-065a-a2513241b750" executionId="5982a1eb-79b9-4641-b6b4-d8d7a318d3b1" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="2e3a2884-35f6-a539-5e71-989f9d7d6414" executionId="9e9d7cd4-1840-43c5-a7ef-e7026300ba49" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="fe50fae3-1b6d-c1e9-9f37-ae217b07f539" executionId="b00f39e2-ef9a-4139-8c4e-bc163ea300e3" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="32052917-9976-f6c7-cfe6-55ea2ddeb7ed" executionId="d4bd2aaf-7381-45c1-a0b9-05444e39e3c2" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="b093390d-92d9-0a60-9313-1f139744ab3d" executionId="234fa921-4594-4527-990c-0278f28c014e" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="de22f4a7-8831-63d7-f688-faf32738999d" executionId="7ec34bfe-e916-486d-93e9-37e6a6975c3f" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="ac906b8e-7608-0616-ce10-5e68b0415e31" executionId="9436e373-3c19-4a92-8063-91fca05a701e" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="a9a3fdfb-fc6c-0289-9351-e1328a7a24c5" executionId="0f1cc5d7-989e-4f14-ba24-7d7d92c32464" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="4b0fe614-589b-02cc-6add-321c3b0d4dcc" executionId="c71e9d2d-a23c-4913-8f83-2bab0fc51fbe" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="50802662-e8e6-ff88-cc12-e3bd1b008cfd" executionId="c0997b37-9199-4d2e-96c1-5cd893c79060" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="436739c8-ba41-3070-687c-7515da303711" executionId="4f431dac-65db-4ef3-81d1-01308999e8a5" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="49b5ac08-67b7-9e8d-f8dd-3c80296ab249" executionId="3325aaa0-0437-4cc3-b86e-97b886a7750d" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="be36ced7-63a2-b405-e092-a295f9f5f466" executionId="dbb360bd-a42a-4ea4-83cb-83fc313fcc6f" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="a1c2a851-2b3c-da00-084b-1b2db17868fc" executionId="1aa5916f-b787-4d28-8e0d-ccc45c4266cd" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="a3ac2347-e7bd-d1ae-5074-a17546db31bc" executionId="f9fe3fb0-d800-44b6-ab2d-de51aed3b3d0" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="33c5568e-bbee-9fcd-f82b-149fcb93c6af" executionId="9f3f9a63-a8c1-4eee-a4c5-622d5f23c4f2" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="dfaae416-13aa-b907-a01f-1695bbdfaf71" executionId="ba7c7421-3d0e-4dac-8b53-6d3c0a6e8471" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="f41a6de3-78c5-2b8f-5956-6caff97ebdbf" executionId="487bb06a-4a13-4989-8d1e-84ca5db71da9" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="f3efa36b-3e8e-e41d-23c1-29c1d865b7b2" executionId="d99c1612-5deb-4d8d-862f-9b277773f7c3" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="1144c8a3-62a7-cc5f-27cf-4ae9d2e2115c" executionId="52df3dc6-d3d7-419a-835b-a00985e2e456" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="dc686220-fa09-35e9-2ada-0340bb63d269" executionId="c185c429-7f78-4e61-830a-3ea0204d53dd" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="b81a237f-143b-449c-73ca-baf838b13a21" executionId="ca637261-c74c-497f-b704-ef93971d14b2" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="50debf66-da8c-a609-79d1-35e70ddebf83" executionId="47fda484-9b14-4f69-b15d-db05cfc22db1" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="8d13d544-5f8f-925e-c535-770dd2454212" executionId="7a6cd104-879d-4e52-b8dc-9c10432fbbaf" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="29c39ae5-9cce-1642-84cb-dfbfca4d141f" executionId="61720804-f4de-4ed3-ad49-b015085adcd2" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="760b8c6c-883b-dc5b-32da-1ca02fa16c88" executionId="c7edc20e-0926-4ca9-b29e-015f0c18370a" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="6c8fe354-0fbf-caad-5153-93da1c924108" executionId="8d661c3a-e878-412f-84e8-dfb441b4c7dd" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="914ca81b-0b8a-18f3-24df-f3c71ef9cb98" executionId="62cb70f6-0b20-4843-9577-68252334d409" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="56223bc0-c4e1-c666-e2df-cb845d303b68" executionId="b85d6f44-ccd7-4d3c-a63f-7ecb8cccfe5c" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="cff95060-9a70-96c1-ba36-b42d05db42bf" executionId="7c99807c-d933-454a-a151-f5be229ff4d6" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="fb448c11-0f7f-5b00-42aa-f078814d3bca" executionId="dde74f9c-d44d-4084-a8df-b9c853e0d6c3" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="ff704aa0-e144-9fd1-6bac-09fc4a255f36" executionId="e60ca16f-c137-4ebb-9417-6270f9e1ec5e" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="1c090018-b67e-4cd0-3181-0f61bd7ea682" executionId="6948ef7b-cbac-4fbe-9364-78c4204ca75a" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="46c9deed-d042-bb83-cb94-fc7b86558a4f" executionId="88b443d0-c82b-44d8-8e05-30cb6c84e699" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="7d12d01e-dee5-0e97-3f0b-9d5358bf1a9d" executionId="a4cfa5c0-32c2-410c-b3c5-f94a9a151164" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="cfa4458e-912b-84e4-7950-bc08d42037b2" executionId="1c57dc5b-2064-4528-b9f7-ddef3e258189" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="de2148e8-fb9e-8b47-4b81-491d8235a8ac" executionId="3e385a55-e3fb-4917-bc96-f9ea261e5ba6" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="cb5bffe8-1b8a-0d8d-5a3f-e1ad0ad5499c" executionId="9d420289-682a-4f0f-b978-2e85f67dc643" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="e42d574f-37e1-f5cf-4f56-2ca52ebfaa46" executionId="31853410-f566-44c6-9211-05539b730e3c" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="f718a06e-91df-1e49-9317-91d0e283ac3b" executionId="774ddf02-0583-4a6b-b061-3eb0a5cbd7eb" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="866b0d3a-b4e9-b29d-5399-970cdfc928ee" executionId="d0030a3e-76b6-4cc9-9976-bed626863931" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="0c9b3b0d-f01b-6247-7450-dcba24b5eb70" executionId="dd430bea-b873-453e-a041-b1871df79548" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="8599cba4-e5d8-56d3-7d02-da5179df2128" executionId="9100e40c-2b61-4cb0-bb0b-ee867cf6b4ed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="bc5324e6-bb6a-ee73-021c-bdeb249f570a" executionId="3a3fdaa7-526d-4cf8-88ed-5375b190a20e" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="b3b940d3-9e45-ea47-3b09-97145cecb2a3" executionId="c5b387f3-c181-432e-b60e-6c6713db41b4" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="4faffafa-f6dd-cf6d-8efc-478e6d6bdbf6" executionId="95dc5c83-df82-4fdb-81d4-ac23e703bd5f" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="f388ddf8-0caa-9128-127b-a49ab07dbc5a" executionId="b0488d8b-2067-4700-9532-9277b5a54154" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="a2a23d28-9ccb-7b78-624f-a33453cfdb3c" executionId="3d3ce53b-2182-4682-8820-1c84bddfd083" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="c3d5ba8f-0448-b059-a097-c2b045cc8185" executionId="a4be48b4-5598-4809-bc3c-bd7bd05b7670" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="68ffb8d5-c832-0bdb-ccdf-f2c0712818bc" executionId="b05640f5-afcb-4459-85ac-694645e65bb9" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="1aa96349-b7cc-39a6-ef2d-1bc94162083b" executionId="f4e3e9bb-2d04-4a10-833f-669f41d91f8d" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="8297bd83-583e-3f19-5a11-4d86695f0918" executionId="f691ef88-2838-4a5b-83bf-ab71c317a606" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="23cc72f6-1284-a2ea-98e9-9489eed12fa1" executionId="74cb33d1-9303-4377-a6dc-42611bb7964d" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="4c428cc8-3af4-6e55-220b-111a2265bce0" executionId="5988d45e-8023-4583-91ca-02e2fc15c8fb" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="8e2e17a0-7a7d-b886-35e3-73304fb181bd" executionId="44b599c2-8f45-451b-bf3d-979af130eabf" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="3da2210e-7b6e-efa8-78ab-3f603d2cd027" executionId="78cea21e-842b-434b-b51f-da27e80777f4" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="421a5565-ddc6-10fa-8d73-07739fee5ff0" executionId="4f3a43ee-4682-4209-af7f-9de608ec73f3" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="2961e15a-0a3d-3b2e-3f18-6eafe65af0cf" executionId="99541d1a-9d81-483d-85b0-ca5369b57ef9" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="1cb42ef4-060e-402a-1304-dbbc4f14f5c3" executionId="9a0bacab-9184-4593-936d-737279a895e7" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="90be9f3f-f7e8-5087-dcab-84ab99d22feb" executionId="45fe73aa-b22c-4da0-a6f2-8e6a1221b5cb" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="4d0c6d38-bd12-6bbb-d3b6-600299f706cd" executionId="c874f550-6b8c-4105-802f-a88945a09c90" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="4f82a6c9-7939-1c4e-f9ef-b71164866bfd" executionId="df281ceb-d6cf-4e6b-80dd-8e657ed03935" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="14d87284-5071-f880-5b2b-ddbe92bfcff3" executionId="61a83ddb-14c9-4018-a090-686e983bd438" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="3aedb538-9959-6d5e-04af-0c2cfee7284b" executionId="3307442d-792d-463c-895d-d7a4843f0a72" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="c14fc3b8-bc44-a128-3b0c-52c2da94b6d9" executionId="8caf1976-5b48-4b6b-a661-1bb4066ec1b0" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="2fa55c7d-005e-6918-5d22-2aa304fbd3ea" executionId="516a48bd-fa6a-4735-8053-75307369c926" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="13133e83-ddb6-06e7-5855-8b90ef2b579a" executionId="63e5be95-1b31-4cb9-ba63-a6cb6079beac" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="423c4f37-64a8-ef35-39db-e60b85768eb5" executionId="08ddf405-5fd1-453e-b3d5-6762f72690b4" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="2acdce03-4502-c064-9941-04cc0d8bb0ed" executionId="2012193f-5435-46be-b374-80c63f0c36a4" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="f44ee653-06d8-88fd-5d52-7ca3b54ee5e5" executionId="de1a4c6d-4792-449e-babf-1976f6a10246" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="d35ae7fa-bd41-8e33-426d-126198b0fc12" executionId="4ccd8eaf-6722-453b-bc79-231ff114341e" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="051de0c9-b5ab-37e8-a17e-4a0a2016e964" executionId="8c508bc5-de7c-481e-925b-1ce8b1d98989" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="b921dbe5-c96f-5732-982c-eb4ed8e2a56f" executionId="f1c5e0cf-85a8-42dc-9bbf-ecba1809deac" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="ebcc226a-d4d6-e04f-6a23-b323c4d35009" executionId="c8be61e6-e95c-48ab-97e0-e299a25df061" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="68f3e440-4885-c4c9-72f3-92ff5e100405" executionId="f7cf297a-2db3-4a18-9b4f-5885ba287750" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="2d90bc88-284c-4518-b015-0b8170209597" executionId="224dabf3-19f4-493e-82d2-334ce1e76a98" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="87d98090-fa30-9a96-a551-3b4155dfeb29" executionId="b516cfef-c764-4d0a-b940-9398d78e072d" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="740c4fe7-4711-43c3-3c3e-334cc4c70bd0" executionId="c4327f57-fcf4-4610-9e9b-19e3b2d67063" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="1e311d18-bf3e-0cda-a43b-18e57c0d874e" executionId="ca6346b8-aab2-4d96-bda4-f26ee40f5234" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="821e93c5-ab9f-adf8-f7bc-0ff221a7796a" executionId="d392a566-5d50-420a-990e-c011697c5cba" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="1c9b3d7e-c6b0-eec5-53ac-d68181425b43" executionId="81bd9eba-ae32-497b-99b6-741993812fef" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="84550a56-94ea-5c8e-aade-b9aebae6e28a" executionId="34ed5804-9f78-42fd-84fb-506509e3e640" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="7e2bc572-ab64-60fb-b05f-959acda39dc2" executionId="7ab6060f-0213-4f19-ae0e-016930acc0df" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="32e944a3-567c-3548-b7a9-d08caf3da627" executionId="abf324ca-e315-4504-a1b5-352f6e24ef03" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="139f964d-2ed3-9b03-c583-30ed1c65c31c" executionId="e3fec467-7e9a-435c-bad4-f5e2da1ce467" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="ad397400-55a5-7e01-684f-84fbfd323ba8" executionId="cfb42647-795c-47de-8c97-b1d9013aa402" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="dfafb6b7-ec58-5275-3925-c481cdb7a34a" executionId="b119550f-613d-48c5-a89a-8fd4d42a9a8a" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="1e0cca3b-ca0b-0a7f-a62a-a76fda7ff72a" executionId="e6ac5750-e8e2-4958-810c-c79f180066c0" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="29d4bc57-5870-c7dc-b85d-667b481ded6c" executionId="19e2bce4-2134-4a4d-8932-200254235fd6" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="03c035d2-b594-de46-1c22-55fd252fe9a7" executionId="a0377e3d-0383-4f19-9d3b-b8a134dcd09e" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="fefd0340-8d73-0ac1-2fb2-b6681d23ead9" executionId="54e36b28-a38b-423d-b625-434ef3f87646" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="2f6d1052-3d37-17db-b801-40306c640428" executionId="bffa0fda-5577-4092-aa44-763121fd1732" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="470a0bfe-993f-05df-1d10-a213d08a730a" executionId="a649994a-42f1-467f-a416-69b4fddf76fb" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="9156e5ae-757c-4d5f-9321-7cef7c8ae534" executionId="cf556049-ec6d-4437-8ded-5118b46a9248" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="a47e926a-7ce2-0f09-babb-322e9f60373e" executionId="b3bee123-b3eb-4402-92f2-68531d59dc3d" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="782553cb-21f7-84ee-e145-2339af4a7fb8" executionId="d4f749e9-9687-4e3c-9cad-78f313310cd1" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="1cc1fb92-e16d-82c2-933a-f52034eb3af8" executionId="cccfb7d7-5e48-4c3a-ae0c-7e48e07b5af9" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="87db66e8-3797-2582-a71f-466884f912da" executionId="7a19e5cb-5155-432e-b761-15c48ae86e05" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="6f75d98a-bfe6-3583-9772-f6c9d7fc53a6" executionId="ffface09-932f-4bf1-b03a-2d54e7513e2d" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="4910f641-4998-8515-a7d2-a2f20f653df7" executionId="01d6c1de-b07c-4b32-8e1f-9eec98598cf2" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="2ecdc9b2-a817-8237-c422-4f63f0d355d8" executionId="8755a014-3339-4d0d-a794-77c2ee46df0c" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="b625b9c7-136a-f400-db5f-f7386e06c9f3" executionId="63875ac4-3bb6-43bc-a9ab-d41168099eb2" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="73b4e0f6-cf3c-19a3-0ea6-75f4d1acac05" executionId="5b528287-50ee-4ec0-83a2-37f469b54498" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="08b6ce0a-2ce9-b04e-8168-c06998ed03af" executionId="d0a706e6-c3a9-408a-9307-d39e8998a797" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="c6fc10ce-1b8c-db5d-82b8-35ec909d3152" executionId="6da48fc9-f66b-4cda-bea8-0bc611b64f97" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="f923bec6-3c0e-bda5-5e19-b629ccceef3f" executionId="76100e16-125e-4ba3-ab64-127c13a81e65" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="d4ded20d-d3b9-1442-571c-f7dc6b78c680" executionId="d225720a-e74e-4098-9663-e621b31a1ec8" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="7abc8d24-30d3-d6e8-72dd-cc35953c0c69" executionId="b54a3a69-afd6-41e5-a6dd-216880c1b33d" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="4a6b38d9-9cf7-4db2-da35-a8b63d506daa" executionId="988eca9b-984a-4409-81bc-7b8215008185" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="181dabdf-6994-9cd1-332b-f3a238c352e6" executionId="e133febe-c8d7-4c5c-8202-b91a453effeb" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="78800cf4-c501-8eb0-8d10-d522b560fff2" executionId="1733f63f-4314-420a-b805-05040f612e6b" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="1fb00485-e7e0-f10c-e5ab-349cf56d0767" executionId="6bd5df5f-147c-40be-b86f-b3240710c347" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="fcb2ca1e-19a6-4e0c-9949-28148335f239" executionId="bd9baecf-dab2-4d46-b4b9-9fc2dd5ee0a3" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="945c5a29-a83a-bb9e-d813-f6a456412c4c" executionId="0bd46ccd-8d9c-482e-a817-ec36d591dc56" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="a8c55508-0818-7079-489b-cfa127cdf6c5" executionId="275b5f7d-8dae-4108-a75e-d958a1244995" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="e180762e-d5f1-31a1-a39f-da1a238da0a2" executionId="5da01556-7fe4-45b6-baf1-451eb2e5dc59" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
  </TestEntries>
  <TestLists>
    <TestList name="Results Not in a List" id="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestList name="All Loaded Results" id="19431567-8539-422a-85d7-44ee4e166bda" />
  </TestLists>
  <ResultSummary outcome="Failed">
    <Counters total="232" executed="232" passed="208" failed="24" error="0" timeout="0" aborted="0" inconclusive="0" passedButRunAborted="0" notRunnable="0" notExecuted="0" disconnected="0" warning="0" completed="0" inProgress="0" pending="0" />
    <CollectorDataEntries>
      <Collector agentName="cursor" uri="datacollector://microsoft/CoverletCodeCoverage/1.0" collectorDisplayName="XPlat code coverage">
        <UriAttachments>
          <UriAttachment>
            <A href="cursor/coverage.cobertura.xml"></A>
          </UriAttachment>
        </UriAttachments>
      </Collector>
    </CollectorDataEntries>
  </ResultSummary>
</TestRun>